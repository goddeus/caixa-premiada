// üö® MOSTRAR TODOS OS PROBLEMAS - SLOTBOX
// Cole este c√≥digo no console do navegador (F12) para ver exatamente o que est√° errado

console.log('üö® INICIANDO AN√ÅLISE DE PROBLEMAS DO SLOTBOX...');

// ===== AN√ÅLISE 1: PROBLEMAS DE NAVEGA√á√ÉO =====
function analisarProblemasNavegacao() {
  console.log('\nüö® === PROBLEMAS DE NAVEGA√á√ÉO ===');
  
  const problemas = [];
  
  // Verificar se estamos no Dashboard
  if (window.location.pathname !== '/' && window.location.pathname !== '/dashboard') {
    problemas.push('‚ùå PROBLEMA: N√£o estamos no Dashboard');
    problemas.push(`   - Rota atual: ${window.location.pathname}`);
    problemas.push('   - SOLU√á√ÉO: Navegar para / ou /dashboard');
  }
  
  // Verificar se as caixas t√™m onClick
  const caixas = document.querySelectorAll('[data-testid="case-item"], .case-item, [class*="case"]');
  if (caixas.length === 0) {
    problemas.push('‚ùå PROBLEMA: Nenhuma caixa encontrada na p√°gina');
    problemas.push('   - SOLU√á√ÉO: Verificar se as caixas est√£o sendo renderizadas');
  } else {
    caixas.forEach((caixa, index) => {
      if (!caixa.onclick) {
        problemas.push(`‚ùå PROBLEMA: Caixa ${index + 1} n√£o tem onClick`);
        problemas.push('   - SOLU√á√ÉO: Adicionar onClick √† caixa');
      }
      
      const cursor = window.getComputedStyle(caixa).cursor;
      if (cursor !== 'pointer') {
        problemas.push(`‚ùå PROBLEMA: Caixa ${index + 1} n√£o tem cursor pointer`);
        problemas.push('   - SOLU√á√ÉO: Adicionar cursor: pointer ao CSS');
      }
    });
  }
  
  return problemas;
}

// ===== AN√ÅLISE 2: PROBLEMAS DE CONECTIVIDADE =====
async function analisarProblemasConectividade() {
  console.log('\nüö® === PROBLEMAS DE CONECTIVIDADE ===');
  
  const problemas = [];
  
  try {
    const response = await fetch('https://slotbox-api.onrender.com/api/health');
    if (!response.ok) {
      problemas.push('‚ùå PROBLEMA: API Health Check falhou');
      problemas.push(`   - Status: ${response.status} ${response.statusText}`);
      problemas.push('   - SOLU√á√ÉO: Verificar se o backend est√° online');
    }
  } catch (error) {
    problemas.push('‚ùå PROBLEMA: Erro de conectividade com a API');
    problemas.push(`   - Erro: ${error.message}`);
    problemas.push('   - SOLU√á√ÉO: Verificar conex√£o com a internet');
  }
  
  try {
    const response = await fetch('https://slotbox-api.onrender.com/api/cases');
    if (!response.ok) {
      problemas.push('‚ùå PROBLEMA: API de caixas falhou');
      problemas.push(`   - Status: ${response.status} ${response.statusText}`);
      problemas.push('   - SOLU√á√ÉO: Verificar se o backend est√° funcionando');
    }
  } catch (error) {
    problemas.push('‚ùå PROBLEMA: Erro ao carregar caixas');
    problemas.push(`   - Erro: ${error.message}`);
    problemas.push('   - SOLU√á√ÉO: Verificar API de caixas');
  }
  
  return problemas;
}

// ===== AN√ÅLISE 3: PROBLEMAS DE AUTENTICA√á√ÉO =====
function analisarProblemasAutenticacao() {
  console.log('\nüö® === PROBLEMAS DE AUTENTICA√á√ÉO ===');
  
  const problemas = [];
  
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  
  if (!token) {
    problemas.push('‚ùå PROBLEMA: Token n√£o encontrado no localStorage');
    problemas.push('   - SOLU√á√ÉO: Fazer login novamente');
  } else {
    try {
      const userData = JSON.parse(user);
      if (!userData.id) {
        problemas.push('‚ùå PROBLEMA: Dados do usu√°rio incompletos');
        problemas.push('   - SOLU√á√ÉO: Fazer login novamente');
      }
    } catch (e) {
      problemas.push('‚ùå PROBLEMA: Dados do usu√°rio corrompidos');
      problemas.push('   - SOLU√á√ÉO: Limpar localStorage e fazer login novamente');
    }
  }
  
  return problemas;
}

// ===== AN√ÅLISE 4: PROBLEMAS DE FRONTEND =====
function analisarProblemasFrontend() {
  console.log('\nüö® === PROBLEMAS DE FRONTEND ===');
  
  const problemas = [];
  
  // Verificar se est√° no dom√≠nio correto
  if (window.location.hostname !== 'slotbox.shop') {
    problemas.push('‚ùå PROBLEMA: Dom√≠nio incorreto');
    problemas.push(`   - Dom√≠nio atual: ${window.location.hostname}`);
    problemas.push('   - Dom√≠nio esperado: slotbox.shop');
    problemas.push('   - SOLU√á√ÉO: Acessar https://slotbox.shop');
  }
  
  // Verificar se as imagens est√£o carregando
  const imagens = document.querySelectorAll('img');
  let imagensComErro = 0;
  
  imagens.forEach(img => {
    if (img.complete && img.naturalHeight === 0) {
      imagensComErro++;
    }
  });
  
  if (imagensComErro > 0) {
    problemas.push(`‚ùå PROBLEMA: ${imagensComErro} imagens com erro de carregamento`);
    problemas.push('   - SOLU√á√ÉO: Verificar se as imagens existem no servidor');
  }
  
  // Verificar se h√° erros no console
  const errors = [];
  const originalError = console.error;
  console.error = function(...args) {
    errors.push(args.join(' '));
    originalError.apply(console, args);
  };
  
  // Restaurar ap√≥s um tempo
  setTimeout(() => {
    console.error = originalError;
    if (errors.length > 0) {
      problemas.push(`‚ùå PROBLEMA: ${errors.length} erros no console`);
      errors.forEach(error => {
        problemas.push(`   - Erro: ${error}`);
      });
      problemas.push('   - SOLU√á√ÉO: Verificar c√≥digo JavaScript');
    }
  }, 1000);
  
  return problemas;
}

// ===== AN√ÅLISE 5: PROBLEMAS DE PERFORMANCE =====
function analisarProblemasPerformance() {
  console.log('\nüö® === PROBLEMAS DE PERFORMANCE ===');
  
  const problemas = [];
  
  // Verificar tempo de carregamento
  const loadTime = performance.now();
  if (loadTime > 5000) {
    problemas.push('‚ùå PROBLEMA: Tempo de carregamento muito alto');
    problemas.push(`   - Tempo: ${loadTime.toFixed(2)}ms`);
    problemas.push('   - SOLU√á√ÉO: Otimizar carregamento de recursos');
  }
  
  // Verificar mem√≥ria
  if (performance.memory) {
    const memoryUsed = performance.memory.usedJSHeapSize / 1024 / 1024;
    if (memoryUsed > 100) {
      problemas.push('‚ùå PROBLEMA: Uso de mem√≥ria muito alto');
      problemas.push(`   - Mem√≥ria: ${memoryUsed.toFixed(2)}MB`);
      problemas.push('   - SOLU√á√ÉO: Verificar vazamentos de mem√≥ria');
    }
  }
  
  // Verificar elementos DOM
  const elements = document.querySelectorAll('*');
  if (elements.length > 10000) {
    problemas.push('‚ùå PROBLEMA: Muitos elementos DOM');
    problemas.push(`   - Elementos: ${elements.length}`);
    problemas.push('   - SOLU√á√ÉO: Otimizar renderiza√ß√£o');
  }
  
  return problemas;
}

// ===== AN√ÅLISE 6: PROBLEMAS DE SISTEMA =====
function analisarProblemasSistema() {
  console.log('\nüö® === PROBLEMAS DE SISTEMA ===');
  
  const problemas = [];
  
  // Verificar se a API est√° configurada
  if (!window.api) {
    problemas.push('‚ùå PROBLEMA: API Service n√£o encontrado');
    problemas.push('   - SOLU√á√ÉO: Verificar se o arquivo api.js est√° carregado');
  }
  
  // Verificar se React Router est√° funcionando
  if (!window.ReactRouterDOM) {
    problemas.push('‚ùå PROBLEMA: React Router DOM n√£o encontrado');
    problemas.push('   - SOLU√á√ÉO: Verificar se o React Router est√° instalado');
  }
  
  // Verificar se h√° erros de JavaScript
  const jsErrors = [];
  window.addEventListener('error', (e) => {
    jsErrors.push(e.message);
  });
  
  setTimeout(() => {
    if (jsErrors.length > 0) {
      problemas.push(`‚ùå PROBLEMA: ${jsErrors.length} erros de JavaScript`);
      jsErrors.forEach(error => {
        problemas.push(`   - Erro: ${error}`);
      });
      problemas.push('   - SOLU√á√ÉO: Verificar c√≥digo JavaScript');
    }
  }, 1000);
  
  return problemas;
}

// ===== FUN√á√ÉO PRINCIPAL =====
async function mostrarTodosOsProblemas() {
  console.log('üö® ANALISANDO TODOS OS PROBLEMAS DO SLOTBOX...');
  
  const todosOsProblemas = [];
  
  // An√°lise 1: Navega√ß√£o
  const problemasNavegacao = analisarProblemasNavegacao();
  todosOsProblemas.push(...problemasNavegacao);
  
  // An√°lise 2: Conectividade
  const problemasConectividade = await analisarProblemasConectividade();
  todosOsProblemas.push(...problemasConectividade);
  
  // An√°lise 3: Autentica√ß√£o
  const problemasAutenticacao = analisarProblemasAutenticacao();
  todosOsProblemas.push(...problemasAutenticacao);
  
  // An√°lise 4: Frontend
  const problemasFrontend = analisarProblemasFrontend();
  todosOsProblemas.push(...problemasFrontend);
  
  // An√°lise 5: Performance
  const problemasPerformance = analisarProblemasPerformance();
  todosOsProblemas.push(...problemasPerformance);
  
  // An√°lise 6: Sistema
  const problemasSistema = analisarProblemasSistema();
  todosOsProblemas.push(...problemasSistema);
  
  // Aguardar um pouco para capturar erros
  setTimeout(() => {
    console.log('\nüéØ === RESUMO DE TODOS OS PROBLEMAS ===');
    
    if (todosOsProblemas.length === 0) {
      console.log('üéâ NENHUM PROBLEMA ENCONTRADO!');
      console.log('‚úÖ O sistema est√° funcionando perfeitamente!');
    } else {
      console.log(`üö® ${todosOsProblemas.length} PROBLEMAS ENCONTRADOS:`);
      console.log('\nüìã LISTA COMPLETA DE PROBLEMAS:');
      
      todosOsProblemas.forEach((problema, index) => {
        console.log(`${index + 1}. ${problema}`);
      });
      
      console.log('\nüîß PR√ìXIMOS PASSOS:');
      console.log('1. Corrigir os problemas listados acima');
      console.log('2. Testar cada corre√ß√£o individualmente');
      console.log('3. Executar este script novamente para verificar');
    }
    
    // Salvar problemas para an√°lise
    window.todosOsProblemas = todosOsProblemas;
    console.log('\nüíæ Problemas salvos em window.todosOsProblemas');
    
  }, 2000);
}

// ===== EXECUTAR AN√ÅLISE =====
console.log('üö® AN√ÅLISE DE PROBLEMAS DO SLOTBOX PRONTA!');
console.log('üìã Execute: mostrarTodosOsProblemas()');

// Executar automaticamente
mostrarTodosOsProblemas();
