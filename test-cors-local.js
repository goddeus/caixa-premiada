#!/usr/bin/env node

/**
 * Script para testar CORS localmente
 * Simula requisi√ß√µes do frontend para o backend local
 */

const http = require('http');

const BACKEND_URL = 'http://localhost:3001';
const FRONTEND_URL = 'http://localhost:5173';

console.log('üß™ Testando CORS localmente...\n');

// Fun√ß√£o para fazer requisi√ß√£o HTTP
function makeRequest(path, options = {}) {
  return new Promise((resolve, reject) => {
    const requestOptions = {
      hostname: 'localhost',
      port: 3001,
      path: path,
      method: options.method || 'GET',
      headers: {
        'Origin': FRONTEND_URL,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        ...options.headers
      },
      timeout: 5000
    };

    const req = http.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
          corsHeaders: {
            'Access-Control-Allow-Origin': res.headers['access-control-allow-origin'],
            'Access-Control-Allow-Methods': res.headers['access-control-allow-methods'],
            'Access-Control-Allow-Headers': res.headers['access-control-allow-headers'],
            'Access-Control-Allow-Credentials': res.headers['access-control-allow-credentials']
          }
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Timeout - Servidor n√£o est√° rodando'));
    });

    req.end();
  });
}

// Teste 1: Verificar se servidor est√° rodando
async function testServerRunning() {
  console.log('1Ô∏è‚É£ Verificando se servidor est√° rodando...');
  try {
    const response = await makeRequest('/api/health');
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    return true;
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    console.log('   üí° Solu√ß√£o: Execute "npm run dev" no diret√≥rio backend/');
    return false;
  }
}

// Teste 2: CORS Preflight
async function testCorsPreflight() {
  console.log('\n2Ô∏è‚É£ Testando CORS Preflight...');
  try {
    const response = await makeRequest('/api/cases', {
      method: 'OPTIONS',
      headers: {
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type, Authorization'
      }
    });
    
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    
    if (response.statusCode === 200 && response.corsHeaders['Access-Control-Allow-Origin']) {
      console.log('   üéâ CORS Preflight funcionando!');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è  CORS Preflight com problemas');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Teste 3: Requisi√ß√£o GET real
async function testRealRequest() {
  console.log('\n3Ô∏è‚É£ Testando requisi√ß√£o GET real...');
  try {
    const response = await makeRequest('/api/cases');
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    
    if (response.statusCode === 200) {
      console.log('   üéâ Requisi√ß√£o GET funcionando!');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è  Requisi√ß√£o GET com problemas');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ Iniciando testes locais...\n');
  
  const results = {
    serverRunning: await testServerRunning(),
    corsPreflight: await testCorsPreflight(),
    realRequest: await testRealRequest()
  };
  
  console.log('\nüìä RESUMO DOS TESTES LOCAIS:');
  console.log('============================');
  console.log(`Servidor Rodando: ${results.serverRunning ? '‚úÖ' : '‚ùå'}`);
  console.log(`CORS Preflight: ${results.corsPreflight ? '‚úÖ' : '‚ùå'}`);
  console.log(`Requisi√ß√£o GET: ${results.realRequest ? '‚úÖ' : '‚ùå'}`);
  
  const allPassed = Object.values(results).every(result => result === true);
  
  if (allPassed) {
    console.log('\nüéâ TODOS OS TESTES LOCAIS PASSARAM!');
    console.log('As corre√ß√µes de CORS est√£o funcionando localmente.');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Commit as altera√ß√µes: git add . && git commit -m "Fix CORS"');
    console.log('2. Push para o reposit√≥rio: git push origin main');
    console.log('3. Aguarde o deploy autom√°tico no Render.com');
    console.log('4. Teste em produ√ß√£o: node test-api-connection.js');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!');
    console.log('Verifique os problemas acima antes de fazer deploy.');
  }
  
  return allPassed;
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests, makeRequest };
