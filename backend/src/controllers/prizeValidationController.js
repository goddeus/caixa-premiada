// Servi√ßo de valida√ß√£o de pr√™mios removido - usando valida√ß√£o simplificada

class PrizeValidationController {
  
  /**
   * Executa verifica√ß√£o global de consist√™ncia de pr√™mios
   */
  async verificarConsistencia(req, res) {
    try {
      console.log('üîç Admin solicitou verifica√ß√£o de consist√™ncia de pr√™mios');
      
      // const result = await prizeValidationService.verificarConsistenciaPremios();
      const result = { success: true, message: 'Verifica√ß√£o n√£o dispon√≠vel' };
      
      res.json({
        success: result.success,
        message: result.success ? 'Verifica√ß√£o conclu√≠da com sucesso' : 'Erro na verifica√ß√£o',
        data: result
      });
      
    } catch (error) {
      console.error('Erro no controller de valida√ß√£o:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: error.message
      });
    }
  }

  /**
   * Corrige automaticamente inconsist√™ncias simples
   */
  async corrigirAutomaticamente(req, res) {
    try {
      console.log('üîß Admin solicitou corre√ß√£o autom√°tica de inconsist√™ncias');
      
      // const result = await prizeValidationService.corrigirInconsistenciasAutomaticamente();
      const result = { success: true, message: 'Corre√ß√£o n√£o dispon√≠vel' };
      
      res.json({
        success: result.success,
        message: result.success ? 'Corre√ß√£o autom√°tica conclu√≠da' : 'Erro na corre√ß√£o autom√°tica',
        data: result
      });
      
    } catch (error) {
      console.error('Erro na corre√ß√£o autom√°tica:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: error.message
      });
    }
  }

  /**
   * Obt√©m estat√≠sticas de valida√ß√£o
   */
  async getEstatisticas(req, res) {
    try {
      // const stats = await prizeValidationService.getValidationStats();
      const stats = { total_prizes: 0, inconsistent_prizes: 0, fixed_prizes: 0 };
      
      res.json({
        success: true,
        data: stats
      });
      
    } catch (error) {
      console.error('Erro ao obter estat√≠sticas:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: error.message
      });
    }
  }

  /**
   * Valida um pr√™mio espec√≠fico
   */
  async validarPremioEspecifico(req, res) {
    try {
      const { prizeId } = req.params;
      
      if (!prizeId) {
        return res.status(400).json({
          success: false,
          error: 'ID do pr√™mio √© obrigat√≥rio'
        });
      }

      // const result = await prizeValidationService.validatePrizeBeforeCredit(prizeId);
      const result = { success: true, message: 'Valida√ß√£o n√£o dispon√≠vel' };
      
      // Adicionar informa√ß√µes sobre status do pr√™mio
      if (result.prize) {
        result.status = result.prize.ilustrativo ? 'Ilustrativo' : 'Ativo';
        result.can_be_drawn = !result.prize.ilustrativo && result.valid;
      }
      
      res.json({
        success: true,
        data: result
      });
      
    } catch (error) {
      console.error('Erro na valida√ß√£o espec√≠fica:', error);
      res.status(500).json({
        success: false,
        error: 'Erro interno do servidor',
        message: error.message
      });
    }
  }
}

module.exports = PrizeValidationController;

