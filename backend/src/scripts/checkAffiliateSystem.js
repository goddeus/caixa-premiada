/**
 * SCRIPT PARA VERIFICAR E CORRIGIR O SISTEMA DE AFILIADOS
 * 
 * Este script verifica:
 * 1. Se o usu√°rio paulotest@gmail.com tem afiliado vinculado
 * 2. Se a comiss√£o foi processada corretamente
 * 3. Se os dados do afiliado est√£o corretos
 */

const { PrismaClient } = require('@prisma/client');
const AffiliateService = require('../services/affiliateService');

const prisma = new PrismaClient();

async function checkAffiliateSystem() {
  try {
    console.log('üîç VERIFICANDO SISTEMA DE AFILIADOS...\n');
    
    const userId = '6f73f55f-f9d6-4108-8838-ab76407d7e63';
    const userEmail = 'paulotest@gmail.com';
    
    // 1. Buscar dados do usu√°rio
    console.log('üë§ Buscando dados do usu√°rio...');
    const user = await prisma.user.findUnique({
      where: { id: userId },
      include: { wallet: true }
    });
    
    if (!user) {
      console.error('‚ùå Usu√°rio n√£o encontrado!');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.email}`);
    console.log(`   Nome: ${user.nome}`);
    console.log(`   Tipo de conta: ${user.tipo_conta}`);
    console.log(`   Affiliate ID: ${user.affiliate_id || 'Nenhum'}`);
    console.log(`   C√≥digo usado: ${user.codigo_indicacao_usado || 'Nenhum'}`);
    console.log(`   Saldo atual: R$ ${user.saldo_reais}`);
    
    // 2. Verificar se tem afiliado vinculado
    if (user.affiliate_id) {
      console.log('\nüéØ Usu√°rio tem afiliado vinculado!');
      
      // Buscar dados do afiliado
      const affiliate = await prisma.affiliate.findUnique({
        where: { user_id: user.affiliate_id },
        include: { user: true }
      });
      
      if (affiliate) {
        console.log(`‚úÖ Afiliado encontrado:`);
        console.log(`   Nome: ${affiliate.user.nome}`);
        console.log(`   Email: ${affiliate.user.email}`);
        console.log(`   C√≥digo: ${affiliate.codigo_indicacao}`);
        console.log(`   Ganhos: R$ ${affiliate.ganhos}`);
        console.log(`   Saldo dispon√≠vel: R$ ${affiliate.saldo_disponivel}`);
        
        // 3. Verificar se j√° existe comiss√£o processada
        console.log('\nüí∞ Verificando comiss√µes...');
        const existingCommission = await prisma.affiliateCommission.findFirst({
          where: {
            affiliate_id: affiliate.id,
            user_id: userId
          }
        });
        
        if (existingCommission) {
          console.log(`‚úÖ Comiss√£o j√° existe:`);
          console.log(`   Valor: R$ ${existingCommission.valor}`);
          console.log(`   Status: ${existingCommission.status}`);
          console.log(`   Data: ${existingCommission.criado_em}`);
        } else {
          console.log('‚ùå Comiss√£o N√ÉO foi processada!');
          console.log('üîÑ Processando comiss√£o agora...');
          
          try {
            await AffiliateService.processAffiliateCommission({
              userId: userId,
              depositAmount: 20.00,
              depositStatus: 'concluido'
            });
            
            console.log('‚úÖ Comiss√£o processada com sucesso!');
            
            // Verificar dados atualizados do afiliado
            const updatedAffiliate = await prisma.affiliate.findUnique({
              where: { user_id: user.affiliate_id },
              include: { user: true }
            });
            
            console.log(`\nüìä Dados atualizados do afiliado:`);
            console.log(`   Ganhos: R$ ${updatedAffiliate.ganhos}`);
            console.log(`   Saldo dispon√≠vel: R$ ${updatedAffiliate.saldo_disponivel}`);
            console.log(`   Saldo do usu√°rio: R$ ${updatedAffiliate.user.saldo_reais}`);
            
          } catch (error) {
            console.error('‚ùå Erro ao processar comiss√£o:', error.message);
          }
        }
        
        // 4. Verificar hist√≥rico de afiliados
        console.log('\nüìã Verificando hist√≥rico de afiliados...');
        const affiliateHistory = await prisma.affiliateHistory.findFirst({
          where: {
            affiliate_id: affiliate.id,
            indicado_id: userId
          }
        });
        
        if (affiliateHistory) {
          console.log(`‚úÖ Hist√≥rico encontrado:`);
          console.log(`   Dep√≥sito v√°lido: ${affiliateHistory.deposito_valido}`);
          console.log(`   Valor do dep√≥sito: R$ ${affiliateHistory.valor_deposito}`);
          console.log(`   Comiss√£o: R$ ${affiliateHistory.comissao}`);
          console.log(`   Status: ${affiliateHistory.status}`);
        } else {
          console.log('‚ùå Hist√≥rico de afiliado n√£o encontrado!');
        }
        
      } else {
        console.log('‚ùå Afiliado n√£o encontrado no banco!');
      }
      
    } else {
      console.log('\n‚ùå Usu√°rio N√ÉO tem afiliado vinculado!');
      console.log('üí° Isso significa que:');
      console.log('   - O usu√°rio n√£o usou c√≥digo de indica√ß√£o no registro');
      console.log('   - Ou o c√≥digo usado era inv√°lido');
      console.log('   - Ou houve erro no processo de vincula√ß√£o');
      
      // Verificar se existe c√≥digo de indica√ß√£o usado
      if (user.codigo_indicacao_usado) {
        console.log(`\nüîç C√≥digo usado: ${user.codigo_indicacao_usado}`);
        
        // Verificar se o c√≥digo existe
        const affiliateByCode = await prisma.affiliate.findUnique({
          where: { codigo_indicacao: user.codigo_indicacao_usado },
          include: { user: true }
        });
        
        if (affiliateByCode) {
          console.log('‚úÖ C√≥digo existe! Vinculando usu√°rio ao afiliado...');
          
          // Vincular usu√°rio ao afiliado
          await prisma.user.update({
            where: { id: userId },
            data: { affiliate_id: affiliateByCode.user_id }
          });
          
          console.log('‚úÖ Usu√°rio vinculado ao afiliado!');
          console.log(`   Afiliado: ${affiliateByCode.user.nome} (${affiliateByCode.user.email})`);
          
          // Processar comiss√£o
          console.log('üîÑ Processando comiss√£o...');
          await AffiliateService.processAffiliateCommission({
            userId: userId,
            depositAmount: 20.00,
            depositStatus: 'concluido'
          });
          
          console.log('‚úÖ Comiss√£o processada!');
          
        } else {
          console.log('‚ùå C√≥digo de indica√ß√£o n√£o existe no banco!');
        }
      }
    }
    
    // 5. Resumo final
    console.log('\nüìä RESUMO FINAL:');
    console.log('================');
    
    const finalUser = await prisma.user.findUnique({
      where: { id: userId },
      include: { wallet: true }
    });
    
    console.log(`üë§ Usu√°rio: ${finalUser.email}`);
    console.log(`üí∞ Saldo: R$ ${finalUser.saldo_reais}`);
    console.log(`üéØ Afiliado: ${finalUser.affiliate_id ? 'Vinculado' : 'N√£o vinculado'}`);
    
    if (finalUser.affiliate_id) {
      const finalAffiliate = await prisma.affiliate.findUnique({
        where: { user_id: finalUser.affiliate_id },
        include: { user: true }
      });
      
      console.log(`üìà Afiliado: ${finalAffiliate.user.nome}`);
      console.log(`üíµ Ganhos do afiliado: R$ ${finalAffiliate.ganhos}`);
      console.log(`üí≥ Saldo do afiliado: R$ ${finalAffiliate.user.saldo_reais}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o:', error);
    console.error(error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar verifica√ß√£o
checkAffiliateSystem();
