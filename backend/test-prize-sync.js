const prizeSyncService = require('./src/services/prizeSyncService');
const backupService = require('./src/services/backupService');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * Script de teste para o sistema de sincroniza√ß√£o de pr√™mios
 */
async function testPrizeSync() {
  console.log('üß™ Iniciando testes do sistema de sincroniza√ß√£o de pr√™mios...\n');

  try {
    // 1. Teste de backup
    console.log('1Ô∏è‚É£ Testando sistema de backup...');
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupResult = await backupService.createFullBackup(timestamp);
    
    if (backitResult.success) {
      console.log('‚úÖ Backup criado com sucesso!');
      console.log(`üìÅ Banco: ${backupResult.database_backup?.file_path}`);
      console.log(`üñºÔ∏è Imagens: ${backupResult.images_backup?.backup_path}`);
    } else {
      console.log('‚ùå Falha no backup:', backupResult.errors);
    }

    // 2. Teste de auditoria antes da sincroniza√ß√£o
    console.log('\n2Ô∏è‚É£ Executando auditoria antes da sincroniza√ß√£o...');
    const auditBefore = await prisma.prize.findMany({
      where: { ativo: true },
      include: { case: true },
      orderBy: [{ case: { nome: 'asc' } }, { valor_centavos: 'asc' }]
    });

    console.log(`üìä Pr√™mios ativos encontrados: ${auditBefore.length}`);
    console.log(`üì¶ Caixas com pr√™mios: ${new Set(auditBefore.map(p => p.case.nome)).size}`);

    // 3. Teste de sincroniza√ß√£o de uma caixa espec√≠fica
    console.log('\n3Ô∏è‚É£ Testando sincroniza√ß√£o da CAIXA APPLE...');
    const appleCase = await prisma.case.findFirst({
      where: { nome: 'CAIXA APPLE' }
    });

    if (appleCase) {
      const syncResult = await prizeSyncService.syncPrizes(appleCase.id);
      
      if (syncResult.success) {
        console.log('‚úÖ Sincroniza√ß√£o da CAIXA APPLE conclu√≠da!');
        console.log(`üìä Pr√™mios atualizados: ${syncResult.total_prizes_updated}`);
        console.log(`‚ûï Pr√™mios inseridos: ${syncResult.total_prizes_inserted}`);
        console.log(`üö´ Pr√™mios desativados: ${syncResult.total_prizes_deactivated}`);
        console.log(`üñºÔ∏è Imagens faltando: ${syncResult.total_images_missing}`);
      } else {
        console.log('‚ùå Falha na sincroniza√ß√£o:', syncResult.errors);
      }
    } else {
      console.log('‚ö†Ô∏è CAIXA APPLE n√£o encontrada');
    }

    // 4. Teste de sincroniza√ß√£o de todas as caixas
    console.log('\n4Ô∏è‚É£ Testando sincroniza√ß√£o de todas as caixas...');
    const fullSyncResult = await prizeSyncService.syncPrizes();
    
    if (fullSyncResult.success) {
      console.log('‚úÖ Sincroniza√ß√£o completa conclu√≠da!');
      console.log(`üì¶ Caixas processadas: ${fullSyncResult.total_cases_processed}`);
      console.log(`üìä Pr√™mios atualizados: ${fullSyncResult.total_prizes_updated}`);
      console.log(`‚ûï Pr√™mios inseridos: ${fullSyncResult.total_prizes_inserted}`);
      console.log(`üö´ Pr√™mios desativados: ${fullSyncResult.total_prizes_deactivated}`);
      console.log(`üñºÔ∏è Imagens faltando: ${fullSyncResult.total_images_missing}`);
    } else {
      console.log('‚ùå Falha na sincroniza√ß√£o completa:', fullSyncResult.errors);
    }

    // 5. Teste de auditoria ap√≥s sincroniza√ß√£o
    console.log('\n5Ô∏è‚É£ Executando auditoria ap√≥s sincroniza√ß√£o...');
    const auditAfter = await prisma.prize.findMany({
      where: { ativo: true },
      include: { case: true },
      orderBy: [{ case: { nome: 'asc' } }, { valor_centavos: 'asc' }]
    });

    console.log(`üìä Pr√™mios ativos ap√≥s sincroniza√ß√£o: ${auditAfter.length}`);
    
    // Verificar pr√™mios ilustrativos
    const illustrativePrizes = auditAfter.filter(p => p.ilustrativo || p.tipo === 'ilustrativo');
    console.log(`üé® Pr√™mios ilustrativos: ${illustrativePrizes.length}`);
    
    // Verificar pr√™mios n√£o sorte√°veis
    const nonSorteablePrizes = auditAfter.filter(p => p.sorteavel === false);
    console.log(`üö´ Pr√™mios n√£o sorte√°veis: ${nonSorteablePrizes.length}`);

    // 6. Teste de valida√ß√£o de pr√™mios
    console.log('\n6Ô∏è‚É£ Testando valida√ß√£o de pr√™mios...');
    const validationResults = [];
    
    for (const prize of auditAfter) {
      const validation = validatePrize(prize);
      if (validation.status !== 'ok') {
        validationResults.push({
          case: prize.case.nome,
          prize: prize.nome,
          status: validation.status,
          issues: validation.issues
        });
      }
    }

    if (validationResults.length === 0) {
      console.log('‚úÖ Todos os pr√™mios est√£o v√°lidos!');
    } else {
      console.log(`‚ö†Ô∏è ${validationResults.length} pr√™mios com problemas:`);
      validationResults.forEach(result => {
        console.log(`  - ${result.case}: ${result.prize} (${result.status})`);
        result.issues.forEach(issue => console.log(`    * ${issue}`));
      });
    }

    // 7. Teste de simula√ß√£o de sorteio
    console.log('\n7Ô∏è‚É£ Testando simula√ß√£o de sorteio...');
    await testDrawSimulation();

    // 8. Relat√≥rio final
    console.log('\nüìã RELAT√ìRIO FINAL DOS TESTES:');
    console.log('================================');
    console.log(`‚úÖ Backup: ${backupResult.success ? 'SUCESSO' : 'FALHA'}`);
    console.log(`‚úÖ Sincroniza√ß√£o: ${fullSyncResult.success ? 'SUCESSO' : 'FALHA'}`);
    console.log(`üìä Pr√™mios antes: ${auditBefore.length}`);
    console.log(`üìä Pr√™mios depois: ${auditAfter.length}`);
    console.log(`üé® Pr√™mios ilustrativos: ${illustrativePrizes.length}`);
    console.log(`üö´ Pr√™mios n√£o sorte√°veis: ${nonSorteablePrizes.length}`);
    console.log(`‚ö†Ô∏è Pr√™mios com problemas: ${validationResults.length}`);

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Valida um pr√™mio espec√≠fico
 */
function validatePrize(prize) {
  const issues = [];
  let status = 'ok';

  // Verificar se tem imagem
  if (!prize.imagem_url || prize.imagem_url.trim() === '') {
    issues.push('Sem imagem');
    status = 'warning';
  }

  // Verificar consist√™ncia de dados
  if (prize.tipo === 'cash' && prize.nome !== prize.label) {
    issues.push('Nome e label inconsistentes para cash');
    status = 'warning';
  }

  // Verificar se pr√™mio ilustrativo est√° marcado corretamente
  const shouldBeIllustrative = prize.valor_centavos > 100000; // R$ 1.000,00
  if (shouldBeIllustrative && !prize.ilustrativo) {
    issues.push('Deve ser marcado como ilustrativo (valor > R$ 1.000)');
    status = 'error';
  }

  // Verificar se pr√™mio ilustrativo n√£o √© sorte√°vel
  if (prize.ilustrativo && prize.sorteavel) {
    issues.push('Pr√™mio ilustrativo n√£o deve ser sorte√°vel');
    status = 'error';
  }

  // Verificar probabilidade
  if (prize.probabilidade <= 0 || prize.probabilidade > 1) {
    issues.push('Probabilidade inv√°lida');
    status = 'error';
  }

  // Verificar valor em centavos
  const expectedCentavos = Math.round(prize.valor * 100);
  if (prize.valor_centavos !== expectedCentavos) {
    issues.push(`Valor em centavos incorreto (esperado: ${expectedCentavos}, atual: ${prize.valor_centavos})`);
    status = 'error';
  }

  return { status, issues };
}

/**
 * Testa simula√ß√£o de sorteio
 */
async function testDrawSimulation() {
  try {
    const globalDrawService = require('./src/services/globalDrawService');
    
    // Buscar uma caixa para teste
    const testCase = await prisma.case.findFirst({
      where: { ativo: true }
    });

    if (!testCase) {
      console.log('‚ö†Ô∏è Nenhuma caixa ativa encontrada para teste de sorteio');
      return;
    }

    console.log(`üé≤ Testando sorteio na caixa: ${testCase.nome}`);
    
    // Executar 10 simula√ß√µes
    const results = [];
    for (let i = 0; i < 10; i++) {
      try {
        const drawResult = await globalDrawService.sortearPremio(testCase.id, 'test-user-id');
        results.push({
          success: drawResult.success,
          prize: drawResult.prize,
          isIllustrative: drawResult.prize?.valor > 1000
        });
      } catch (error) {
        results.push({
          success: false,
          error: error.message
        });
      }
    }

    const successfulDraws = results.filter(r => r.success);
    const illustrativeDraws = results.filter(r => r.success && r.isIllustrative);
    
    console.log(`‚úÖ Sorteios bem-sucedidos: ${successfulDraws.length}/10`);
    console.log(`üé® Pr√™mios ilustrativos sorteados: ${illustrativeDraws.length}`);
    
    if (illustrativeDraws.length > 0) {
      console.log('‚ùå ERRO: Pr√™mios ilustrativos foram sorteados!');
      illustrativeDraws.forEach(draw => {
        console.log(`  - ${draw.prize.nome} (R$ ${draw.prize.valor})`);
      });
    } else {
      console.log('‚úÖ Nenhum pr√™mio ilustrativo foi sorteado - sistema funcionando corretamente!');
    }

  } catch (error) {
    console.error('‚ùå Erro no teste de sorteio:', error);
  }
}

// Executar testes
if (require.main === module) {
  testPrizeSync();
}

module.exports = { testPrizeSync, validatePrize };
