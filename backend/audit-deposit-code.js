/**
 * AUDITORIA DE C√ìDIGO DO SISTEMA DE DEP√ìSITO
 * 
 * Esta auditoria analisa o c√≥digo sem precisar de conex√£o com o banco,
 * identificando poss√≠veis problemas no sistema de dep√≥sito.
 */

const fs = require('fs');
const path = require('path');

class DepositCodeAudit {
  
  constructor() {
    this.results = {
      totalChecks: 0,
      passed: 0,
      failed: 0,
      warnings: 0,
      issues: []
    };
  }

  async runAudit() {
    console.log('üîç AUDITORIA DE C√ìDIGO - SISTEMA DE DEP√ìSITO');
    console.log('=' .repeat(80));
    
    try {
      // 1. Verificar estrutura de arquivos
      await this.checkFileStructure();
      
      // 2. Analisar fluxo de pagamento
      await this.analyzePaymentFlow();
      
      // 3. Verificar tratamento de erros
      await this.checkErrorHandling();
      
      // 4. Analisar valida√ß√µes
      await this.checkValidations();
      
      // 5. Verificar transa√ß√µes at√¥micas
      await this.checkAtomicTransactions();
      
      // 6. Analisar logs e auditoria
      await this.checkLoggingAndAudit();
      
      // 7. Verificar seguran√ßa
      await this.checkSecurity();
      
      // 8. Relat√≥rio final
      this.generateReport();
      
    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO NA AUDITORIA:', error);
      this.results.issues.push(`Erro cr√≠tico: ${error.message}`);
    }
  }

  async checkFileStructure() {
    console.log('\nüìã VERIFICA√á√ÉO 1: ESTRUTURA DE ARQUIVOS');
    console.log('-'.repeat(50));
    
    const requiredFiles = [
      'src/services/vizzionPayService.js',
      'src/controllers/paymentController.js',
      'src/services/walletService.js',
      'src/controllers/transactionsController.js',
      'src/services/affiliateService.js',
      'prisma/schema.prisma'
    ];
    
    for (const file of requiredFiles) {
      const filePath = path.join(__dirname, file);
      
      if (fs.existsSync(filePath)) {
        console.log(`   ‚úÖ ${file} - Existe`);
        this.results.passed++;
      } else {
        console.log(`   ‚ùå ${file} - N√£o encontrado`);
        this.results.failed++;
        this.results.issues.push(`Arquivo obrigat√≥rio n√£o encontrado: ${file}`);
      }
      
      this.results.totalChecks++;
    }
  }

  async analyzePaymentFlow() {
    console.log('\nüìã VERIFICA√á√ÉO 2: FLUXO DE PAGAMENTO');
    console.log('-'.repeat(50));
    
    // Analisar VizzionPayService
    const vizzionPath = path.join(__dirname, 'src/services/vizzionPayService.js');
    if (fs.existsSync(vizzionPath)) {
      const content = fs.readFileSync(vizzionPath, 'utf8');
      
      console.log('üß™ Analisando VizzionPayService...');
      
      // Verificar se tem m√©todo processCallback
      if (content.includes('processCallback')) {
        console.log('   ‚úÖ M√©todo processCallback encontrado');
        this.results.passed++;
      } else {
        console.log('   ‚ùå M√©todo processCallback n√£o encontrado');
        this.results.failed++;
        this.results.issues.push('VizzionPayService: M√©todo processCallback ausente');
      }
      this.results.totalChecks++;
      
      // Verificar se credita saldo baseado no tipo de conta
      if (content.includes('tipo_conta === \'afiliado_demo\'')) {
        console.log('   ‚úÖ Diferencia√ß√£o por tipo de conta implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Diferencia√ß√£o por tipo de conta pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('VizzionPayService: Verificar diferencia√ß√£o por tipo de conta');
      }
      this.results.totalChecks++;
      
      // Verificar se atualiza primeiro_deposito_feito
      if (content.includes('primeiro_deposito_feito')) {
        console.log('   ‚úÖ Controle de primeiro dep√≥sito implementado');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Controle de primeiro dep√≥sito pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('VizzionPayService: Verificar controle de primeiro dep√≥sito');
      }
      this.results.totalChecks++;
      
      // Verificar se processa comiss√£o de afiliado
      if (content.includes('processAffiliateCommission')) {
        console.log('   ‚úÖ Processamento de comiss√£o de afiliado implementado');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Processamento de comiss√£o pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('VizzionPayService: Verificar processamento de comiss√£o');
      }
      this.results.totalChecks++;
    }
  }

  async checkErrorHandling() {
    console.log('\nüìã VERIFICA√á√ÉO 3: TRATAMENTO DE ERROS');
    console.log('-'.repeat(50));
    
    const files = [
      'src/services/vizzionPayService.js',
      'src/controllers/paymentController.js',
      'src/services/walletService.js'
    ];
    
    for (const file of files) {
      const filePath = path.join(__dirname, file);
      
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        const fileName = path.basename(file);
        
        console.log(`üß™ Analisando ${fileName}...`);
        
        // Verificar try-catch
        const tryCatchCount = (content.match(/try\s*{/g) || []).length;
        const catchCount = (content.match(/catch\s*\(/g) || []).length;
        
        if (tryCatchCount > 0 && catchCount > 0) {
          console.log(`   ‚úÖ Tratamento de erros implementado (${tryCatchCount} try-catch)`);
          this.results.passed++;
        } else {
          console.log(`   ‚ö†Ô∏è Tratamento de erros pode estar incompleto`);
          this.results.warnings++;
          this.results.issues.push(`${fileName}: Verificar tratamento de erros`);
        }
        this.results.totalChecks++;
        
        // Verificar logs de erro
        if (content.includes('console.error') || content.includes('console.log')) {
          console.log(`   ‚úÖ Logs implementados`);
          this.results.passed++;
        } else {
          console.log(`   ‚ö†Ô∏è Logs podem estar ausentes`);
          this.results.warnings++;
          this.results.issues.push(`${fileName}: Verificar implementa√ß√£o de logs`);
        }
        this.results.totalChecks++;
      }
    }
  }

  async checkValidations() {
    console.log('\nüìã VERIFICA√á√ÉO 4: VALIDA√á√ïES');
    console.log('-'.repeat(50));
    
    const paymentControllerPath = path.join(__dirname, 'src/controllers/paymentController.js');
    
    if (fs.existsSync(paymentControllerPath)) {
      const content = fs.readFileSync(paymentControllerPath, 'utf8');
      
      console.log('üß™ Analisando valida√ß√µes no PaymentController...');
      
      // Verificar valida√ß√£o de valor m√≠nimo
      if (content.includes('valorNumerico < 20.00')) {
        console.log('   ‚úÖ Valida√ß√£o de valor m√≠nimo (R$ 20) implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ùå Valida√ß√£o de valor m√≠nimo n√£o encontrada');
        this.results.failed++;
        this.results.issues.push('PaymentController: Valida√ß√£o de valor m√≠nimo ausente');
      }
      this.results.totalChecks++;
      
      // Verificar valida√ß√£o de valor m√°ximo
      if (content.includes('valorNumerico > 10000.00')) {
        console.log('   ‚úÖ Valida√ß√£o de valor m√°ximo (R$ 10.000) implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ùå Valida√ß√£o de valor m√°ximo n√£o encontrada');
        this.results.failed++;
        this.results.issues.push('PaymentController: Valida√ß√£o de valor m√°ximo ausente');
      }
      this.results.totalChecks++;
      
      // Verificar valida√ß√£o de usu√°rio
      if (content.includes('!userId') || content.includes('!amount')) {
        console.log('   ‚úÖ Valida√ß√£o de par√¢metros obrigat√≥rios implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Valida√ß√£o de par√¢metros pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('PaymentController: Verificar valida√ß√£o de par√¢metros');
      }
      this.results.totalChecks++;
      
      // Verificar bloqueio de contas demo
      if (content.includes('tipo_conta === \'afiliado_demo\'')) {
        console.log('   ‚úÖ Bloqueio de contas demo implementado');
        this.results.passed++;
      } else {
        console.log('   ‚ùå Bloqueio de contas demo n√£o encontrado');
        this.results.failed++;
        this.results.issues.push('PaymentController: Bloqueio de contas demo ausente');
      }
      this.results.totalChecks++;
    }
  }

  async checkAtomicTransactions() {
    console.log('\nüìã VERIFICA√á√ÉO 5: TRANSA√á√ïES AT√îMICAS');
    console.log('-'.repeat(50));
    
    const files = [
      'src/services/vizzionPayService.js',
      'src/services/walletService.js',
      'src/services/affiliateService.js'
    ];
    
    for (const file of files) {
      const filePath = path.join(__dirname, file);
      
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        const fileName = path.basename(file);
        
        console.log(`üß™ Analisando ${fileName}...`);
        
        // Verificar uso de transa√ß√µes
        if (content.includes('prisma.$transaction')) {
          console.log(`   ‚úÖ Transa√ß√µes at√¥micas implementadas`);
          this.results.passed++;
        } else {
          console.log(`   ‚ö†Ô∏è Transa√ß√µes at√¥micas podem estar ausentes`);
          this.results.warnings++;
          this.results.issues.push(`${fileName}: Verificar implementa√ß√£o de transa√ß√µes at√¥micas`);
        }
        this.results.totalChecks++;
        
        // Verificar atualiza√ß√£o de m√∫ltiplas tabelas
        const userUpdateCount = (content.match(/tx\.user\.update/g) || []).length;
        const walletUpdateCount = (content.match(/tx\.wallet\.update/g) || []).length;
        const transactionCreateCount = (content.match(/tx\.transaction\.create/g) || []).length;
        
        if (userUpdateCount > 0 && walletUpdateCount > 0) {
          console.log(`   ‚úÖ Sincroniza√ß√£o User + Wallet implementada`);
          this.results.passed++;
        } else if (userUpdateCount > 0 || walletUpdateCount > 0) {
          console.log(`   ‚ö†Ô∏è Sincroniza√ß√£o pode estar incompleta`);
          this.results.warnings++;
          this.results.issues.push(`${fileName}: Verificar sincroniza√ß√£o User/Wallet`);
        }
        this.results.totalChecks++;
      }
    }
  }

  async checkLoggingAndAudit() {
    console.log('\nüìã VERIFICA√á√ÉO 6: LOGS E AUDITORIA');
    console.log('-'.repeat(50));
    
    const vizzionPath = path.join(__dirname, 'src/services/vizzionPayService.js');
    
    if (fs.existsSync(vizzionPath)) {
      const content = fs.readFileSync(vizzionPath, 'utf8');
      
      console.log('üß™ Analisando logs e auditoria...');
      
      // Verificar logs de processamento
      if (content.includes('console.log') && content.includes('Dep√≥sito VizzionPay processado')) {
        console.log('   ‚úÖ Logs de processamento implementados');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Logs de processamento podem estar ausentes');
        this.results.warnings++;
        this.results.issues.push('VizzionPayService: Verificar logs de processamento');
      }
      this.results.totalChecks++;
      
      // Verificar auditoria de transa√ß√µes
      if (content.includes('tx.transaction.create')) {
        console.log('   ‚úÖ Cria√ß√£o de transa√ß√µes para auditoria implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ùå Auditoria de transa√ß√µes n√£o encontrada');
        this.results.failed++;
        this.results.issues.push('VizzionPayService: Auditoria de transa√ß√µes ausente');
      }
      this.results.totalChecks++;
      
      // Verificar logs de erro
      if (content.includes('console.error')) {
        console.log('   ‚úÖ Logs de erro implementados');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Logs de erro podem estar ausentes');
        this.results.warnings++;
        this.results.issues.push('VizzionPayService: Verificar logs de erro');
      }
      this.results.totalChecks++;
    }
  }

  async checkSecurity() {
    console.log('\nüìã VERIFICA√á√ÉO 7: SEGURAN√áA');
    console.log('-'.repeat(50));
    
    const paymentControllerPath = path.join(__dirname, 'src/controllers/paymentController.js');
    
    if (fs.existsSync(paymentControllerPath)) {
      const content = fs.readFileSync(paymentControllerPath, 'utf8');
      
      console.log('üß™ Analisando aspectos de seguran√ßa...');
      
      // Verificar valida√ß√£o de assinatura de webhook
      if (content.includes('signature') || content.includes('validateWebhookSignature')) {
        console.log('   ‚úÖ Valida√ß√£o de assinatura de webhook implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Valida√ß√£o de assinatura pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('PaymentController: Verificar valida√ß√£o de assinatura de webhook');
      }
      this.results.totalChecks++;
      
      // Verificar sanitiza√ß√£o de dados
      if (content.includes('Number(') && content.includes('parseFloat')) {
        console.log('   ‚úÖ Sanitiza√ß√£o de valores num√©ricos implementada');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Sanitiza√ß√£o pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('PaymentController: Verificar sanitiza√ß√£o de dados');
      }
      this.results.totalChecks++;
      
      // Verificar timeout nas requisi√ß√µes
      if (content.includes('timeout')) {
        console.log('   ‚úÖ Timeout em requisi√ß√µes implementado');
        this.results.passed++;
      } else {
        console.log('   ‚ö†Ô∏è Timeout pode estar ausente');
        this.results.warnings++;
        this.results.issues.push('PaymentController: Verificar timeout em requisi√ß√µes');
      }
      this.results.totalChecks++;
    }
  }

  generateReport() {
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO FINAL DA AUDITORIA DE C√ìDIGO');
    console.log('='.repeat(80));
    
    const successRate = ((this.results.passed / this.results.totalChecks) * 100).toFixed(1);
    
    console.log(`\nüìà ESTAT√çSTICAS:`);
    console.log(`   Total de verifica√ß√µes: ${this.results.totalChecks}`);
    console.log(`   Sucessos: ${this.results.passed}`);
    console.log(`   Falhas: ${this.results.failed}`);
    console.log(`   Avisos: ${this.results.warnings}`);
    console.log(`   Taxa de sucesso: ${successRate}%`);
    
    if (this.results.issues.length > 0) {
      console.log(`\nüìù QUEST√ïES IDENTIFICADAS:`);
      this.results.issues.forEach((issue, index) => {
        console.log(`   ${index + 1}. ${issue}`);
      });
    }
    
    console.log(`\nüéØ AN√ÅLISE DO SISTEMA DE DEP√ìSITO:`);
    
    // An√°lise espec√≠fica baseada nos resultados
    const criticalIssues = this.results.failed;
    const warnings = this.results.warnings;
    
    if (criticalIssues === 0 && warnings <= 2) {
      console.log(`   ‚úÖ C√ìDIGO DO SISTEMA DE DEP√ìSITO EST√Å BEM ESTRUTURADO!`);
      console.log(`   üí∞ O sistema tem todas as valida√ß√µes e controles necess√°rios.`);
      console.log(`   üîí Os valores ser√£o creditados corretamente no saldo das contas.`);
    } else if (criticalIssues <= 2 && warnings <= 5) {
      console.log(`   ‚ö†Ô∏è C√ìDIGO FUNCIONANDO COM PEQUENAS MELHORIAS NECESS√ÅRIAS`);
      console.log(`   üîß Recomenda-se corrigir os problemas identificados.`);
      console.log(`   üí∞ O sistema deve funcionar, mas com aten√ß√£o aos pontos cr√≠ticos.`);
    } else {
      console.log(`   ‚ùå C√ìDIGO COM PROBLEMAS QUE PRECISAM SER CORRIGIDOS`);
      console.log(`   üö® NECESS√ÅRIO CORRE√á√ÉO ANTES DE USAR EM PRODU√á√ÉO!`);
      console.log(`   üí∏ Podem haver problemas no cr√©dito de saldo.`);
    }
    
    console.log(`\nüîç PONTOS PRINCIPAIS VERIFICADOS:`);
    console.log(`   ‚Ä¢ Fluxo de pagamento VizzionPay`);
    console.log(`   ‚Ä¢ Diferencia√ß√£o por tipo de conta (normal vs demo)`);
    console.log(`   ‚Ä¢ Valida√ß√µes de valor m√≠nimo/m√°ximo`);
    console.log(`   ‚Ä¢ Transa√ß√µes at√¥micas para consist√™ncia`);
    console.log(`   ‚Ä¢ Logs e auditoria de transa√ß√µes`);
    console.log(`   ‚Ä¢ Tratamento de erros`);
    console.log(`   ‚Ä¢ Seguran√ßa (assinatura, sanitiza√ß√£o, timeout)`);
    
    console.log('\n' + '='.repeat(80));
  }
}

// Executar auditoria
async function main() {
  const audit = new DepositCodeAudit();
  await audit.runAudit();
  
  console.log('\nüèÅ Auditoria de c√≥digo conclu√≠da!');
}

main().catch(error => {
  console.error('üí• Erro fatal na auditoria:', error);
  process.exit(1);
});

