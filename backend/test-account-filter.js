const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAccountFilter() {
  try {
    console.log('üß™ Testando sistema de filtro por tipo de conta...\n');

    // 1. Buscar uma caixa para teste
    const testCase = await prisma.case.findFirst({
      where: { ativo: true },
      include: { 
        prizes: { 
          where: { ativo: true },
          orderBy: { valor: 'asc' }
        } 
      }
    });

    if (!testCase) {
      console.log('‚ùå Nenhuma caixa ativa encontrada para teste');
      return;
    }

    console.log(`üì¶ Caixa de teste: ${testCase.nome}`);
    console.log(`üí∞ Pre√ßo: R$ ${testCase.preco}`);
    console.log(`üéÅ Total de pr√™mios: ${testCase.prizes.length}\n`);

    // 2. Mostrar todos os pr√™mios dispon√≠veis
    console.log('üéØ PR√äMIOS DISPON√çVEIS NA CAIXA:');
    testCase.prizes.forEach((prize, index) => {
      console.log(`   ${index + 1}. ${prize.nome} - R$ ${prize.valor} (${prize.probabilidade * 100}%)`);
    });
    console.log('');

    // 3. Simular filtro para conta normal
    console.log('üîí FILTRO PARA CONTA NORMAL (at√© R$ 10,00):');
    const normalPrizes = testCase.prizes.filter(prize => parseFloat(prize.valor) <= 10.00);
    console.log(`   Pr√™mios dispon√≠veis: ${normalPrizes.length}`);
    normalPrizes.forEach((prize, index) => {
      console.log(`   ${index + 1}. ${prize.nome} - R$ ${prize.valor}`);
    });
    console.log('');

    // 4. Simular filtro para conta demo
    console.log('üéØ FILTRO PARA CONTA DEMO (R$ 50,00+):');
    const demoPrizes = testCase.prizes.filter(prize => parseFloat(prize.valor) >= 50.00);
    console.log(`   Pr√™mios dispon√≠veis: ${demoPrizes.length}`);
    if (demoPrizes.length > 0) {
      demoPrizes.forEach((prize, index) => {
        console.log(`   ${index + 1}. ${prize.nome} - R$ ${prize.valor}`);
      });
    } else {
      console.log('   ‚ö†Ô∏è Nenhum pr√™mio alto encontrado, usando todos os pr√™mios');
    }
    console.log('');

    // 5. Buscar usu√°rios de teste
    const normalUser = await prisma.user.findFirst({
      where: { 
        tipo_conta: 'normal',
        ativo: true 
      }
    });

    const demoUser = await prisma.user.findFirst({
      where: { 
        tipo_conta: 'afiliado_demo',
        ativo: true 
      }
    });

    console.log('üë• USU√ÅRIOS DE TESTE:');
    if (normalUser) {
      console.log(`   ‚úÖ Usu√°rio Normal: ${normalUser.nome} (${normalUser.email})`);
    } else {
      console.log('   ‚ùå Nenhum usu√°rio normal encontrado');
    }

    if (demoUser) {
      console.log(`   ‚úÖ Usu√°rio Demo: ${demoUser.nome} (${demoUser.email})`);
    } else {
      console.log('   ‚ùå Nenhum usu√°rio demo encontrado');
    }
    console.log('');

    // 6. Estat√≠sticas dos pr√™mios
    const allPrizes = testCase.prizes.map(p => parseFloat(p.valor));
    const maxPrize = Math.max(...allPrizes);
    const minPrize = Math.min(...allPrizes);
    const avgPrize = allPrizes.reduce((sum, val) => sum + val, 0) / allPrizes.length;

    console.log('üìä ESTAT√çSTICAS DOS PR√äMIOS:');
    console.log(`   üí∞ Pr√™mio m√°ximo: R$ ${maxPrize.toFixed(2)}`);
    console.log(`   üí∞ Pr√™mio m√≠nimo: R$ ${minPrize.toFixed(2)}`);
    console.log(`   üí∞ Pr√™mio m√©dio: R$ ${avgPrize.toFixed(2)}`);
    console.log(`   üéØ Pr√™mios at√© R$ 10,00: ${normalPrizes.length}`);
    console.log(`   üéØ Pr√™mios R$ 50,00+: ${demoPrizes.length}`);
    console.log('');

    // 7. Verificar se o sistema est√° configurado corretamente
    console.log('‚úÖ VERIFICA√á√ÉO DO SISTEMA:');
    console.log(`   üîí Contas normais podem ganhar at√©: R$ 10,00`);
    console.log(`   üéØ Contas demo podem ganhar a partir de: R$ 50,00`);
    console.log(`   üì± Modal da esteira: Mostra todos os pr√™mios (sem filtro)`);
    console.log(`   üé≤ Sorteio real: Filtrado por tipo de conta`);
    console.log('');

    if (normalPrizes.length > 0 && (demoPrizes.length > 0 || testCase.prizes.length > 0)) {
      console.log('üéâ SISTEMA CONFIGURADO CORRETAMENTE!');
      console.log('   ‚úÖ Contas normais t√™m pr√™mios dispon√≠veis');
      console.log('   ‚úÖ Contas demo t√™m pr√™mios dispon√≠veis');
    } else {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Verifique a configura√ß√£o dos pr√™mios');
      if (normalPrizes.length === 0) {
        console.log('   ‚ùå Contas normais n√£o t√™m pr√™mios dispon√≠veis');
      }
      if (demoPrizes.length === 0 && testCase.prizes.length === 0) {
        console.log('   ‚ùå Contas demo n√£o t√™m pr√™mios dispon√≠veis');
      }
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  testAccountFilter()
    .then(() => {
      console.log('\n‚úÖ Teste conclu√≠do!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro no teste:', error);
      process.exit(1);
    });
}

module.exports = testAccountFilter;
