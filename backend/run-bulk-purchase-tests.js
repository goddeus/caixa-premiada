const { runBulkPurchaseTests } = require('./test-bulk-purchase');
const { runConcurrencyTests } = require('./test-concurrency-bulk-purchase');
const { verifyBulkPurchases } = require('./verify-bulk-purchases');

/**
 * Script Principal para Executar Todos os Testes de Compras M√∫ltiplas
 * 
 * Este script executa:
 * 1. Testes unit√°rios e de integra√ß√£o
 * 2. Testes de concorr√™ncia
 * 3. Verifica√ß√£o de auditoria das √∫ltimas compras
 */
async function runAllBulkPurchaseTests() {
  console.log('üöÄ EXECUTANDO TODOS OS TESTES DE COMPRAS M√öLTIPLAS');
  console.log('=' .repeat(80));
  console.log('Data/Hora:', new Date().toISOString());
  console.log('=' .repeat(80));

  const results = {
    unitTests: { passed: 0, failed: 0 },
    concurrencyTests: { passed: 0, failed: 0 },
    auditVerification: { discrepancies: 0, totalChecked: 0 }
  };

  try {
    // 1. TESTES UNIT√ÅRIOS E DE INTEGRA√á√ÉO
    console.log('\nüß™ EXECUTANDO TESTES UNIT√ÅRIOS E DE INTEGRA√á√ÉO');
    console.log('-'.repeat(50));
    
    try {
      const unitTestResults = await runBulkPurchaseTests();
      results.unitTests = unitTestResults;
      console.log(`‚úÖ Testes unit√°rios: ${unitTestResults.testsPassed} passaram, ${unitTestResults.testsFailed} falharam`);
    } catch (error) {
      console.error('‚ùå Erro nos testes unit√°rios:', error.message);
      results.unitTests.failed++;
    }

    // 2. TESTES DE CONCORR√äNCIA
    console.log('\nüèÉ‚Äç‚ôÇÔ∏è EXECUTANDO TESTES DE CONCORR√äNCIA');
    console.log('-'.repeat(50));
    
    try {
      const concurrencyTestResults = await runConcurrencyTests();
      results.concurrencyTests = concurrencyTestResults;
      console.log(`‚úÖ Testes de concorr√™ncia: ${concurrencyTestResults.totalTestsPassed} passaram, ${concurrencyTestResults.totalTestsFailed} falharam`);
    } catch (error) {
      console.error('‚ùå Erro nos testes de concorr√™ncia:', error.message);
      results.concurrencyTests.totalTestsFailed++;
    }

    // 3. VERIFICA√á√ÉO DE AUDITORIA
    console.log('\nüîç EXECUTANDO VERIFICA√á√ÉO DE AUDITORIA');
    console.log('-'.repeat(50));
    
    try {
      await verifyBulkPurchases();
      console.log('‚úÖ Verifica√ß√£o de auditoria conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro na verifica√ß√£o de auditoria:', error.message);
    }

  } catch (error) {
    console.error('‚ùå ERRO FATAL:', error);
  }

  // RELAT√ìRIO FINAL
  console.log('\nüìä RELAT√ìRIO FINAL COMPLETO');
  console.log('=' .repeat(80));
  console.log('Data/Hora:', new Date().toISOString());
  console.log('=' .repeat(80));

  console.log('\nüß™ TESTES UNIT√ÅRIOS E DE INTEGRA√á√ÉO:');
  console.log(`  ‚úÖ Passaram: ${results.unitTests.passed}`);
  console.log(`  ‚ùå Falharam: ${results.unitTests.failed}`);
  console.log(`  üìà Taxa de sucesso: ${((results.unitTests.passed / (results.unitTests.passed + results.unitTests.failed)) * 100).toFixed(1)}%`);

  console.log('\nüèÉ‚Äç‚ôÇÔ∏è TESTES DE CONCORR√äNCIA:');
  console.log(`  ‚úÖ Passaram: ${results.concurrencyTests.passed}`);
  console.log(`  ‚ùå Falharam: ${results.concurrencyTests.failed}`);
  console.log(`  üìà Taxa de sucesso: ${((results.concurrencyTests.passed / (results.concurrencyTests.passed + results.concurrencyTests.failed)) * 100).toFixed(1)}%`);

  console.log('\nüîç VERIFICA√á√ÉO DE AUDITORIA:');
  console.log(`  üìä Total verificado: ${results.auditVerification.totalChecked}`);
  console.log(`  ‚ö†Ô∏è Discrep√¢ncias: ${results.auditVerification.discrepancies}`);

  const totalTests = results.unitTests.passed + results.unitTests.failed + results.concurrencyTests.passed + results.concurrencyTests.failed;
  const totalPassed = results.unitTests.passed + results.concurrencyTests.passed;
  const totalFailed = results.unitTests.failed + results.concurrencyTests.failed;

  console.log('\nüéØ RESUMO GERAL:');
  console.log(`  üìä Total de testes: ${totalTests}`);
  console.log(`  ‚úÖ Total passaram: ${totalPassed}`);
  console.log(`  ‚ùå Total falharam: ${totalFailed}`);
  console.log(`  üìà Taxa de sucesso geral: ${((totalPassed / totalTests) * 100).toFixed(1)}%`);

  if (totalFailed === 0) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('‚úÖ Sistema de compras m√∫ltiplas est√° funcionando perfeitamente');
    console.log('‚úÖ Transa√ß√µes at√¥micas implementadas');
    console.log('‚úÖ Race conditions prevenidas');
    console.log('‚úÖ Contas demo isoladas corretamente');
    console.log('‚úÖ Auditoria completa funcionando');
  } else {
    console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM!');
    console.log('‚ùå Verifique os logs acima para identificar os problemas');
    console.log('‚ùå Corrija os problemas antes de colocar em produ√ß√£o');
  }

  console.log('\nüìã PR√ìXIMOS PASSOS:');
  console.log('1. Se todos os testes passaram, o sistema est√° pronto para produ√ß√£o');
  console.log('2. Se h√° falhas, corrija os problemas identificados');
  console.log('3. Execute novamente os testes ap√≥s as corre√ß√µes');
  console.log('4. Monitore as compras m√∫ltiplas em produ√ß√£o');
  console.log('5. Execute verifica√ß√µes de auditoria regularmente');

  console.log('\nüîó ENDPOINTS DISPON√çVEIS:');
  console.log('  POST /purchase/bulk - Processar compra m√∫ltipla');
  console.log('  GET /purchase/audit/:purchaseId - Obter auditoria de compra');
  console.log('  GET /purchase/audit - Listar auditorias com filtros');
  console.log('  GET /purchase/audit-report - Gerar relat√≥rio de auditoria');
  console.log('  POST /purchase/verify-discrepancies - Verificar discrep√¢ncias');

  console.log('\nüìÅ ARQUIVOS DE LOG GERADOS:');
  console.log('  logs/bulk_purchase_verification_YYYY-MM-DD.csv');
  console.log('  logs/bulk_purchase_verification_YYYY-MM-DD.json');

  return {
    success: totalFailed === 0,
    totalTests,
    totalPassed,
    totalFailed,
    results
  };
}

// Executar todos os testes se chamado diretamente
if (require.main === module) {
  runAllBulkPurchaseTests()
    .then(({ success, totalTests, totalPassed, totalFailed }) => {
      console.log(`\nüèÅ Execu√ß√£o conclu√≠da: ${totalPassed}/${totalTests} testes passaram`);
      process.exit(success ? 0 : 1);
    })
    .catch((error) => {
      console.error('‚ùå Erro fatal na execu√ß√£o dos testes:', error);
      process.exit(1);
    });
}

module.exports = { runAllBulkPurchaseTests };

