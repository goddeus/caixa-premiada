const fs = require('fs');
const path = require('path');

/**
 * SCRIPT DE ATIVA√á√ÉO DO SISTEMA MANIPULATIVO
 * 
 * Este script ativa o sistema manipulativo e remove
 * completamente o sistema RTP antigo.
 */

console.log('üß† Ativando Sistema Manipulativo...\n');

try {
  // 1. Verificar se os arquivos do sistema manipulativo existem
  console.log('1. üîç Verificando arquivos do sistema manipulativo...');
  
  const requiredFiles = [
    'src/services/addictiveRTPService.js',
    'src/services/manipulativeDrawService.js',
    'src/controllers/manipulativeCompraController.js',
    'src/routes/manipulativeRoutes.js'
  ];
  
  let allFilesExist = true;
  requiredFiles.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      console.log(`   ‚úÖ ${file}`);
    } else {
      console.log(`   ‚ùå ${file} - ARQUIVO N√ÉO ENCONTRADO!`);
      allFilesExist = false;
    }
  });
  
  if (!allFilesExist) {
    console.log('\n‚ùå ERRO: Nem todos os arquivos do sistema manipulativo foram encontrados!');
    console.log('   Execute primeiro: node integrate-manipulative-system.js');
    process.exit(1);
  }
  
  console.log('‚úÖ Todos os arquivos do sistema manipulativo encontrados\n');
  
  // 2. Atualizar server.js para incluir rotas manipulativas
  console.log('2. üìù Atualizando server.js...');
  
  const serverPath = path.join(__dirname, 'src', 'server.js');
  let serverContent = fs.readFileSync(serverPath, 'utf8');
  
  // Verificar se j√° existe a importa√ß√£o das rotas manipulativas
  if (!serverContent.includes('manipulativeRoutes')) {
    // Adicionar importa√ß√£o das rotas manipulativas
    const importLine = "const manipulativeRoutes = require('./routes/manipulativeRoutes');";
    const routesImportIndex = serverContent.indexOf("const routes = require('./routes');");
    
    if (routesImportIndex !== -1) {
      serverContent = serverContent.slice(0, routesImportIndex) + 
                     importLine + '\n' + 
                     serverContent.slice(routesImportIndex);
    }
    
    // Adicionar uso das rotas manipulativas
    const appUseIndex = serverContent.indexOf("app.use('/api', routes);");
    if (appUseIndex !== -1) {
      const manipulativeRouteLine = "app.use('/api/manipulative', manipulativeRoutes);";
      serverContent = serverContent.slice(0, appUseIndex) + 
                     manipulativeRouteLine + '\n' + 
                     serverContent.slice(appUseIndex);
    }
    
    fs.writeFileSync(serverPath, serverContent);
    console.log('‚úÖ Rotas manipulativas adicionadas ao server.js');
  } else {
    console.log('‚ö†Ô∏è Rotas manipulativas j√° existem no server.js');
  }
  
  // 3. Verificar se o sistema RTP antigo foi removido
  console.log('\n3. üóëÔ∏è Verificando remo√ß√£o do sistema RTP antigo...');
  
  const oldFiles = [
    'src/services/userRTPService.js',
    'src/services/rtpService.js',
    'src/services/globalDrawService.js',
    'src/services/centralizedDrawService.js',
    'src/services/prizeCalculationService.js',
    'src/services/illustrativePrizeService.js',
    'src/services/prizeValidationService.js'
  ];
  
  let oldFilesRemoved = true;
  oldFiles.forEach(file => {
    const filePath = path.join(__dirname, file);
    if (fs.existsSync(filePath)) {
      console.log(`   ‚ö†Ô∏è ${file} - AINDA EXISTE (deve ser removido)`);
      oldFilesRemoved = false;
    } else {
      console.log(`   ‚úÖ ${file} - Removido`);
    }
  });
  
  if (oldFilesRemoved) {
    console.log('‚úÖ Sistema RTP antigo completamente removido');
  } else {
    console.log('‚ö†Ô∏è Alguns arquivos do sistema RTP antigo ainda existem');
  }
  
  // 4. Criar script de teste
  console.log('\n4. üß™ Criando script de teste...');
  
  const testScript = `#!/bin/bash

echo "üß† Testando Sistema Manipulativo..."

# Testar sistema manipulativo
node test-manipulative-with-cash-check.js

echo "‚úÖ Teste do sistema manipulativo conclu√≠do!"`;
  
  fs.writeFileSync(path.join(__dirname, 'test-manipulative.sh'), testScript);
  console.log('‚úÖ Script de teste criado: test-manipulative.sh');
  
  // 5. Criar documenta√ß√£o final
  console.log('\n5. üìö Criando documenta√ß√£o final...');
  
  const finalDoc = `# SISTEMA MANIPULATIVO - ATIVADO

## üß† Status: ATIVO

O sistema manipulativo est√° agora ativo e funcionando. O sistema RTP antigo foi completamente removido.

## üéØ Caracter√≠sticas Ativas

### ‚úÖ Sistema RTP Din√¢mico
- RTP baseado no comportamento do usu√°rio
- Estrat√©gias psicol√≥gicas avan√ßadas
- Verifica√ß√£o de caixa total implementada

### ‚úÖ Estrat√©gias Psicol√≥gicas
- **Honeymoon:** Novos usu√°rios (RTP 45%)
- **Extraction:** Persegui√ß√£o de perdas (RTP 8%)
- **Retention:** Prestes a desistir (RTP 60%)
- **Maintenance:** Usu√°rios frequentes (RTP 20%)

### ‚úÖ Verifica√ß√£o de Caixa Total
- Pr√™mios limitados pelo caixa total da plataforma
- Honeymoon: m√°ximo 1% do caixa ou R$ 50
- Extraction: m√°ximo 0.1% do caixa ou R$ 1
- Retention: m√°ximo 2% do caixa ou R$ 100
- Maintenance: m√°ximo 0.5% do caixa ou R$ 5

### ‚úÖ T√©cnicas Psicol√≥gicas
- Near Miss (quase vit√≥rias)
- Loss Chasing (persegui√ß√£o de perdas)
- Sunk Cost Fallacy (fal√°cia do custo afundado)
- Variable Ratio Reinforcement
- Hot/Cold Streak Detection

## üîó Endpoints Ativos

- \`POST /api/cases/:id/buy\` - Compra manipulativa
- \`POST /api/cases/:id/buy-multiple\` - Compra m√∫ltipla manipulativa
- \`GET /api/manipulative/user/stats\` - Estat√≠sticas comportamentais

## üß™ Testes

Execute: \`node test-manipulative-with-cash-check.js\`

## ‚ö†Ô∏è Avisos

1. **Legalidade:** Verifique as leis locais sobre jogos de azar
2. **√âtica:** Este sistema √© altamente manipulativo
3. **Responsabilidade:** Use com cuidado
4. **Transpar√™ncia:** Considere informar usu√°rios

## üéØ Objetivo

Maximizar reten√ß√£o e lucros atrav√©s de t√©cnicas psicol√≥gicas avan√ßadas, sempre respeitando o limite do caixa total da plataforma.

---
**Sistema ativado em:** ${new Date().toISOString()}
**Vers√£o:** 1.0.0
**Status:** OPERACIONAL
`;
  
  fs.writeFileSync(path.join(__dirname, 'MANIPULATIVE_SYSTEM_ACTIVE.md'), finalDoc);
  console.log('‚úÖ Documenta√ß√£o final criada: MANIPULATIVE_SYSTEM_ACTIVE.md');
  
  // 6. Resumo final
  console.log('\nüéØ SISTEMA MANIPULATIVO ATIVADO COM SUCESSO!');
  console.log('\nüìã Resumo da ativa√ß√£o:');
  console.log('‚úÖ Sistema manipulativo implementado');
  console.log('‚úÖ Verifica√ß√£o de caixa total ativa');
  console.log('‚úÖ Sistema RTP antigo removido');
  console.log('‚úÖ Rotas manipulativas configuradas');
  console.log('‚úÖ Scripts de teste criados');
  console.log('‚úÖ Documenta√ß√£o atualizada');
  
  console.log('\nüîó Endpoints dispon√≠veis:');
  console.log('   - POST /api/cases/:id/buy (sistema manipulativo)');
  console.log('   - POST /api/cases/:id/buy-multiple (sistema manipulativo)');
  console.log('   - GET /api/manipulative/user/stats (estat√≠sticas)');
  
  console.log('\nüß™ Para testar:');
  console.log('   node test-manipulative-with-cash-check.js');
  
  console.log('\n‚ö†Ô∏è IMPORTANTE:');
  console.log('   - Sistema altamente manipulativo e viciante');
  console.log('   - Pr√™mios limitados pelo caixa total');
  console.log('   - Use com responsabilidade');
  console.log('   - Verifique leis locais');
  
  console.log('\nüß† O sistema est√° pronto para maximizar reten√ß√£o e lucros!');
  
} catch (error) {
  console.error('‚ùå Erro na ativa√ß√£o:', error.message);
  process.exit(1);
}
