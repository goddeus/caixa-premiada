const { PrismaClient } = require('@prisma/client');
const bulkPurchaseService = require('./src/services/bulkPurchaseServiceOptimized');

const prisma = new PrismaClient();

/**
 * Teste da Vers√£o Otimizada de Compras M√∫ltiplas
 */
async function testOptimizedBulkPurchase() {
  console.log('üöÄ TESTE DA VERS√ÉO OTIMIZADA DE COMPRAS M√öLTIPLAS');
  console.log('=' .repeat(60));

  let testUser = null;
  let demoUser = null;
  let testsPassed = 0;
  let testsFailed = 0;

  try {
    // 1. Criar usu√°rio de teste
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de teste...');
    testUser = await prisma.user.create({
      data: {
        nome: 'Teste Otimizado',
        email: `teste.otimizado.${Date.now()}@example.com`,
        senha_hash: 'hash_teste',
        cpf: `${Date.now()}`,
        saldo: 100.00,
        tipo_conta: 'normal'
      }
    });
    console.log(`‚úÖ Usu√°rio criado: ${testUser.id}`);

    // 2. Criar usu√°rio demo
    console.log('\n2Ô∏è‚É£ Criando usu√°rio demo...');
    demoUser = await prisma.user.create({
      data: {
        nome: 'Teste Demo Otimizado',
        email: `demo.otimizado.${Date.now()}@example.com`,
        senha_hash: 'hash_teste',
        cpf: `${Date.now() + 1}`,
        saldo: 0.00,
        saldo_demo: 100.00,
        tipo_conta: 'afiliado_demo'
      }
    });
    console.log(`‚úÖ Usu√°rio demo criado: ${demoUser.id}`);

    // 3. Buscar caixas dispon√≠veis
    console.log('\n3Ô∏è‚É£ Buscando caixas dispon√≠veis...');
    const cases = await prisma.case.findMany({
      where: { ativo: true },
      take: 2
    });

    if (cases.length < 2) {
      throw new Error('Necess√°rio pelo menos 2 caixas ativas para teste');
    }

    console.log(`‚úÖ Encontradas ${cases.length} caixas para teste`);

    // 4. Teste: Compra m√∫ltipla b√°sica (usu√°rio normal)
    console.log('\n4Ô∏è‚É£ Testando compra m√∫ltipla b√°sica...');
    const caixaItems = [
      { caixaId: cases[0].id, quantidade: 2 },
      { caixaId: cases[1].id, quantidade: 1 }
    ];

    const result1 = await bulkPurchaseService.processBulkPurchase(
      testUser.id,
      null,
      caixaItems
    );

    if (result1.success) {
      console.log('‚úÖ Compra m√∫ltipla b√°sica bem-sucedida');
      console.log(`   Total debitado: R$ ${result1.totalDebitado.toFixed(2)}`);
      console.log(`   Pr√™mios: R$ ${result1.somaPremios.toFixed(2)}`);
      console.log(`   Saldo final: R$ ${result1.saldoFinal.toFixed(2)}`);
      testsPassed++;
    } else {
      console.log('‚ùå Compra m√∫ltipla b√°sica falhou:', result1.error);
      testsFailed++;
    }

    // 5. Teste: Compra m√∫ltipla com conta demo
    console.log('\n5Ô∏è‚É£ Testando compra m√∫ltipla com conta demo...');
    const result2 = await bulkPurchaseService.processBulkPurchase(
      demoUser.id,
      null,
      caixaItems
    );

    if (result2.success && result2.isDemoAccount) {
      console.log('‚úÖ Compra m√∫ltipla demo bem-sucedida');
      console.log(`   Total debitado: R$ ${result2.totalDebitado.toFixed(2)}`);
      console.log(`   Pr√™mios: R$ ${result2.somaPremios.toFixed(2)}`);
      console.log(`   Saldo final: R$ ${result2.saldoFinal.toFixed(2)}`);
      testsPassed++;
    } else {
      console.log('‚ùå Compra m√∫ltipla demo falhou:', result2.error);
      testsFailed++;
    }

    // 6. Teste: Verificar transa√ß√µes
    console.log('\n6Ô∏è‚É£ Verificando transa√ß√µes...');
    const transactions = await prisma.transaction.findMany({
      where: {
        user_id: testUser.id,
        tipo: {
          in: ['abertura_caixa_multipla', 'premio', 'premio_visual']
        }
      },
      orderBy: { criado_em: 'desc' }
    });

    if (transactions.length > 0) {
      console.log(`‚úÖ ${transactions.length} transa√ß√µes registradas`);
      testsPassed++;
    } else {
      console.log('‚ùå Nenhuma transa√ß√£o registrada');
      testsFailed++;
    }

    // 7. Teste: Verificar auditoria
    console.log('\n7Ô∏è‚É£ Verificando auditoria...');
    const audits = await prisma.purchaseAudit.findMany({
      where: {
        user_id: testUser.id
      },
      orderBy: { criado_em: 'desc' }
    });

    if (audits.length > 0) {
      console.log(`‚úÖ ${audits.length} compras registradas na auditoria`);
      testsPassed++;
    } else {
      console.log('‚ùå Nenhuma compra registrada na auditoria');
      testsFailed++;
    }

    // 8. Teste: Verificar consist√™ncia de saldo
    console.log('\n8Ô∏è‚É£ Verificando consist√™ncia de saldo...');
    const updatedUser = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: { saldo: true }
    });

    if (result1.success) {
      const expectedBalance = 100.00 - result1.totalDebitado + result1.somaPremios;
      if (Math.abs(updatedUser.saldo - expectedBalance) < 0.01) {
        console.log('‚úÖ Consist√™ncia de saldo verificada');
        testsPassed++;
      } else {
        console.log(`‚ùå Inconsist√™ncia de saldo: esperado ${expectedBalance}, atual ${updatedUser.saldo}`);
        testsFailed++;
      }
    } else {
      console.log('‚ö†Ô∏è Pulando verifica√ß√£o de saldo - compra falhou');
      testsFailed++;
    }

    // 9. Teste: Verificar conta demo n√£o afetou saldo real
    console.log('\n9Ô∏è‚É£ Verificando isolamento de conta demo...');
    const updatedDemoUser = await prisma.user.findUnique({
      where: { id: demoUser.id },
      select: { saldo: true, saldo_demo: true }
    });

    if (result2.success) {
      const expectedDemoBalance = 100.00 - result2.totalDebitado + result2.somaPremios;
      if (updatedDemoUser.saldo === 0.00 && Math.abs(updatedDemoUser.saldo_demo - expectedDemoBalance) < 0.01) {
        console.log('‚úÖ Conta demo isolada corretamente');
        testsPassed++;
      } else {
        console.log(`‚ùå Conta demo: saldo real ${updatedDemoUser.saldo}, saldo_demo ${updatedDemoUser.saldo_demo}, esperado ${expectedDemoBalance}`);
        testsFailed++;
      }
    } else {
      console.log('‚ö†Ô∏è Pulando verifica√ß√£o de conta demo - compra falhou');
      testsFailed++;
    }

  } catch (error) {
    console.error('‚ùå ERRO NOS TESTES:', error);
    testsFailed++;
  } finally {
    // Limpeza
    console.log('\nüßπ Limpando dados de teste...');
    try {
      if (testUser) {
        await prisma.transaction.deleteMany({
          where: { user_id: testUser.id }
        });

        await prisma.purchaseAudit.deleteMany({
          where: { user_id: testUser.id }
        });

        await prisma.userSession.deleteMany({
          where: { user_id: testUser.id }
        });

        await prisma.user.delete({
          where: { id: testUser.id }
        });
      }

      if (demoUser) {
        await prisma.transaction.deleteMany({
          where: { user_id: demoUser.id }
        });

        await prisma.purchaseAudit.deleteMany({
          where: { user_id: demoUser.id }
        });

        await prisma.userSession.deleteMany({
          where: { user_id: demoUser.id }
        });

        await prisma.user.delete({
          where: { id: demoUser.id }
        });
      }

      console.log('‚úÖ Dados de teste removidos');
    } catch (cleanupError) {
      console.error('‚ö†Ô∏è Erro na limpeza:', cleanupError.message);
    }

    await prisma.$disconnect();
  }

  // Relat√≥rio final
  console.log('\nüìä RELAT√ìRIO FINAL DOS TESTES OTIMIZADOS');
  console.log('=' .repeat(60));
  console.log(`‚úÖ Testes passaram: ${testsPassed}`);
  console.log(`‚ùå Testes falharam: ${testsFailed}`);
  console.log(`üìà Taxa de sucesso: ${((testsPassed / (testsPassed + testsFailed)) * 100).toFixed(1)}%`);

  if (testsFailed === 0) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM! Vers√£o otimizada funcionando perfeitamente.');
  } else {
    console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique os logs acima para detalhes.');
  }

  return { testsPassed, testsFailed };
}

// Executar teste se chamado diretamente
if (require.main === module) {
  testOptimizedBulkPurchase()
    .then(({ testsPassed, testsFailed }) => {
      process.exit(testsFailed > 0 ? 1 : 0);
    })
    .catch((error) => {
      console.error('Erro fatal no teste otimizado:', error);
      process.exit(1);
    });
}

module.exports = { testOptimizedBulkPurchase };



