const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function sincronizarSaldos() {
  try {
    console.log('üîß SINCRONIZANDO SALDOS ENTRE USER E WALLET');
    console.log('==================================================');

    // 1. Buscar todos os usu√°rios
    const usuarios = await prisma.user.findMany({
      select: { 
        id: true, 
        nome: true, 
        email: true, 
        saldo: true 
      }
    });

    console.log(`üë• Total de usu√°rios: ${usuarios.length}\n`);

    let usuariosCorrigidos = 0;

    // 2. Verificar e corrigir cada usu√°rio
    for (const usuario of usuarios) {
      console.log(`üîç Verificando ${usuario.nome} (${usuario.email})...`);

      // Buscar wallet do usu√°rio
      const wallet = await prisma.wallet.findUnique({
        where: { user_id: usuario.id },
        select: { saldo: true }
      });

      const saldoUser = parseFloat(usuario.saldo);
      const saldoWallet = wallet ? parseFloat(wallet.saldo) : 0;
      const diferenca = Math.abs(saldoUser - saldoWallet);

      console.log(`   Saldo User: R$ ${saldoUser.toFixed(2)}`);
      console.log(`   Saldo Wallet: R$ ${saldoWallet.toFixed(2)}`);
      console.log(`   Diferen√ßa: R$ ${diferenca.toFixed(2)}`);

      if (diferenca > 0.01) {
        console.log(`   ‚ùå INCONSIST√äNCIA DETECTADA - Corrigindo...`);
        
        // Usar o saldo da tabela User como refer√™ncia (mais confi√°vel)
        if (wallet) {
          await prisma.wallet.update({
            where: { user_id: usuario.id },
            data: { saldo: saldoUser }
          });
          console.log(`   ‚úÖ Wallet atualizado para R$ ${saldoUser.toFixed(2)}`);
        } else {
          await prisma.wallet.create({
            data: { 
              user_id: usuario.id, 
              saldo: saldoUser 
            }
          });
          console.log(`   ‚úÖ Wallet criado com R$ ${saldoUser.toFixed(2)}`);
        }
        
        usuariosCorrigidos++;
      } else {
        console.log(`   ‚úÖ Saldos j√° est√£o sincronizados`);
      }
      console.log('');
    }

    // 3. Verificar se h√° wallets √≥rf√£os (sem usu√°rio)
    console.log('üîç VERIFICANDO WALLETS √ìRF√ÉOS:');
    console.log('-------------------------------');
    
    const wallets = await prisma.wallet.findMany({
      include: { user: true }
    });

    const walletsOrfaos = wallets.filter(w => !w.user);
    
    if (walletsOrfaos.length > 0) {
      console.log(`‚ùå ${walletsOrfaos.length} wallets √≥rf√£os encontrados`);
      for (const wallet of walletsOrfaos) {
        console.log(`   - Wallet ID: ${wallet.id}, User ID: ${wallet.user_id}`);
      }
    } else {
      console.log('‚úÖ Nenhum wallet √≥rf√£o encontrado');
    }

    // 4. Resumo final
    console.log('\nüìã RESUMO DA SINCRONIZA√á√ÉO:');
    console.log('============================');
    console.log(`üë• Usu√°rios verificados: ${usuarios.length}`);
    console.log(`üîß Usu√°rios corrigidos: ${usuariosCorrigidos}`);
    console.log(`üí∞ Wallets √≥rf√£os: ${walletsOrfaos.length}`);

    if (usuariosCorrigidos > 0) {
      console.log('\n‚úÖ SINCRONIZA√á√ÉO CONCLU√çDA!');
      console.log('üí° Todos os saldos foram sincronizados entre User e Wallet');
    } else {
      console.log('\n‚úÖ Nenhuma sincroniza√ß√£o necess√°ria');
    }

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

sincronizarSaldos();
