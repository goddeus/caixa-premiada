const { PrismaClient } = require('@prisma/client');
const axios = require('axios');

const prisma = new PrismaClient();

async function debugConsoleCase() {
  console.log('üîç DEBUG CONSOLE CASE - AN√ÅLISE COMPLETA');
  console.log('==================================================');
  
  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('üîç VERIFICANDO SERVIDOR...');
    try {
      await axios.get('http://localhost:3001/health');
      console.log('‚úÖ Servidor est√° rodando');
    } catch (error) {
      console.log('‚ùå Servidor n√£o est√° rodando');
      return;
    }

    // 2. Buscar caixa Console
    console.log('\nüì¶ CAIXA CONSOLE:');
    const consoleCase = await prisma.case.findFirst({
      where: { nome: { contains: 'CONSOLE' } }
    });
    
    if (!consoleCase) {
      console.log('‚ùå Caixa Console n√£o encontrada');
      return;
    }
    
    console.log(`   Nome: ${consoleCase.nome}`);
    console.log(`   Pre√ßo: R$ ${consoleCase.preco}`);
    console.log(`   ID: ${consoleCase.id}`);

    // 3. Buscar usu√°rio existente e dar saldo
    console.log('\nüë§ PREPARANDO USU√ÅRIO DE TESTE...');
    let testUser = await prisma.user.findFirst({
      where: { tipo_conta: 'normal' }
    });
    
    if (!testUser) {
      console.log('‚ùå Nenhum usu√°rio normal encontrado');
      return;
    }
    
    // Dar saldo para o usu√°rio
    testUser = await prisma.user.update({
      where: { id: testUser.id },
      data: { saldo: 100.00 }
    });
    
    console.log(`   Usu√°rio: ${testUser.nome}`);
    console.log(`   Saldo: R$ ${testUser.saldo}`);
    console.log(`   ID: ${testUser.id}`);
    
    // 4. Fazer login para obter token
    console.log('\nüîê FAZENDO LOGIN...');
    const loginResponse = await axios.post('http://localhost:3001/auth/login', {
      email: 'juniorcoxtaa@gmail.com',
      senha: '123456'
    });
    
    const token = loginResponse.data.token;
    console.log('‚úÖ Login realizado com sucesso');
    
    // 5. Fazer compra da caixa Console
    console.log('\nüõí COMPRANDO CAIXA CONSOLE...');
    try {
      const response = await axios.post(`http://localhost:3001/cases/buy/${consoleCase.id}`, {}, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('üì¶ RESPOSTA DA API:');
      console.log('   Success:', response.data.success);
      console.log('   Message:', response.data.message);
      console.log('   WonPrize:', response.data.wonPrize?.nome || 'Nenhum');
      console.log('   Prize Value:', response.data.wonPrize?.valor || 0);
      console.log('   UserBalance:', response.data.userBalance);
      
      // 6. Verificar saldo ap√≥s compra
      const updatedUser = await prisma.user.findUnique({
        where: { id: testUser.id },
        select: { saldo: true }
      });
      
      console.log('\nüí∞ AN√ÅLISE DO D√âBITO:');
      console.log(`   Saldo antes: R$ ${testUser.saldo}`);
      console.log(`   Saldo depois: R$ ${updatedUser.saldo}`);
      console.log(`   Valor debitado: R$ ${(testUser.saldo - updatedUser.saldo).toFixed(2)}`);
      console.log(`   Pre√ßo esperado: R$ ${consoleCase.preco}`);
      
      const expectedDebit = parseFloat(consoleCase.preco);
      const actualDebit = testUser.saldo - updatedUser.saldo;
      
      if (Math.abs(actualDebit - expectedDebit) < 0.01) {
        console.log('‚úÖ D√âBITO CORRETO!');
      } else {
        console.log('‚ùå D√âBITO INCORRETO!');
        console.log(`   Diferen√ßa: R$ ${(actualDebit - expectedDebit).toFixed(2)}`);
      }
      
      // 7. Verificar UserBalance retornado
      console.log('\nüîç VERIFICANDO USERBALANCE:');
      console.log(`   UserBalance retornado: R$ ${response.data.userBalance}`);
      console.log(`   Saldo real no banco: R$ ${updatedUser.saldo}`);
      
      if (Math.abs(response.data.userBalance - updatedUser.saldo) < 0.01) {
        console.log('‚úÖ USERBALANCE CORRETO!');
      } else {
        console.log('‚ùå USERBALANCE INCORRETO!');
        console.log(`   Diferen√ßa: R$ ${(response.data.userBalance - updatedUser.saldo).toFixed(2)}`);
      }
      
      // 8. Verificar transa√ß√µes criadas
      console.log('\nüìä TRANSA√á√ïES CRIADAS:');
      const transactions = await prisma.transaction.findMany({
        where: { user_id: testUser.id },
        orderBy: { criado_em: 'desc' },
        take: 5,
        select: {
          tipo: true,
          valor: true,
          descricao: true,
          criado_em: true
        }
      });
      
      transactions.forEach((tx, index) => {
        console.log(`${index + 1}. ${tx.tipo}`);
        console.log(`   Valor: R$ ${tx.valor}`);
        console.log(`   Descri√ß√£o: ${tx.descricao}`);
        console.log(`   Data: ${tx.criado_em.toLocaleString('pt-BR')}`);
      });
      
      // 9. Verificar se h√° d√©bito duplicado
      console.log('\nüîç VERIFICANDO D√âBITO DUPLICADO:');
      const aberturaTransactions = transactions.filter(tx => tx.tipo === 'abertura_caixa');
      if (aberturaTransactions.length > 1) {
        console.log('‚ùå D√âBITO DUPLICADO DETECTADO!');
        console.log(`   Transa√ß√µes de abertura: ${aberturaTransactions.length}`);
      } else {
        console.log('‚úÖ Sem d√©bito duplicado');
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao comprar caixa:', error.response?.data || error.message);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugConsoleCase();
