// Script para investigar o problema real
// Cole no console do navegador (F12)

console.log('üîç INVESTIGA√á√ÉO PROFUNDA DO PROBLEMA');
console.log('===================================');

async function deepInvestigation() {
  try {
    // 1. Verificar configura√ß√µes detalhadas
    console.log('\n‚öôÔ∏è CONFIGURA√á√ïES DETALHADAS:');
    const configResponse = await fetch('https://slotbox-api.onrender.com/api/pixup-test');
    const configData = await configResponse.json();
    
    console.log('Configura√ß√µes completas:', configData);
    
    // 2. Verificar se as credenciais est√£o realmente corretas
    console.log('\nüîê VERIFICA√á√ÉO DAS CREDENCIAIS:');
    console.log('Client ID:', configData.config.clientId);
    console.log('API URL:', configData.config.apiUrl);
    console.log('Credenciais:', configData.credentials);
    
    // 3. Testar com diferentes abordagens
    console.log('\nüß™ TESTANDO DIFERENTES ABORDAGENS:');
    
    // Teste 1: Verificar se √© problema de timeout
    console.log('Teste 1: Verificando timeout...');
    const startTime = Date.now();
    
    const authResponse = await fetch('https://slotbox-api.onrender.com/api/pixup-test-auth', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    const endTime = Date.now();
    const authData = await authResponse.json();
    
    console.log('Tempo de resposta:', endTime - startTime, 'ms');
    console.log('Status:', authResponse.status);
    console.log('Resposta:', authData);
    
    // 4. Analisar o erro espec√≠fico
    if (!authData.success && authData.error.includes('IP bloqueado')) {
      console.log('\nüö® AN√ÅLISE DO ERRO "IP BLOQUEADO":');
      console.log('üí° Poss√≠veis causas:');
      console.log('   1. Conta Pixup com problema (mesmo que gerente diga que n√£o)');
      console.log('   2. Credenciais incorretas na Pixup');
      console.log('   3. Conta suspensa ou bloqueada');
      console.log('   4. Problema na API da Pixup');
      console.log('   5. Render usando IP diferente do esperado');
      
      // 5. Verificar IPs do Render
      console.log('\nüåê VERIFICANDO IPs DO RENDER:');
      console.log('Client IP:', configData.ipInfo?.clientIP);
      console.log('X-Forwarded-For:', configData.ipInfo?.xForwardedFor);
      console.log('CF-Connecting-IP:', configData.ipInfo?.cfConnectingIP);
      
      // 6. Sugest√µes de solu√ß√£o
      console.log('\nüí° SUGEST√ïES DE SOLU√á√ÉO:');
      console.log('   1. Verificar com o gerente Pixup se a conta est√° ativa');
      console.log('   2. Confirmar se as credenciais est√£o corretas na Pixup');
      console.log('   3. Verificar se h√° algum bloqueio na conta');
      console.log('   4. Testar com credenciais de teste (se dispon√≠veis)');
      console.log('   5. Verificar se a conta tem permiss√£o para dep√≥sitos');
      
    } else if (!authData.success) {
      console.log('\nüö® OUTRO TIPO DE ERRO:', authData.error);
    } else {
      console.log('\n‚úÖ Autentica√ß√£o funcionando!');
    }
    
    // 7. Teste adicional: verificar se √© problema de rede
    console.log('\nüåê TESTE DE CONECTIVIDADE:');
    try {
      const pingResponse = await fetch('https://api.pixupbr.com/v2/oauth/token', {
        method: 'OPTIONS'
      });
      console.log('Conectividade com Pixup:', pingResponse.status);
    } catch (error) {
      console.log('Erro de conectividade:', error.message);
    }
    
  } catch (error) {
    console.log('‚ùå Erro na investiga√ß√£o:', error.message);
  }
}

// Executar investiga√ß√£o
deepInvestigation();
