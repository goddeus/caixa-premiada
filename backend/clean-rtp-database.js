const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanRTPDatabase() {
  try {
    console.log('üßπ Iniciando limpeza do sistema RTP do banco de dados...');

    // 1. Remover dados de comportamento do usu√°rio
    console.log('üìä Removendo dados de comportamento do usu√°rio...');
    try {
      const userBehaviorCount = await prisma.userBehavior.count();
      if (userBehaviorCount > 0) {
        await prisma.userBehavior.deleteMany();
        console.log(`‚úÖ Removidos ${userBehaviorCount} registros de comportamento do usu√°rio`);
      } else {
        console.log('‚úÖ Nenhum registro de comportamento encontrado');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela userBehavior n√£o encontrada ou erro:', error.message);
    }

    // 2. Remover sess√µes RTP do usu√°rio
    console.log('üéØ Removendo sess√µes RTP do usu√°rio...');
    try {
      const rtpSessionsCount = await prisma.userRTPSession.count();
      if (rtpSessionsCount > 0) {
        await prisma.userRTPSession.deleteMany();
        console.log(`‚úÖ Removidas ${rtpSessionsCount} sess√µes RTP`);
      } else {
        console.log('‚úÖ Nenhuma sess√£o RTP encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela userRTPSession n√£o encontrada ou erro:', error.message);
    }

    // 3. Remover configura√ß√µes de RTP
    console.log('‚öôÔ∏è Removendo configura√ß√µes de RTP...');
    try {
      const rtpConfigCount = await prisma.rTPConfig.count();
      if (rtpConfigCount > 0) {
        await prisma.rTPConfig.deleteMany();
        console.log(`‚úÖ Removidas ${rtpConfigCount} configura√ß√µes de RTP`);
      } else {
        console.log('‚úÖ Nenhuma configura√ß√£o RTP encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela rTPConfig n√£o encontrada ou erro:', error.message);
    }

    // 4. Remover logs de sorteio detalhados
    console.log('üé≤ Removendo logs de sorteio detalhados...');
    try {
      const drawLogsCount = await prisma.drawDetailedLog.count();
      if (drawLogsCount > 0) {
        await prisma.drawDetailedLog.deleteMany();
        console.log(`‚úÖ Removidos ${drawLogsCount} logs de sorteio detalhados`);
      } else {
        console.log('‚úÖ Nenhum log de sorteio detalhado encontrado');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Tabela drawDetailedLog n√£o encontrada ou erro:', error.message);
    }

    // 5. Remover transa√ß√µes relacionadas ao RTP
    console.log('üí≥ Removendo transa√ß√µes relacionadas ao RTP...');
    try {
      const rtpTransactionsCount = await prisma.transaction.count({
        where: {
          OR: [
            { descricao: { contains: 'RTP' } },
            { descricao: { contains: 'rtp' } },
            { descricao: { contains: 'manipulative' } },
            { descricao: { contains: 'addictive' } },
            { descricao: { contains: 'global_draw' } },
            { tipo: 'violacao_seguranca' }
          ]
        }
      });

      if (rtpTransactionsCount > 0) {
        await prisma.transaction.deleteMany({
          where: {
            OR: [
              { descricao: { contains: 'RTP' } },
              { descricao: { contains: 'rtp' } },
              { descricao: { contains: 'manipulative' } },
              { descricao: { contains: 'addictive' } },
              { descricao: { contains: 'global_draw' } },
              { tipo: 'violacao_seguranca' }
            ]
          }
        });
        console.log(`‚úÖ Removidas ${rtpTransactionsCount} transa√ß√µes relacionadas ao RTP`);
      } else {
        console.log('‚úÖ Nenhuma transa√ß√£o RTP encontrada');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao remover transa√ß√µes RTP:', error.message);
    }

    console.log('üéâ Limpeza do sistema RTP conclu√≠da com sucesso!');
    console.log('üìã Sistema RTP completamente removido do banco de dados.');

  } catch (error) {
    console.error('‚ùå Erro durante a limpeza do banco de dados:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  cleanRTPDatabase()
    .then(() => {
      console.log('‚úÖ Script de limpeza executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Erro ao executar script de limpeza:', error);
      process.exit(1);
    });
}

module.exports = cleanRTPDatabase;
