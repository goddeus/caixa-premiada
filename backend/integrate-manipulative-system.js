const fs = require('fs');
const path = require('path');

/**
 * SCRIPT DE INTEGRA√á√ÉO DO SISTEMA MANIPULATIVO
 * 
 * Este script integra o sistema manipulativo no servidor principal
 * adicionando as rotas e configura√ß√µes necess√°rias.
 */

console.log('üß† Integrando sistema manipulativo no servidor...');

try {
  // 1. Adicionar rotas manipulativas no server.js
  console.log('1. üìù Adicionando rotas manipulativas no server.js...');
  
  const serverPath = path.join(__dirname, 'src', 'server.js');
  let serverContent = fs.readFileSync(serverPath, 'utf8');
  
  // Verificar se j√° existe a importa√ß√£o das rotas manipulativas
  if (!serverContent.includes('manipulativeRoutes')) {
    // Adicionar importa√ß√£o das rotas manipulativas
    const importLine = "const manipulativeRoutes = require('./routes/manipulativeRoutes');";
    const routesImportIndex = serverContent.indexOf("const routes = require('./routes');");
    
    if (routesImportIndex !== -1) {
      serverContent = serverContent.slice(0, routesImportIndex) + 
                     importLine + '\n' + 
                     serverContent.slice(routesImportIndex);
    }
    
    // Adicionar uso das rotas manipulativas
    const appUseIndex = serverContent.indexOf("app.use('/api', routes);");
    if (appUseIndex !== -1) {
      const manipulativeRouteLine = "app.use('/api/manipulative', manipulativeRoutes);";
      serverContent = serverContent.slice(0, appUseIndex) + 
                     manipulativeRouteLine + '\n' + 
                     serverContent.slice(appUseIndex);
    }
    
    fs.writeFileSync(serverPath, serverContent);
    console.log('‚úÖ Rotas manipulativas adicionadas ao server.js');
  } else {
    console.log('‚ö†Ô∏è Rotas manipulativas j√° existem no server.js');
  }
  
  // 2. Criar tabela de comportamento do usu√°rio (se n√£o existir)
  console.log('2. üóÑÔ∏è Verificando tabela de comportamento do usu√°rio...');
  
  const schemaPath = path.join(__dirname, 'prisma', 'schema.prisma');
  let schemaContent = fs.readFileSync(schemaPath, 'utf8');
  
  if (!schemaContent.includes('model UserBehavior')) {
    const userBehaviorModel = `
model UserBehavior {
  id            String   @id @default(uuid())
  user_id       String
  case_id       String
  prize_value   Float
  rtp_used      Float
  strategy      String
  timestamp     DateTime @default(now())
  
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  case          Case     @relation(fields: [case_id], references: [id], onDelete: Cascade)
  
  @@map("user_behaviors")
}`;
    
    // Adicionar o modelo antes do fechamento do schema
    const lastModelIndex = schemaContent.lastIndexOf('}');
    schemaContent = schemaContent.slice(0, lastModelIndex) + 
                   userBehaviorModel + '\n' + 
                   schemaContent.slice(lastModelIndex);
    
    // Adicionar rela√ß√£o no modelo User
    if (!schemaContent.includes('behaviors UserBehavior[]')) {
      const userModelIndex = schemaContent.indexOf('model User {');
      const userModelEndIndex = schemaContent.indexOf('}', userModelIndex);
      const userModelContent = schemaContent.slice(userModelIndex, userModelEndIndex + 1);
      
      if (!userModelContent.includes('behaviors UserBehavior[]')) {
        const newUserModel = userModelContent.slice(0, -1) + 
                           '\n  behaviors UserBehavior[]\n' + 
                           userModelContent.slice(-1);
        schemaContent = schemaContent.replace(userModelContent, newUserModel);
      }
    }
    
    // Adicionar rela√ß√£o no modelo Case
    if (!schemaContent.includes('behaviors UserBehavior[]')) {
      const caseModelIndex = schemaContent.indexOf('model Case {');
      const caseModelEndIndex = schemaContent.indexOf('}', caseModelIndex);
      const caseModelContent = schemaContent.slice(caseModelIndex, caseModelEndIndex + 1);
      
      if (!caseModelContent.includes('behaviors UserBehavior[]')) {
        const newCaseModel = caseModelContent.slice(0, -1) + 
                           '\n  behaviors UserBehavior[]\n' + 
                           caseModelContent.slice(-1);
        schemaContent = schemaContent.replace(caseModelContent, newCaseModel);
      }
    }
    
    fs.writeFileSync(schemaPath, schemaContent);
    console.log('‚úÖ Modelo UserBehavior adicionado ao schema.prisma');
  } else {
    console.log('‚ö†Ô∏è Modelo UserBehavior j√° existe no schema.prisma');
  }
  
  // 3. Criar migration para a tabela de comportamento
  console.log('3. üìä Criando migration para tabela de comportamento...');
  
  const migrationDir = path.join(__dirname, 'prisma', 'migrations');
  if (!fs.existsSync(migrationDir)) {
    fs.mkdirSync(migrationDir, { recursive: true });
  }
  
  const migrationName = `add_user_behavior_${Date.now()}`;
  const migrationPath = path.join(migrationDir, migrationName);
  fs.mkdirSync(migrationPath, { recursive: true });
  
  const migrationSQL = `-- CreateTable
CREATE TABLE "user_behaviors" (
    "id" TEXT NOT NULL,
    "user_id" TEXT NOT NULL,
    "case_id" TEXT NOT NULL,
    "prize_value" DOUBLE PRECISION NOT NULL,
    "rtp_used" DOUBLE PRECISION NOT NULL,
    "strategy" TEXT NOT NULL,
    "timestamp" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT "user_behaviors_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "user_behaviors" ADD CONSTRAINT "user_behaviors_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "users"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "user_behaviors" ADD CONSTRAINT "user_behaviors_case_id_fkey" FOREIGN KEY ("case_id") REFERENCES "cases"("id") ON DELETE CASCADE ON UPDATE CASCADE;`;
  
  fs.writeFileSync(path.join(migrationPath, 'migration.sql'), migrationSQL);
  console.log('‚úÖ Migration criada:', migrationName);
  
  // 4. Criar script de ativa√ß√£o do sistema manipulativo
  console.log('4. üöÄ Criando script de ativa√ß√£o...');
  
  const activationScript = `#!/bin/bash

echo "üß† Ativando Sistema Manipulativo..."

# 1. Instalar depend√™ncias
echo "üì¶ Instalando depend√™ncias..."
npm install

# 2. Gerar cliente Prisma
echo "üóÑÔ∏è Gerando cliente Prisma..."
npx prisma generate

# 3. Aplicar migrations
echo "üìä Aplicando migrations..."
npx prisma db push

# 4. Reiniciar servidor
echo "üîÑ Reiniciando servidor..."
pm2 restart slotbox-api || npm start

echo "‚úÖ Sistema Manipulativo ativado com sucesso!"
echo "üéØ O sistema agora est√° configurado para:"
echo "   - RTP din√¢mico baseado no comportamento"
echo "   - T√©cnicas de manipula√ß√£o psicol√≥gica"
echo "   - Sistema de reten√ß√£o inteligente"
echo "   - An√°lise comportamental em tempo real"
echo "   - Estrat√©gias de extra√ß√£o de valor"
echo ""
echo "üîó Endpoints dispon√≠veis:"
echo "   - POST /api/manipulative/cases/:id/buy"
echo "   - POST /api/manipulative/cases/:id/buy-multiple"
echo "   - GET /api/manipulative/user/stats"
echo ""
echo "‚ö†Ô∏è ATEN√á√ÉO: Este sistema √© altamente manipulativo e viciante!"
echo "   Use com responsabilidade e em conformidade com as leis locais."`;
  
  fs.writeFileSync(path.join(__dirname, 'activate-manipulative.sh'), activationScript);
  console.log('‚úÖ Script de ativa√ß√£o criado: activate-manipulative.sh');
  
  // 5. Criar documenta√ß√£o do sistema
  console.log('5. üìö Criando documenta√ß√£o...');
  
  const documentation = `# SISTEMA MANIPULATIVO - DOCUMENTA√á√ÉO

## üß† Vis√£o Geral

O Sistema Manipulativo √© um sistema de RTP din√¢mico e viciante que utiliza t√©cnicas psicol√≥gicas avan√ßadas para maximizar a reten√ß√£o de usu√°rios e os lucros da plataforma.

## üéØ Caracter√≠sticas Principais

### 1. RTP Din√¢mico
- **RTP Base:** 15% (muito baixo)
- **Novos Usu√°rios:** 45% (para criar v√≠cio)
- **Loss Chasing:** 8% (quase imposs√≠vel ganhar)
- **Reten√ß√£o:** 60% (para n√£o perder usu√°rio)

### 2. Estrat√©gias Psicol√≥gicas

#### Honeymoon (Novos Usu√°rios)
- RTP: 45%
- Objetivo: Criar v√≠cio inicial
- T√©cnica: Recompensas frequentes

#### Extraction (Persegui√ß√£o de Perdas)
- RTP: 8%
- Objetivo: Maximizar lucro
- T√©cnica: Quase imposs√≠vel ganhar

#### Retention (Reten√ß√£o)
- RTP: 60%
- Objetivo: Evitar abandono
- T√©cnica: Pr√™mios de reten√ß√£o

#### Maintenance (Manuten√ß√£o)
- RTP: 20%
- Objetivo: Manter engajamento
- T√©cnica: RTP equilibrado

### 3. T√©cnicas Psicol√≥gicas

#### Near Miss (Quase Vit√≥rias)
- Mostra "quase ganhou" quando perde
- Cria sensa√ß√£o de proximidade
- Incentiva continuar jogando

#### Loss Chasing (Persegui√ß√£o de Perdas)
- Usu√°rio perde muito dinheiro
- Sistema reduz RTP drasticamente
- Maximiza extra√ß√£o de valor

#### Sunk Cost Fallacy (Fal√°cia do Custo Afundado)
- Lembra quanto j√° gastou
- "N√£o desista agora"
- Incentiva continuar para recuperar

#### Variable Ratio Reinforcement
- Recompensas imprevis√≠veis
- M√°xima vici√¢ncia
- Dificulta parar de jogar

### 4. An√°lise Comportamental

#### M√©tricas Monitoradas
- Total gasto vs ganho
- Frequ√™ncia de jogos
- Padr√µes de perda
- Tend√™ncia de abandono

#### Perfis Comportamentais
- **Novo Usu√°rio:** RTP alto
- **Loss Chasing:** RTP baixo
- **Alta Frequ√™ncia:** RTP m√©dio
- **Prestes a Desistir:** RTP alto

### 5. Sistema de Streaks

#### Hot Streak (Sequ√™ncia de Vit√≥rias)
- Detecta quando usu√°rio ganha muito
- Reduz RTP para quebrar sequ√™ncia
- Evita perdas excessivas

#### Cold Streak (Sequ√™ncia de Perdas)
- Detecta quando usu√°rio perde muito
- Aumenta RTP para dar pr√™mio
- Evita abandono total

## üîó Endpoints

### POST /api/manipulative/cases/:id/buy
Compra de caixa com sistema manipulativo

**Resposta:**
\`\`\`json
{
  "success": true,
  "prize": {
    "nome": "Pr√™mio",
    "valor": 0,
    "psychologicalMessage": "Mensagem manipulativa",
    "isManipulative": true,
    "strategy": "extraction",
    "rtpUsed": 0.08
  },
  "manipulativeData": {
    "strategy": "extraction",
    "rtpUsed": 0.08,
    "behaviorProfile": {...},
    "isRetentionPrize": false
  }
}
\`\`\`

### POST /api/manipulative/cases/:id/buy-multiple
Compra m√∫ltipla com sistema manipulativo

### GET /api/manipulative/user/stats
Estat√≠sticas manipulativas do usu√°rio

## ‚ö†Ô∏è Avisos Importantes

1. **Legalidade:** Verifique as leis locais sobre jogos de azar
2. **√âtica:** Este sistema √© altamente manipulativo
3. **Responsabilidade:** Use com cuidado e responsabilidade
4. **Transpar√™ncia:** Considere informar usu√°rios sobre o sistema

## üöÄ Ativa√ß√£o

Execute o script de ativa√ß√£o:
\`\`\`bash
chmod +x activate-manipulative.sh
./activate-manipulative.sh
\`\`\`

## üìä Monitoramento

O sistema registra todos os comportamentos na tabela \`user_behaviors\` para an√°lise e otimiza√ß√£o cont√≠nua.

## üîß Configura√ß√£o

Para ajustar o sistema, modifique os par√¢metros em:
- \`addictiveRTPService.js\`
- \`manipulativeDrawService.js\`
- \`manipulativeCompraController.js\`
`;
  
  fs.writeFileSync(path.join(__dirname, 'MANIPULATIVE_SYSTEM.md'), documentation);
  console.log('‚úÖ Documenta√ß√£o criada: MANIPULATIVE_SYSTEM.md');
  
  console.log('\nüéØ INTEGRA√á√ÉO DO SISTEMA MANIPULATIVO CONCLU√çDA!');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Execute: chmod +x activate-manipulative.sh');
  console.log('2. Execute: ./activate-manipulative.sh');
  console.log('3. Teste o sistema com: node test-manipulative-system.js');
  console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Este sistema √© altamente manipulativo e viciante!');
  console.log('   Use com responsabilidade e em conformidade com as leis locais.');
  
} catch (error) {
  console.error('‚ùå Erro na integra√ß√£o:', error.message);
}
