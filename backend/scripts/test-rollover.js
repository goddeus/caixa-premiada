const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRollover() {
  console.log('üß™ TESTE DO SISTEMA DE ROLLOVER');
  console.log('================================');
  
  try {
    // 1. Criar usu√°rio de teste
    console.log('\n1Ô∏è‚É£ Criando usu√°rio de teste...');
    
    const testUser = await prisma.user.create({
      data: {
        nome: 'Usu√°rio Teste Rollover',
        email: 'teste.rollover@example.com',
        senha_hash: 'hash_teste',
        cpf: `${Date.now()}`,
        saldo: 0,
        primeiro_deposito_feito: false,
        rollover_liberado: false,
        rollover_minimo: 20.00,
        total_giros: 0
      }
    });
    
    console.log(`‚úÖ Usu√°rio criado: ${testUser.nome} (ID: ${testUser.id})`);
    
    // 2. Teste 1: Usu√°rio sem primeiro dep√≥sito pode sacar?
    console.log('\n2Ô∏è‚É£ Teste 1: Usu√°rio sem primeiro dep√≥sito pode sacar?');
    
    try {
      // Simular tentativa de saque
      const user = await prisma.user.findUnique({
        where: { id: testUser.id },
        select: {
          primeiro_deposito_feito: true,
          rollover_liberado: true,
          total_giros: true,
          rollover_minimo: true
        }
      });
      
      if (user.primeiro_deposito_feito && !user.rollover_liberado) {
        console.log('‚ùå ERRO: Usu√°rio sem primeiro dep√≥sito n√£o deveria ter rollover aplicado');
      } else {
        console.log('‚úÖ CORRETO: Usu√°rio sem primeiro dep√≥sito n√£o tem rollover aplicado');
      }
    } catch (error) {
      console.log('‚úÖ CORRETO: Erro esperado ao tentar sacar sem primeiro dep√≥sito');
    }
    
    // 3. Teste 2: Fazer primeiro dep√≥sito
    console.log('\n3Ô∏è‚É£ Teste 2: Fazendo primeiro dep√≥sito...');
    
    await prisma.user.update({
      where: { id: testUser.id },
      data: {
        saldo: { increment: 100 },
        primeiro_deposito_feito: true
      }
    });
    
    await prisma.wallet.create({
      data: {
        user_id: testUser.id,
        saldo: 100
      }
    });
    
    console.log('‚úÖ Primeiro dep√≥sito realizado: R$ 100,00');
    
    // 4. Teste 3: Usu√°rio com primeiro dep√≥sito mas sem rollover pode sacar?
    console.log('\n4Ô∏è‚É£ Teste 3: Usu√°rio com primeiro dep√≥sito mas sem rollover pode sacar?');
    
    const userAfterDeposit = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: {
        primeiro_deposito_feito: true,
        rollover_liberado: true,
        total_giros: true,
        rollover_minimo: true
      }
    });
    
    if (userAfterDeposit.primeiro_deposito_feito && !userAfterDeposit.rollover_liberado) {
      console.log('‚úÖ CORRETO: Usu√°rio com primeiro dep√≥sito mas sem rollover n√£o pode sacar');
    } else {
      console.log('‚ùå ERRO: L√≥gica de rollover incorreta');
    }
    
    // 5. Teste 4: Simular apostas para atingir rollover
    console.log('\n5Ô∏è‚É£ Teste 4: Simulando apostas para atingir rollover...');
    
    // Simular 5 apostas de R$ 4,00 cada (total R$ 20,00)
    for (let i = 1; i <= 5; i++) {
      await prisma.user.update({
        where: { id: testUser.id },
        data: {
          total_giros: { increment: 4.00 }
        }
      });
      
      // Verificar se atingiu rollover
      const userAfterBet = await prisma.user.findUnique({
        where: { id: testUser.id },
        select: {
          total_giros: true,
          rollover_liberado: true,
          rollover_minimo: true,
          primeiro_deposito_feito: true
        }
      });
      
      if (userAfterBet.primeiro_deposito_feito && !userAfterBet.rollover_liberado && userAfterBet.total_giros >= userAfterBet.rollover_minimo) {
        await prisma.user.update({
          where: { id: testUser.id },
          data: {
            rollover_liberado: true
          }
        });
        console.log(`‚úÖ Rollover atingido ap√≥s ${i} apostas! Total: R$ ${userAfterBet.total_giros.toFixed(2)}`);
        break;
      }
      
      console.log(`   Aposta ${i}: R$ ${userAfterBet.total_giros.toFixed(2)}/${userAfterBet.rollover_minimo.toFixed(2)}`);
    }
    
    // 6. Teste 5: Usu√°rio com rollover liberado pode sacar?
    console.log('\n6Ô∏è‚É£ Teste 5: Usu√°rio com rollover liberado pode sacar?');
    
    const userAfterRollover = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: {
        primeiro_deposito_feito: true,
        rollover_liberado: true,
        total_giros: true,
        rollover_minimo: true
      }
    });
    
    if (userAfterRollover.rollover_liberado) {
      console.log('‚úÖ CORRETO: Usu√°rio com rollover liberado pode sacar');
    } else {
      console.log('‚ùå ERRO: Rollover n√£o foi liberado corretamente');
    }
    
    // 7. Teste 6: Pr√≥ximos dep√≥sitos n√£o precisam de rollover
    console.log('\n7Ô∏è‚É£ Teste 6: Pr√≥ximos dep√≥sitos n√£o precisam de rollover...');
    
    // Simular segundo dep√≥sito
    await prisma.user.update({
      where: { id: testUser.id },
      data: {
        saldo: { increment: 50 }
      }
    });
    
    const userAfterSecondDeposit = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: {
        primeiro_deposito_feito: true,
        rollover_liberado: true,
        total_giros: true,
        rollover_minimo: true
      }
    });
    
    if (userAfterSecondDeposit.rollover_liberado) {
      console.log('‚úÖ CORRETO: Segundo dep√≥sito n√£o afeta rollover (j√° liberado)');
    } else {
      console.log('‚ùå ERRO: Segundo dep√≥sito afetou rollover incorretamente');
    }
    
    // 8. Relat√≥rio final
    console.log('\nüìä RELAT√ìRIO FINAL:');
    console.log('==================');
    
    const finalUser = await prisma.user.findUnique({
      where: { id: testUser.id },
      select: {
        nome: true,
        saldo: true,
        primeiro_deposito_feito: true,
        rollover_liberado: true,
        total_giros: true,
        rollover_minimo: true
      }
    });
    
    console.log(`Usu√°rio: ${finalUser.nome}`);
    console.log(`Saldo: R$ ${finalUser.saldo.toFixed(2)}`);
    console.log(`Primeiro dep√≥sito feito: ${finalUser.primeiro_deposito_feito ? 'Sim' : 'N√£o'}`);
    console.log(`Rollover liberado: ${finalUser.rollover_liberado ? 'Sim' : 'N√£o'}`);
    console.log(`Total apostado: R$ ${finalUser.total_giros.toFixed(2)}`);
    console.log(`Rollover m√≠nimo: R$ ${finalUser.rollover_minimo.toFixed(2)}`);
    
    // Limpar usu√°rio de teste
    await prisma.user.delete({
      where: { id: testUser.id }
    });
    
    console.log('\n‚úÖ Teste conclu√≠do! Usu√°rio de teste removido.');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testRollover();
