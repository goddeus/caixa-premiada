// AUDITORIA ULTRA MEGA MASTER COMPLETA DO SISTEMA
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function auditCompleteSystem() {
  console.log('üîç AUDITORIA ULTRA MEGA MASTER COMPLETA');
  console.log('========================================');
  
  try {
    // 1. AUDITORIA DAS CAIXAS
    console.log('\nüì¶ 1. AUDITORIA DAS CAIXAS');
    console.log('-------------------------');
    
    const cases = await prisma.case.findMany({
      include: {
        prizes: {
          where: { ativo: true }
        }
      },
      orderBy: { preco: 'asc' }
    });
    
    console.log(`‚úÖ Total de caixas: ${cases.length}`);
    
    cases.forEach((caseItem, index) => {
      console.log(`\nüì¶ Caixa ${index + 1}:`);
      console.log(`   ID: ${caseItem.id}`);
      console.log(`   Nome: ${caseItem.nome}`);
      console.log(`   Pre√ßo: R$ ${caseItem.preco}`);
      console.log(`   Ativa: ${caseItem.ativo ? '‚úÖ' : '‚ùå'}`);
      console.log(`   Imagem: ${caseItem.imagem || '‚ùå N√£o definida'}`);
      console.log(`   Pr√™mios: ${caseItem.prizes.length}`);
      
      if (caseItem.prizes.length > 0) {
        console.log('   üìã Pr√™mios:');
        caseItem.prizes.forEach((prize, prizeIndex) => {
          console.log(`      ${prizeIndex + 1}. ${prize.nome} - R$ ${prize.valor} (${(prize.probabilidade * 100).toFixed(2)}%)`);
        });
      } else {
        console.log('   ‚ö†Ô∏è  NENHUM PR√äMIO CONFIGURADO!');
      }
    });
    
    // 2. AUDITORIA DOS PR√äMIOS
    console.log('\nüéÅ 2. AUDITORIA DOS PR√äMIOS');
    console.log('-------------------------');
    
    const prizes = await prisma.prize.findMany({
      include: {
        case: {
          select: { nome: true }
        }
      },
      orderBy: { valor: 'desc' }
    });
    
    console.log(`‚úÖ Total de pr√™mios: ${prizes.length}`);
    
    const activePrizes = prizes.filter(p => p.ativo);
    const inactivePrizes = prizes.filter(p => !p.ativo);
    
    console.log(`   Ativos: ${activePrizes.length}`);
    console.log(`   Inativos: ${inactivePrizes.length}`);
    
    // Verificar probabilidades
    const totalProbability = activePrizes.reduce((sum, p) => sum + p.probabilidade, 0);
    console.log(`   Probabilidade total: ${(totalProbability * 100).toFixed(2)}%`);
    
    if (totalProbability > 1.0) {
      console.log('   ‚ö†Ô∏è  PROBABILIDADE TOTAL EXCEDE 100%!');
    } else if (totalProbability < 0.8) {
      console.log('   ‚ö†Ô∏è  PROBABILIDADE TOTAL MUITO BAIXA!');
    }
    
    // 3. AUDITORIA DOS USU√ÅRIOS
    console.log('\nüë• 3. AUDITORIA DOS USU√ÅRIOS');
    console.log('-------------------------');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        nome: true,
        email: true,
        tipo_conta: true,
        saldo_reais: true,
        saldo_demo: true,
        ativo: true,
        is_admin: true
      }
    });
    
    console.log(`‚úÖ Total de usu√°rios: ${users.length}`);
    
    const normalUsers = users.filter(u => u.tipo_conta === 'normal');
    const demoUsers = users.filter(u => u.tipo_conta === 'afiliado_demo');
    const adminUsers = users.filter(u => u.is_admin);
    const activeUsers = users.filter(u => u.ativo);
    
    console.log(`   Contas normais: ${normalUsers.length}`);
    console.log(`   Contas demo: ${demoUsers.length}`);
    console.log(`   Administradores: ${adminUsers.length}`);
    console.log(`   Usu√°rios ativos: ${activeUsers.length}`);
    
    // 4. AUDITORIA DAS TRANSA√á√ïES
    console.log('\nüí∞ 4. AUDITORIA DAS TRANSA√á√ïES');
    console.log('-------------------------');
    
    const transactions = await prisma.transaction.findMany({
      select: {
        tipo: true,
        valor: true,
        status: true,
        criado_em: true
      },
      orderBy: { criado_em: 'desc' },
      take: 100
    });
    
    console.log(`‚úÖ √öltimas 100 transa√ß√µes analisadas`);
    
    const transactionTypes = {};
    const transactionStatus = {};
    let totalValue = 0;
    
    transactions.forEach(t => {
      transactionTypes[t.tipo] = (transactionTypes[t.tipo] || 0) + 1;
      transactionStatus[t.status] = (transactionStatus[t.status] || 0) + 1;
      totalValue += t.valor;
    });
    
    console.log('   Tipos de transa√ß√£o:');
    Object.entries(transactionTypes).forEach(([type, count]) => {
      console.log(`      ${type}: ${count}`);
    });
    
    console.log('   Status das transa√ß√µes:');
    Object.entries(transactionStatus).forEach(([status, count]) => {
      console.log(`      ${status}: ${count}`);
    });
    
    console.log(`   Valor total: R$ ${totalValue.toFixed(2)}`);
    
    // 5. AUDITORIA DE INCONSIST√äNCIAS
    console.log('\n‚ö†Ô∏è  5. AUDITORIA DE INCONSIST√äNCIAS');
    console.log('-------------------------');
    
    let inconsistencies = [];
    
    // Verificar caixas sem pr√™mios
    const casesWithoutPrizes = cases.filter(c => c.prizes.length === 0);
    if (casesWithoutPrizes.length > 0) {
      inconsistencies.push(`‚ùå ${casesWithoutPrizes.length} caixas sem pr√™mios: ${casesWithoutPrizes.map(c => c.nome).join(', ')}`);
    }
    
    // Verificar pr√™mios sem caixa
    const prizesWithoutCase = await prisma.prize.findMany({
      where: {
        case: null
      }
    });
    if (prizesWithoutCase.length > 0) {
      inconsistencies.push(`‚ùå ${prizesWithoutCase.length} pr√™mios sem caixa associada`);
    }
    
    // Verificar pre√ßos negativos ou zero
    const invalidPrices = cases.filter(c => c.preco <= 0);
    if (invalidPrices.length > 0) {
      inconsistencies.push(`‚ùå ${invalidPrices.length} caixas com pre√ßo inv√°lido: ${invalidPrices.map(c => c.nome).join(', ')}`);
    }
    
    // Verificar valores de pr√™mios negativos
    const invalidPrizeValues = prizes.filter(p => p.valor < 0);
    if (invalidPrizeValues.length > 0) {
      inconsistencies.push(`‚ùå ${invalidPrizeValues.length} pr√™mios com valor negativo`);
    }
    
    // Verificar probabilidades inv√°lidas
    const invalidProbabilities = prizes.filter(p => p.probabilidade < 0 || p.probabilidade > 1);
    if (invalidProbabilities.length > 0) {
      inconsistencies.push(`‚ùå ${invalidProbabilities.length} pr√™mios com probabilidade inv√°lida`);
    }
    
    if (inconsistencies.length > 0) {
      console.log('üö® INCONSIST√äNCIAS ENCONTRADAS:');
      inconsistencies.forEach(inconsistency => {
        console.log(`   ${inconsistency}`);
      });
    } else {
      console.log('‚úÖ Nenhuma inconsist√™ncia encontrada!');
    }
    
    // 6. RESUMO FINAL
    console.log('\nüìä RESUMO FINAL');
    console.log('===============');
    console.log(`üì¶ Caixas: ${cases.length} (${cases.filter(c => c.ativo).length} ativas)`);
    console.log(`üéÅ Pr√™mios: ${prizes.length} (${activePrizes.length} ativos)`);
    console.log(`üë• Usu√°rios: ${users.length} (${activeUsers.length} ativos)`);
    console.log(`üí∞ Transa√ß√µes: ${transactions.length} analisadas`);
    console.log(`‚ö†Ô∏è  Inconsist√™ncias: ${inconsistencies.length}`);
    
    if (inconsistencies.length > 0) {
      console.log('\nüîß A√á√ïES RECOMENDADAS:');
      console.log('   1. Corrigir caixas sem pr√™mios');
      console.log('   2. Verificar pre√ßos e valores inv√°lidos');
      console.log('   3. Ajustar probabilidades dos pr√™mios');
      console.log('   4. Validar dados de usu√°rios');
    }
    
  } catch (error) {
    console.error('‚ùå Erro na auditoria:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar auditoria
auditCompleteSystem();
