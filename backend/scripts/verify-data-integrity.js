/**
 * Script de Verifica√ß√£o de Integridade dos Dados
 * Verifica consist√™ncia entre tabelas ap√≥s rollback
 */

require('dotenv').config({ path: '../.env.production' });
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function verifyDataIntegrity() {
  console.log('üîç Iniciando verifica√ß√£o de integridade dos dados...');
  
  const issues = [];
  
  try {
    // 1. Verificar consist√™ncia de saldos entre User e Wallet
    console.log('üìä Verificando consist√™ncia de saldos...');
    
    const users = await prisma.user.findMany({
      include: {
        wallet: true
      }
    });
    
    for (const user of users) {
      if (user.wallet) {
        if (user.saldo_reais !== user.wallet.saldo_reais) {
          issues.push({
            type: 'SALDO_REAIS_INCONSISTENTE',
            user_id: user.id,
            user_saldo: user.saldo_reais,
            wallet_saldo: user.wallet.saldo_reais
          });
        }
        
        if (user.saldo_demo !== user.wallet.saldo_demo) {
          issues.push({
            type: 'SALDO_DEMO_INCONSISTENTE',
            user_id: user.id,
            user_saldo: user.saldo_demo,
            wallet_saldo: user.wallet.saldo_demo
          });
        }
      } else {
        issues.push({
          type: 'WALLET_NAO_ENCONTRADO',
          user_id: user.id
        });
      }
    }
    
    // 2. Verificar transa√ß√µes √≥rf√£s
    console.log('üîó Verificando transa√ß√µes √≥rf√£s...');
    
    const orphanTransactions = await prisma.transaction.findMany({
      where: {
        user: null
      }
    });
    
    if (orphanTransactions.length > 0) {
      issues.push({
        type: 'TRANSACOES_ORFAS',
        count: orphanTransactions.length,
        transaction_ids: orphanTransactions.map(t => t.id)
      });
    }
    
    // 3. Verificar pagamentos √≥rf√£os
    console.log('üí≥ Verificando pagamentos √≥rf√£os...');
    
    const orphanPayments = await prisma.payment.findMany({
      where: {
        user: null
      }
    });
    
    if (orphanPayments.length > 0) {
      issues.push({
        type: 'PAGAMENTOS_ORFAOS',
        count: orphanPayments.length,
        payment_ids: orphanPayments.map(p => p.id)
      });
    }
    
    // 4. Verificar pr√™mios √≥rf√£os
    console.log('üéÅ Verificando pr√™mios √≥rf√£os...');
    
    const orphanPrizes = await prisma.prize.findMany({
      where: {
        case: null
      }
    });
    
    if (orphanPrizes.length > 0) {
      issues.push({
        type: 'PREMIOS_ORFAOS',
        count: orphanPrizes.length,
        prize_ids: orphanPrizes.map(p => p.id)
      });
    }
    
    // 5. Verificar sess√µes √≥rf√£s
    console.log('üë§ Verificando sess√µes √≥rf√£s...');
    
    const orphanSessions = await prisma.userSession.findMany({
      where: {
        user: null
      }
    });
    
    if (orphanSessions.length > 0) {
      issues.push({
        type: 'SESSOES_ORFAS',
        count: orphanSessions.length,
        session_ids: orphanSessions.map(s => s.id)
      });
    }
    
    // 6. Verificar saldos negativos
    console.log('üí∞ Verificando saldos negativos...');
    
    const negativeBalances = await prisma.user.findMany({
      where: {
        OR: [
          { saldo_reais: { lt: 0 } },
          { saldo_demo: { lt: 0 } }
        ]
      }
    });
    
    if (negativeBalances.length > 0) {
      issues.push({
        type: 'SALDOS_NEGATIVOS',
        count: negativeBalances.length,
        users: negativeBalances.map(u => ({
          id: u.id,
          saldo_reais: u.saldo_reais,
          saldo_demo: u.saldo_demo
        }))
      });
    }
    
    // 7. Verificar transa√ß√µes com valores inconsistentes
    console.log('üî¢ Verificando valores inconsistentes...');
    
    const inconsistentTransactions = await prisma.transaction.findMany({
      where: {
        OR: [
          { valor: null },
          { valor: 0, tipo: { not: 'ilustrativo' } }
        ]
      }
    });
    
    if (inconsistentTransactions.length > 0) {
      issues.push({
        type: 'TRANSACOES_VALOR_INCONSISTENTE',
        count: inconsistentTransactions.length,
        transaction_ids: inconsistentTransactions.map(t => t.id)
      });
    }
    
    // 8. Verificar configura√ß√£o de RTP
    console.log('üéØ Verificando configura√ß√£o de RTP...');
    
    const rtpConfigs = await prisma.rTPConfig.findMany({
      where: {
        ativo: true
      }
    });
    
    if (rtpConfigs.length === 0) {
      issues.push({
        type: 'RTP_CONFIG_NAO_ENCONTRADO',
        message: 'Nenhuma configura√ß√£o de RTP ativa encontrada'
      });
    } else if (rtpConfigs.length > 1) {
      issues.push({
        type: 'MULTIPLAS_RTP_CONFIGS',
        count: rtpConfigs.length,
        config_ids: rtpConfigs.map(c => c.id)
      });
    }
    
    // 9. Verificar caixas sem pr√™mios
    console.log('üì¶ Verificando caixas sem pr√™mios...');
    
    const casesWithoutPrizes = await prisma.case.findMany({
      where: {
        ativo: true,
        prizes: {
          none: {
            ativo: true
          }
        }
      }
    });
    
    if (casesWithoutPrizes.length > 0) {
      issues.push({
        type: 'CAIXAS_SEM_PREMIOS',
        count: casesWithoutPrizes.length,
        case_ids: casesWithoutPrizes.map(c => c.id)
      });
    }
    
    // 10. Verificar estat√≠sticas gerais
    console.log('üìà Calculando estat√≠sticas gerais...');
    
    const stats = {
      total_users: await prisma.user.count(),
      total_cases: await prisma.case.count(),
      total_prizes: await prisma.prize.count(),
      total_transactions: await prisma.transaction.count(),
      total_payments: await prisma.payment.count(),
      total_sessions: await prisma.userSession.count(),
      total_affiliates: await prisma.affiliate.count()
    };
    
    console.log('üìä Estat√≠sticas do sistema:');
    console.log(`   ‚Ä¢ Usu√°rios: ${stats.total_users}`);
    console.log(`   ‚Ä¢ Caixas: ${stats.total_cases}`);
    console.log(`   ‚Ä¢ Pr√™mios: ${stats.total_prizes}`);
    console.log(`   ‚Ä¢ Transa√ß√µes: ${stats.total_transactions}`);
    console.log(`   ‚Ä¢ Pagamentos: ${stats.total_payments}`);
    console.log(`   ‚Ä¢ Sess√µes: ${stats.total_sessions}`);
    console.log(`   ‚Ä¢ Afiliados: ${stats.total_affiliates}`);
    
    // Relat√≥rio final
    console.log('\nüìã RELAT√ìRIO DE INTEGRIDADE:');
    
    if (issues.length === 0) {
      console.log('‚úÖ Nenhum problema de integridade encontrado!');
    } else {
      console.log(`‚ùå ${issues.length} problema(s) de integridade encontrado(s):`);
      
      issues.forEach((issue, index) => {
        console.log(`\n${index + 1}. ${issue.type}:`);
        console.log(JSON.stringify(issue, null, 2));
      });
      
      // Salvar relat√≥rio em arquivo
      const fs = require('fs');
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const reportFile = `logs/integrity_report_${timestamp}.json`;
      
      fs.writeFileSync(reportFile, JSON.stringify({
        timestamp: new Date().toISOString(),
        issues,
        stats
      }, null, 2));
      
      console.log(`\nüìÑ Relat√≥rio salvo em: ${reportFile}`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante verifica√ß√£o de integridade:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar verifica√ß√£o
verifyDataIntegrity()
  .then(() => {
    console.log('‚úÖ Verifica√ß√£o de integridade conclu√≠da');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Falha na verifica√ß√£o de integridade:', error);
    process.exit(1);
  });
