/**
 * Script para deploy em produ√ß√£o
 * Execute: node scripts/production-deploy.js
 */

require('dotenv').config();
const fs = require('fs');
const path = require('path');

class ProductionDeployer {
  constructor() {
    this.envFile = path.join(__dirname, '..', '.env.production');
    this.exampleFile = path.join(__dirname, '..', 'env.production.example');
  }

  checkEnvironmentVariables() {
    console.log('üîç Verificando vari√°veis de ambiente...\n');
    
    const requiredVars = [
      'VIZZION_API_KEY',
      'VIZZION_PUBLIC_KEY', 
      'VIZZION_SECRET_KEY',
      'VIZZION_WEBHOOK_SECRET',
      'JWT_SECRET',
      'DATABASE_URL'
    ];
    
    const missing = [];
    
    for (const varName of requiredVars) {
      if (!process.env[varName] || process.env[varName].includes('sua_')) {
        missing.push(varName);
        console.log(`‚ùå ${varName}: N√£o configurado`);
      } else {
        console.log(`‚úÖ ${varName}: Configurado`);
      }
    }
    
    if (missing.length > 0) {
      console.log(`\n‚ö†Ô∏è  Vari√°veis faltando: ${missing.join(', ')}`);
      console.log('üìù Configure estas vari√°veis antes do deploy!');
      return false;
    }
    
    console.log('\n‚úÖ Todas as vari√°veis de ambiente est√£o configuradas!');
    return true;
  }

  createProductionEnv() {
    console.log('\nüìù Criando arquivo .env.production...\n');
    
    if (!fs.existsSync(this.exampleFile)) {
      console.log('‚ùå Arquivo env.production.example n√£o encontrado!');
      return false;
    }
    
    const exampleContent = fs.readFileSync(this.exampleFile, 'utf8');
    
    // Substituir valores de exemplo pelos reais
    let productionContent = exampleContent
      .replace('sua_api_key_vizzionpay', process.env.VIZZION_API_KEY || 'CONFIGURAR')
      .replace('sua_webhook_secret_vizzionpay', process.env.VIZZION_WEBHOOK_SECRET || 'CONFIGURAR')
      .replace('sua_chave_pix@slotbox.shop', process.env.VIZZION_PIX_KEY || 'CONFIGURAR')
      .replace('sua_chave_jwt_super_secreta_production_slotbox_2024', process.env.JWT_SECRET || 'CONFIGURAR');
    
    fs.writeFileSync(this.envFile, productionContent);
    console.log('‚úÖ Arquivo .env.production criado!');
    return true;
  }

  checkDatabaseConnection() {
    console.log('\nüóÑÔ∏è  Verificando conex√£o com banco de dados...\n');
    
    try {
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient();
      
      // Teste simples de conex√£o
      prisma.$connect().then(() => {
        console.log('‚úÖ Conex√£o com banco de dados OK!');
        prisma.$disconnect();
      }).catch((error) => {
        console.log('‚ùå Erro na conex√£o com banco:', error.message);
      });
      
    } catch (error) {
      console.log('‚ùå Erro ao testar banco:', error.message);
    }
  }

  checkVizzionPayConfig() {
    console.log('\nüí≥ Verificando configura√ß√£o VizzionPay...\n');
    
    const config = {
      apiKey: process.env.VIZZION_API_KEY,
      publicKey: process.env.VIZZION_PUBLIC_KEY,
      secretKey: process.env.VIZZION_SECRET_KEY,
      webhookSecret: process.env.VIZZION_WEBHOOK_SECRET,
      pixKey: process.env.VIZZION_PIX_KEY,
      pixKeyType: process.env.VIZZION_PIX_KEY_TYPE
    };
    
    console.log('üìã Configura√ß√£o atual:');
    console.log(`API Key: ${config.apiKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`Public Key: ${config.publicKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`Secret Key: ${config.secretKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`Webhook Secret: ${config.webhookSecret ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`PIX Key: ${config.pixKey ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
    console.log(`PIX Key Type: ${config.pixKeyType || 'email'}`);
  }

  generateDeploymentChecklist() {
    console.log('\nüìã CHECKLIST DE DEPLOY EM PRODU√á√ÉO\n');
    console.log('=' * 50);
    
    const checklist = [
      '‚úÖ Vari√°veis de ambiente configuradas',
      '‚úÖ Banco de dados conectado',
      '‚úÖ VizzionPay configurado',
      '‚úÖ Testes de saque realizados',
      '‚úÖ Webhooks configurados',
      '‚úÖ Monitoramento ativo',
      '‚úÖ Backup do banco realizado',
      '‚úÖ Logs configurados',
      '‚úÖ Rate limiting ativo',
      '‚úÖ SSL/HTTPS configurado'
    ];
    
    checklist.forEach(item => console.log(item));
    
    console.log('\nüöÄ COMANDOS PARA DEPLOY:');
    console.log('1. npm run build');
    console.log('2. npm run start:production');
    console.log('3. Verificar logs: tail -f logs/app.log');
    console.log('4. Testar endpoints: curl https://slotbox-api.onrender.com/api/health');
  }

  async runDeploymentCheck() {
    console.log('üöÄ VERIFICA√á√ÉO DE DEPLOY EM PRODU√á√ÉO\n');
    console.log('=' * 50);
    
    const envOk = this.checkEnvironmentVariables();
    if (!envOk) {
      console.log('\n‚ùå Deploy n√£o pode prosseguir. Configure as vari√°veis de ambiente primeiro.');
      return;
    }
    
    this.createProductionEnv();
    this.checkDatabaseConnection();
    this.checkVizzionPayConfig();
    this.generateDeploymentChecklist();
    
    console.log('\nüéâ VERIFICA√á√ÉO CONCLU√çDA!');
    console.log('üìù Sistema pronto para deploy em produ√ß√£o.');
  }
}

// Executar verifica√ß√£o
if (require.main === module) {
  const deployer = new ProductionDeployer();
  deployer.runDeploymentCheck().catch(console.error);
}

module.exports = ProductionDeployer;
