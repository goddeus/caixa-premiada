const axios = require('axios');
require('dotenv').config();

const BASE_URL = process.env.BASE_URL || 'http://localhost:3001';

async function testPixQRCode() {
  console.log('üß™ Testando gera√ß√£o de QR Code PIX...\n');

  try {
    // 1. Fazer login com usu√°rio existente
    console.log('1Ô∏è‚É£ Fazendo login...');
    const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
      email: 'lucas.almeida@test.com',
      senha: '123456'
    });
    
    const authToken = loginResponse.data.token;
    console.log('‚úÖ Login realizado:', loginResponse.data.user.nome);

    // 2. Testar dep√≥sito PIX
    console.log('\n2Ô∏è‚É£ Testando dep√≥sito PIX...');
    const pixDepositResponse = await axios.post(`${BASE_URL}/api/payments/deposit/pix`, {
      valor: 50.00
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Resposta do dep√≥sito PIX:');
    console.log('   - Payment ID:', pixDepositResponse.data.payment_id);
    console.log('   - Valor:', pixDepositResponse.data.valor);
    console.log('   - QR Code presente:', pixDepositResponse.data.qr_code ? 'SIM' : 'N√ÉO');
    console.log('   - PIX Copy Paste presente:', pixDepositResponse.data.pix_copy_paste ? 'SIM' : 'N√ÉO');
    console.log('   - Expira em:', pixDepositResponse.data.expires_at);
    
    if (pixDepositResponse.data.qr_code) {
      console.log('\nüéâ QR Code PIX gerado com sucesso!');
      console.log('üì± QR Code (base64):', pixDepositResponse.data.qr_code.substring(0, 50) + '...');
    } else {
      console.log('\n‚ùå PROBLEMA: QR Code PIX n√£o foi gerado!');
    }

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.response?.data || error.message);
    if (error.response?.data) {
      console.error('   Detalhes:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

// Executar teste
testPixQRCode();
