const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function generateFinalReport() {
  console.log('üìä RELAT√ìRIO FINAL DAS CAIXAS E PR√äMIOS');
  console.log('=' * 80);
  console.log('');

  try {
    // 1. Buscar todas as caixas
    const cases = await prisma.case.findMany({
      orderBy: { nome: 'asc' }
    });

    console.log(`üì¶ Total de caixas: ${cases.length}`);
    console.log('');

    // 2. Para cada caixa, listar pr√™mios
    for (const caseItem of cases) {
      console.log(`üéÅ CAIXA: ${caseItem.nome}`);
      console.log(`üí∞ Pre√ßo: R$ ${caseItem.preco}`);
      console.log(`üñºÔ∏è Imagem: ${caseItem.imagem_url || 'N/A'}`);
      console.log('-'.repeat(60));

      // Buscar pr√™mios da caixa
      const prizes = await prisma.prize.findMany({
        where: { case_id: caseItem.id },
        orderBy: { valor_centavos: 'asc' }
      });

      console.log(`üìã Total de pr√™mios: ${prizes.length}`);
      console.log('');

      // Agrupar por tipo
      const cashPrizes = prizes.filter(p => p.tipo === 'cash');
      const productPrizes = prizes.filter(p => p.tipo === 'produto');
      const illustrativePrizes = prizes.filter(p => p.tipo === 'ilustrativo');

      // Pr√™mios em dinheiro
      if (cashPrizes.length > 0) {
        console.log('üí∞ PR√äMIOS EM DINHEIRO:');
        cashPrizes.forEach((prize, index) => {
          const valorFormatado = `R$ ${(prize.valor_centavos / 100).toFixed(2).replace('.', ',')}`;
          console.log(`   ${index + 1}. ${prize.nome} ‚Üí ${valorFormatado}`);
        });
        console.log('');
      }

      // Pr√™mios produtos
      if (productPrizes.length > 0) {
        console.log('üéÅ PR√äMIOS PRODUTOS:');
        productPrizes.forEach((prize, index) => {
          const valorFormatado = `R$ ${(prize.valor_centavos / 100).toFixed(2).replace('.', ',')}`;
          console.log(`   ${index + 1}. ${prize.nome} ‚Üí ${valorFormatado}`);
        });
        console.log('');
      }

      // Pr√™mios ilustrativos
      if (illustrativePrizes.length > 0) {
        console.log('üñºÔ∏è PR√äMIOS ILUSTRATIVOS (n√£o sorte√°veis):');
        illustrativePrizes.forEach((prize, index) => {
          const valorFormatado = `R$ ${(prize.valor_centavos / 100).toFixed(2).replace('.', ',')}`;
          console.log(`   ${index + 1}. ${prize.nome} ‚Üí ${valorFormatado}`);
        });
        console.log('');
      }

      // Estat√≠sticas da caixa
      const totalValor = prizes.reduce((sum, prize) => sum + prize.valor_centavos, 0);
      const valorMedio = prizes.length > 0 ? totalValor / prizes.length : 0;
      const valorMaximo = Math.max(...prizes.map(p => p.valor_centavos));
      const valorMinimo = Math.min(...prizes.map(p => p.valor_centavos));

      console.log('üìä ESTAT√çSTICAS:');
      console.log(`   üí∞ Valor total: R$ ${(totalValor / 100).toFixed(2).replace('.', ',')}`);
      console.log(`   üìà Valor m√©dio: R$ ${(valorMedio / 100).toFixed(2).replace('.', ',')}`);
      console.log(`   üîù Valor m√°ximo: R$ ${(valorMaximo / 100).toFixed(2).replace('.', ',')}`);
      console.log(`   üîª Valor m√≠nimo: R$ ${(valorMinimo / 100).toFixed(2).replace('.', ',')}`);
      console.log(`   üéØ Pr√™mios ativos: ${prizes.filter(p => p.ativo).length}/${prizes.length}`);
      console.log('');

      console.log('=' * 80);
      console.log('');
    }

    // 3. Resumo geral
    console.log('üìà RESUMO GERAL:');
    console.log('-'.repeat(40));
    
    const allPrizes = await prisma.prize.findMany();
    const totalPrizes = allPrizes.length;
    const totalCashPrizes = allPrizes.filter(p => p.tipo === 'cash').length;
    const totalProductPrizes = allPrizes.filter(p => p.tipo === 'produto').length;
    const totalIllustrativePrizes = allPrizes.filter(p => p.tipo === 'ilustrativo').length;
    const activePrizes = allPrizes.filter(p => p.ativo).length;

    console.log(`üì¶ Total de caixas: ${cases.length}`);
    console.log(`üéÅ Total de pr√™mios: ${totalPrizes}`);
    console.log(`üí∞ Pr√™mios em dinheiro: ${totalCashPrizes}`);
    console.log(`üéÅ Pr√™mios produtos: ${totalProductPrizes}`);
    console.log(`üñºÔ∏è Pr√™mios ilustrativos: ${totalIllustrativePrizes}`);
    console.log(`‚úÖ Pr√™mios ativos: ${activePrizes}`);
    console.log(`‚ùå Pr√™mios inativos: ${totalPrizes - activePrizes}`);

    // 4. Valores por faixa
    console.log('');
    console.log('üí∞ DISTRIBUI√á√ÉO POR FAIXA DE VALOR:');
    console.log('-'.repeat(40));
    
    const valueRanges = [
      { min: 0, max: 1000, label: 'R$ 0,01 - R$ 10,00' },
      { min: 1001, max: 10000, label: 'R$ 10,01 - R$ 100,00' },
      { min: 10001, max: 100000, label: 'R$ 100,01 - R$ 1.000,00' },
      { min: 100001, max: 1000000, label: 'R$ 1.000,01 - R$ 10.000,00' },
      { min: 1000001, max: Infinity, label: 'Acima de R$ 10.000,00' }
    ];

    valueRanges.forEach(range => {
      const count = allPrizes.filter(p => p.valor_centavos >= range.min && p.valor_centavos <= range.max).length;
      const percentage = totalPrizes > 0 ? ((count / totalPrizes) * 100).toFixed(1) : 0;
      console.log(`   ${range.label}: ${count} pr√™mios (${percentage}%)`);
    });

  } catch (error) {
    console.error('‚ùå Erro durante gera√ß√£o do relat√≥rio:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar relat√≥rio
generateFinalReport().then(() => {
  console.log('\nüéâ RELAT√ìRIO FINALIZADO!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå Erro fatal:', error);
  process.exit(1);
});
