#!/usr/bin/env node

/**
 * Script para testar a conectividade da API
 * Verifica se o servidor est√° respondendo e se o CORS est√° configurado corretamente
 */

const https = require('https');
const http = require('http');

const API_URL = 'https://slotbox-api.onrender.com';
const FRONTEND_URL = 'https://slotbox.shop';

console.log('üîç Testando conectividade da API...\n');

// Fun√ß√£o para fazer requisi√ß√£o HTTP/HTTPS
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https');
    const client = isHttps ? https : http;
    
    const requestOptions = {
      method: options.method || 'GET',
      headers: {
        'Origin': FRONTEND_URL,
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        ...options.headers
      },
      timeout: 10000 // 10 segundos
    };

    const req = client.request(url, requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          data: data,
          corsHeaders: {
            'Access-Control-Allow-Origin': res.headers['access-control-allow-origin'],
            'Access-Control-Allow-Methods': res.headers['access-control-allow-methods'],
            'Access-Control-Allow-Headers': res.headers['access-control-allow-headers'],
            'Access-Control-Allow-Credentials': res.headers['access-control-allow-credentials']
          }
        });
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.on('timeout', () => {
      req.destroy();
      reject(new Error('Timeout'));
    });

    req.end();
  });
}

// Teste 1: Health Check
async function testHealthCheck() {
  console.log('1Ô∏è‚É£ Testando Health Check...');
  try {
    const response = await makeRequest(`${API_URL}/api/health`);
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    
    if (response.statusCode === 200) {
      console.log('   üéâ API est√° funcionando!');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è  API retornou status inesperado');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Teste 2: CORS Preflight
async function testCorsPreflight() {
  console.log('\n2Ô∏è‚É£ Testando CORS Preflight...');
  try {
    const response = await makeRequest(`${API_URL}/api/cases`, {
      method: 'OPTIONS',
      headers: {
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type, Authorization'
      }
    });
    
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    
    if (response.statusCode === 200 && response.corsHeaders['Access-Control-Allow-Origin']) {
      console.log('   üéâ CORS Preflight funcionando!');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è  CORS Preflight com problemas');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Teste 3: Requisi√ß√£o GET real
async function testRealRequest() {
  console.log('\n3Ô∏è‚É£ Testando requisi√ß√£o GET real...');
  try {
    const response = await makeRequest(`${API_URL}/api/cases`);
    console.log(`   ‚úÖ Status: ${response.statusCode}`);
    console.log(`   üìä CORS Headers:`, response.corsHeaders);
    
    if (response.statusCode === 200) {
      console.log('   üéâ Requisi√ß√£o GET funcionando!');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è  Requisi√ß√£o GET com problemas');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
    return false;
  }
}

// Teste 4: Verificar se servidor est√° "dormindo"
async function testServerWakeUp() {
  console.log('\n4Ô∏è‚É£ Testando se servidor est√° "acordado"...');
  try {
    const startTime = Date.now();
    const response = await makeRequest(`${API_URL}/api/health`);
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    console.log(`   ‚è±Ô∏è  Tempo de resposta: ${responseTime}ms`);
    
    if (responseTime > 5000) {
      console.log('   üêå Servidor pode estar "dormindo" (Render Free Tier)');
    } else if (responseTime > 2000) {
      console.log('   ‚ö° Servidor est√° lento mas funcionando');
    } else {
      console.log('   üöÄ Servidor est√° r√°pido!');
    }
    
    return true;
  } catch (error) {
    console.log(`   ‚ùå Servidor n√£o est√° respondendo: ${error.message}`);
    return false;
  }
}

// Executar todos os testes
async function runAllTests() {
  console.log('üöÄ Iniciando testes de conectividade...\n');
  
  const results = {
    healthCheck: await testHealthCheck(),
    corsPreflight: await testCorsPreflight(),
    realRequest: await testRealRequest(),
    serverWakeUp: await testServerWakeUp()
  };
  
  console.log('\nüìä RESUMO DOS TESTES:');
  console.log('====================');
  console.log(`Health Check: ${results.healthCheck ? '‚úÖ' : '‚ùå'}`);
  console.log(`CORS Preflight: ${results.corsPreflight ? '‚úÖ' : '‚ùå'}`);
  console.log(`Requisi√ß√£o GET: ${results.realRequest ? '‚úÖ' : '‚ùå'}`);
  console.log(`Servidor Ativo: ${results.serverWakeUp ? '‚úÖ' : '‚ùå'}`);
  
  const allPassed = Object.values(results).every(result => result === true);
  
  if (allPassed) {
    console.log('\nüéâ TODOS OS TESTES PASSARAM!');
    console.log('A API est√° funcionando corretamente.');
  } else {
    console.log('\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM!');
    console.log('Verifique os problemas acima.');
    
    if (!results.healthCheck) {
      console.log('\nüí° SOLU√á√ïES SUGERIDAS:');
      console.log('1. Verifique se o servidor est√° rodando no Render.com');
      console.log('2. Aguarde alguns minutos (Render Free Tier pode estar "dormindo")');
      console.log('3. Verifique os logs do servidor no Render.com');
      console.log('4. Considere fazer upgrade para um plano pago se necess√°rio');
    }
  }
  
  return allPassed;
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = { runAllTests, makeRequest };
