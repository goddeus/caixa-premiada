/**
 * Script Simplificado de Auditoria Final
 * Executa os testes principais e gera relat√≥rio
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class SimplifiedAudit {
  constructor() {
    this.startTime = Date.now();
    this.results = {
      timestamp: new Date().toISOString(),
      tests: {},
      summary: {
        total: 0,
        passed: 0,
        failed: 0
      }
    };
    this.reportDir = path.join(__dirname, '../reports');
  }

  /**
   * Executar auditoria simplificada
   */
  async runAudit() {
    console.log('üöÄ EXECUTANDO AUDITORIA SIMPLIFICADA DO SISTEMA SLOTBOX');
    console.log('=' .repeat(80));
    console.log(`üìÖ Data: ${new Date().toLocaleString()}`);
    console.log(`üìÅ Diret√≥rio: ${process.cwd()}`);
    console.log('=' .repeat(80) + '\n');

    try {
      // Criar diret√≥rio de relat√≥rios
      if (!fs.existsSync(this.reportDir)) {
        fs.mkdirSync(this.reportDir, { recursive: true });
      }

      // 1. Teste de rotas
      await this.testRoutes();

      // 2. Teste de build do frontend
      await this.testFrontendBuild();

      // 3. Teste de depend√™ncias
      await this.testDependencies();

      // 4. Teste de configura√ß√£o
      await this.testConfiguration();

      // 5. Teste de arquivos cr√≠ticos
      await this.testCriticalFiles();

      // Gerar relat√≥rio final
      this.generateReport();

      // Verificar se auditoria foi bem-sucedida
      if (this.results.summary.failed > 0) {
        console.log('\n‚ùå AUDITORIA FALHOU!');
        console.log(`   ${this.results.summary.failed} teste(s) falharam`);
        process.exit(1);
      } else {
        console.log('\n‚úÖ AUDITORIA CONCLU√çDA COM SUCESSO!');
        console.log('   Sistema pronto para produ√ß√£o');
        process.exit(0);
      }

    } catch (error) {
      console.error('\nüí• ERRO CR√çTICO DURANTE AUDITORIA:', error);
      this.generateReport();
      process.exit(1);
    }
  }

  /**
   * Testar rotas
   */
  async testRoutes() {
    console.log('üõ£Ô∏è Testando rotas da API...');
    
    try {
      const output = execSync('node scripts/test-routes.js', { 
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      this.addTestResult('routes', 'api', true, 'Teste de rotas passou');
      console.log('  ‚úÖ Teste de rotas passou');
      
    } catch (error) {
      this.addTestResult('routes', 'api', false, error.message);
      console.log('  ‚ùå Teste de rotas falhou:', error.message);
    }
  }

  /**
   * Testar build do frontend
   */
  async testFrontendBuild() {
    console.log('üé® Testando build do frontend...');
    
    try {
      const output = execSync('cd frontend && npm run build', { 
        encoding: 'utf8',
        stdio: 'pipe'
      });
      
      // Verificar se diret√≥rio dist foi criado
      const distDir = path.join(__dirname, '../frontend/dist');
      if (fs.existsSync(distDir)) {
        this.addTestResult('frontend', 'build', true, 'Build do frontend passou');
        console.log('  ‚úÖ Build do frontend passou');
      } else {
        throw new Error('Diret√≥rio dist n√£o foi criado');
      }
      
    } catch (error) {
      this.addTestResult('frontend', 'build', false, error.message);
      console.log('  ‚ùå Build do frontend falhou:', error.message);
    }
  }

  /**
   * Testar depend√™ncias
   */
  async testDependencies() {
    console.log('üì¶ Testando depend√™ncias...');
    
    try {
      // Verificar package.json do backend
      const backendPackage = path.join(__dirname, '../backend/package.json');
      if (fs.existsSync(backendPackage)) {
        this.addTestResult('dependencies', 'backend', true, 'Package.json do backend existe');
        console.log('  ‚úÖ Package.json do backend existe');
      } else {
        throw new Error('Package.json do backend n√£o encontrado');
      }
      
      // Verificar package.json do frontend
      const frontendPackage = path.join(__dirname, '../frontend/package.json');
      if (fs.existsSync(frontendPackage)) {
        this.addTestResult('dependencies', 'frontend', true, 'Package.json do frontend existe');
        console.log('  ‚úÖ Package.json do frontend existe');
      } else {
        throw new Error('Package.json do frontend n√£o encontrado');
      }
      
    } catch (error) {
      this.addTestResult('dependencies', 'backend', false, error.message);
      console.log('  ‚ùå Teste de depend√™ncias falhou:', error.message);
    }
  }

  /**
   * Testar configura√ß√£o
   */
  async testConfiguration() {
    console.log('‚öôÔ∏è Testando configura√ß√£o...');
    
    try {
      // Verificar arquivo de configura√ß√£o do backend
      const backendEnv = path.join(__dirname, '../backend/env.production');
      if (fs.existsSync(backendEnv)) {
        this.addTestResult('config', 'backend', true, 'Configura√ß√£o do backend existe');
        console.log('  ‚úÖ Configura√ß√£o do backend existe');
      } else {
        throw new Error('Configura√ß√£o do backend n√£o encontrada');
      }
      
      // Verificar arquivo de configura√ß√£o do frontend
      const frontendEnv = path.join(__dirname, '../frontend/.env.production');
      if (fs.existsSync(frontendEnv)) {
        this.addTestResult('config', 'frontend', true, 'Configura√ß√£o do frontend existe');
        console.log('  ‚úÖ Configura√ß√£o do frontend existe');
      } else {
        throw new Error('Configura√ß√£o do frontend n√£o encontrada');
      }
      
    } catch (error) {
      this.addTestResult('config', 'backend', false, error.message);
      console.log('  ‚ùå Teste de configura√ß√£o falhou:', error.message);
    }
  }

  /**
   * Testar arquivos cr√≠ticos
   */
  async testCriticalFiles() {
    console.log('üìÅ Testando arquivos cr√≠ticos...');
    
    try {
      const criticalFiles = [
        '../backend/src/server.js',
        '../frontend/src/App.jsx',
        '../backend/prisma/schema.prisma',
        '../frontend/package.json',
        '../backend/package.json'
      ];
      
      let allFilesExist = true;
      
      for (const file of criticalFiles) {
        const filePath = path.join(__dirname, file);
        if (fs.existsSync(filePath)) {
          console.log(`  ‚úÖ ${file} existe`);
        } else {
          console.log(`  ‚ùå ${file} n√£o encontrado`);
          allFilesExist = false;
        }
      }
      
      if (allFilesExist) {
        this.addTestResult('files', 'critical', true, 'Todos os arquivos cr√≠ticos existem');
        console.log('  ‚úÖ Todos os arquivos cr√≠ticos existem');
      } else {
        throw new Error('Alguns arquivos cr√≠ticos n√£o foram encontrados');
      }
      
    } catch (error) {
      this.addTestResult('files', 'critical', false, error.message);
      console.log('  ‚ùå Teste de arquivos cr√≠ticos falhou:', error.message);
    }
  }

  /**
   * Adicionar resultado de teste
   */
  addTestResult(category, test, passed, message) {
    if (!this.results.tests[category]) {
      this.results.tests[category] = {};
    }
    
    this.results.tests[category][test] = {
      passed,
      message,
      timestamp: new Date().toISOString()
    };
    
    this.results.summary.total++;
    if (passed) {
      this.results.summary.passed++;
    } else {
      this.results.summary.failed++;
    }
  }

  /**
   * Gerar relat√≥rio final
   */
  generateReport() {
    console.log('\nüìã Gerando relat√≥rio final...');
    
    const duration = Date.now() - this.startTime;
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    
    // Calcular estat√≠sticas
    const totalTests = this.results.summary.total;
    const passedTests = this.results.summary.passed;
    const failedTests = this.results.summary.failed;
    const successRate = totalTests > 0 ? (passedTests / totalTests * 100).toFixed(2) : 0;
    
    // Adicionar estat√≠sticas ao relat√≥rio
    this.results.summary.successRate = parseFloat(successRate);
    this.results.summary.duration = duration;
    
    // Salvar relat√≥rio JSON
    const reportFile = path.join(this.reportDir, `simplified-audit-report-${timestamp}.json`);
    fs.writeFileSync(reportFile, JSON.stringify(this.results, null, 2));
    
    // Gerar relat√≥rio em markdown
    const markdownReport = this.generateMarkdownReport();
    const markdownFile = path.join(this.reportDir, `simplified-audit-report-${timestamp}.md`);
    fs.writeFileSync(markdownFile, markdownReport);
    
    console.log('\nüìä RELAT√ìRIO FINAL DA AUDITORIA:');
    console.log('=' .repeat(80));
    console.log(`üìÖ Data: ${new Date().toLocaleString()}`);
    console.log(`üìä Total de testes: ${totalTests}`);
    console.log(`‚úÖ Testes passaram: ${passedTests}`);
    console.log(`‚ùå Testes falharam: ${failedTests}`);
    console.log(`üìà Taxa de sucesso: ${successRate}%`);
    console.log(`‚è±Ô∏è Dura√ß√£o total: ${(duration / 1000).toFixed(2)}s`);
    
    console.log('\nüìÅ Relat√≥rios gerados:');
    console.log(`   ‚Ä¢ JSON: ${reportFile}`);
    console.log(`   ‚Ä¢ Markdown: ${markdownFile}`);
    
    if (failedTests > 0) {
      console.log('\n‚ùå TESTES QUE FALHARAM:');
      Object.entries(this.results.tests).forEach(([category, tests]) => {
        Object.entries(tests).forEach(([test, result]) => {
          if (!result.passed) {
            console.log(`   ‚Ä¢ ${category}/${test}: ${result.message}`);
          }
        });
      });
    }
    
    console.log('\n' + '=' .repeat(80));
  }

  /**
   * Gerar relat√≥rio em markdown
   */
  generateMarkdownReport() {
    const timestamp = new Date().toLocaleString();
    const totalTests = this.results.summary.total;
    const passedTests = this.results.summary.passed;
    const failedTests = this.results.summary.failed;
    const successRate = this.results.summary.successRate;
    const duration = this.results.summary.duration;
    
    let markdown = `# Relat√≥rio da Auditoria Simplificada - SlotBox\n\n`;
    markdown += `**Data:** ${timestamp}\n`;
    markdown += `**Dura√ß√£o:** ${(duration / 1000).toFixed(2)}s\n\n`;
    
    markdown += `## Resumo Executivo\n\n`;
    markdown += `| M√©trica | Valor |\n`;
    markdown += `|---------|-------|\n`;
    markdown += `| Total de Testes | ${totalTests} |\n`;
    markdown += `| Testes Passaram | ${passedTests} |\n`;
    markdown += `| Testes Falharam | ${failedTests} |\n`;
    markdown += `| Taxa de Sucesso | ${successRate}% |\n\n`;
    
    markdown += `## Detalhes dos Testes\n\n`;
    
    Object.entries(this.results.tests).forEach(([category, tests]) => {
      markdown += `### ${category.toUpperCase()}\n\n`;
      
      Object.entries(tests).forEach(([test, result]) => {
        const status = result.passed ? '‚úÖ' : '‚ùå';
        markdown += `- ${status} **${test}**: ${result.message}\n`;
      });
      
      markdown += '\n';
    });
    
    if (failedTests > 0) {
      markdown += `## Testes que Falharam\n\n`;
      markdown += `Os seguintes testes falharam e precisam de aten√ß√£o:\n\n`;
      
      Object.entries(this.results.tests).forEach(([category, tests]) => {
        Object.entries(tests).forEach(([test, result]) => {
          if (!result.passed) {
            markdown += `- **${category}/${test}**: ${result.message}\n`;
          }
        });
      });
    }
    
    markdown += `\n## Conclus√£o\n\n`;
    
    if (failedTests === 0) {
      markdown += `‚úÖ **Auditoria conclu√≠da com sucesso!** O sistema est√° pronto para produ√ß√£o.\n\n`;
      markdown += `### Pr√≥ximos Passos:\n`;
      markdown += `1. Revisar o PR gerado\n`;
      markdown += `2. Aprovar as mudan√ßas\n`;
      markdown += `3. Fazer deploy para produ√ß√£o\n`;
      markdown += `4. Monitorar o sistema ap√≥s deploy\n`;
    } else {
      markdown += `‚ùå **${failedTests} teste(s) falharam.** Corrija os problemas antes de prosseguir para produ√ß√£o.\n\n`;
      markdown += `### A√ß√µes Necess√°rias:\n`;
      markdown += `1. Corrigir os testes que falharam\n`;
      markdown += `2. Re-executar a auditoria\n`;
      markdown += `3. Verificar se todos os testes passam\n`;
      markdown += `4. S√≥ ent√£o prosseguir para produ√ß√£o\n`;
    }
    
    return markdown;
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const audit = new SimplifiedAudit();
  audit.runAudit();
}

module.exports = SimplifiedAudit;
