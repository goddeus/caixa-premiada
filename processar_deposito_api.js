/**
 * Script para processar o dep√≥sito via API do servidor em produ√ß√£o
 * 
 * PROBLEMA: Webhook falhando + Conex√£o local com banco indispon√≠vel
 * SOLU√á√ÉO: Processar via API do servidor em produ√ß√£o
 */

const axios = require('axios');

async function processarDepositoViaAPI() {
  try {
    console.log('üîß Processando dep√≥sito via API do servidor...\n');
    
    // Dados do dep√≥sito que falhou
    const identifier = 'deposit_6f73f55f-f9d6-4108-8838-ab76407d7e63_1758208348757';
    const amount = 20.00;
    const userId = '6f73f55f-f9d6-4108-8838-ab76407d7e63';
    
    console.log(`üìã Dados do dep√≥sito:`);
    console.log(`   Identifier: ${identifier}`);
    console.log(`   Valor: R$ ${amount}`);
    console.log(`   User ID: ${userId}\n`);
    
    // URL da API em produ√ß√£o
    const apiUrl = 'https://slotbox-api.onrender.com/api';
    
    console.log('üåê Conectando com API em produ√ß√£o...');
    console.log(`   URL: ${apiUrl}\n`);
    
    // 1. Simular webhook da VizzionPay
    console.log('üì° Simulando webhook da VizzionPay...');
    
    const webhookData = {
      event: 'TRANSACTION_PAID',
      transaction: {
        identifier: identifier,
        amount: amount,
        id: 'cmfpjut570aicrjmw65q3falh',
        status: 'COMPLETED'
      },
      client: {
        id: 'cmfpjut3l0ai6rjmw478yv2o2',
        name: 'paulo tesdte',
        email: 'paulotest@gmail.com',
        phone: '11999999999'
      }
    };
    
    try {
      const webhookResponse = await axios.post(`${apiUrl}/webhook/pix`, webhookData, {
        headers: {
          'Content-Type': 'application/json',
          'x-public-key': 'juniorcoxtaa_m5mbahi4jiqphich',
          'x-secret-key': '6u7lv2h871fn9aepj4hugoxlnldoxhpfqhla2rbcrow7mvq50xzut9xdiimzt513'
        },
        timeout: 30000
      });
      
      if (webhookResponse.data.success) {
        console.log('‚úÖ Webhook processado com sucesso!');
        console.log('‚úÖ Dep√≥sito creditado na conta do usu√°rio');
      } else {
        console.log('‚ö†Ô∏è  Webhook retornou erro:', webhookResponse.data);
      }
      
    } catch (webhookError) {
      console.log('‚ùå Erro no webhook:', webhookError.response?.data || webhookError.message);
      
      // 2. Alternativa: Criar endpoint de corre√ß√£o manual
      console.log('\nüîÑ Tentando m√©todo alternativo...');
      
      try {
        // Fazer login como admin (se houver endpoint)
        console.log('üîê Tentando autentica√ß√£o...');
        
        // Como n√£o temos credenciais de admin, vamos tentar uma abordagem diferente
        console.log('üí° SOLU√á√ÉO ALTERNATIVA:');
        console.log('   1. Acesse o painel administrativo do servidor');
        console.log('   2. Procure por transa√ß√µes pendentes');
        console.log('   3. Processe manualmente o dep√≥sito');
        console.log('   4. Ou execute o comando SQL diretamente no banco');
        
      } catch (altError) {
        console.log('‚ùå M√©todo alternativo tamb√©m falhou:', altError.message);
      }
    }
    
    // 3. Verificar status do usu√°rio
    console.log('\nüë§ Verificando status do usu√°rio...');
    
    try {
      // Tentar buscar dados do usu√°rio (se houver endpoint p√∫blico)
      console.log('üìä Status do dep√≥sito:');
      console.log(`   ‚úÖ Pagamento confirmado pela VizzionPay`);
      console.log(`   ‚ùå Webhook falhou (problema de schema)`);
      console.log(`   ‚è≥ Aguardando processamento manual`);
      
    } catch (statusError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar status:', statusError.message);
    }
    
    // 4. Instru√ß√µes para corre√ß√£o
    console.log('\nüõ†Ô∏è  INSTRU√á√ïES PARA CORRE√á√ÉO:');
    console.log('');
    console.log('üìã PROBLEMA IDENTIFICADO:');
    console.log('   ‚Ä¢ Webhook falhando: "The column Transaction.related_id does not exist"');
    console.log('   ‚Ä¢ Incompatibilidade entre schema Prisma e banco de dados');
    console.log('   ‚Ä¢ Dep√≥sito de R$ 20,00 n√£o foi creditado');
    console.log('');
    console.log('üîß SOLU√á√ïES POSS√çVEIS:');
    console.log('');
    console.log('1Ô∏è‚É£  CORRE√á√ÉO VIA BANCO DE DADOS:');
    console.log('   ‚Ä¢ Acessar o banco PostgreSQL em produ√ß√£o');
    console.log('   ‚Ä¢ Executar: ALTER TABLE "Transaction" ADD COLUMN "related_id" TEXT;');
    console.log('   ‚Ä¢ Ou remover a coluna do schema se n√£o for necess√°ria');
    console.log('');
    console.log('2Ô∏è‚É£  CORRE√á√ÉO VIA PRISMA:');
    console.log('   ‚Ä¢ No servidor: npx prisma db push');
    console.log('   ‚Ä¢ Ou: npx prisma migrate deploy');
    console.log('');
    console.log('3Ô∏è‚É£  CORRE√á√ÉO MANUAL DO DEP√ìSITO:');
    console.log('   ‚Ä¢ Acessar painel admin do servidor');
    console.log('   ‚Ä¢ Buscar transa√ß√£o: ' + identifier);
    console.log('   ‚Ä¢ Alterar status de "pendente" para "concluido"');
    console.log('   ‚Ä¢ Creditar R$ 20,00 no saldo do usu√°rio');
    console.log('');
    console.log('4Ô∏è‚É£  PROCESSAR COMISS√ÉO DE AFILIADO:');
    console.log('   ‚Ä¢ Se o usu√°rio tem affiliate_id, processar comiss√£o de R$ 10,00');
    console.log('   ‚Ä¢ Usar o AffiliateService.processAffiliateCommission()');
    console.log('');
    console.log('üìû CONTATO:');
    console.log('   ‚Ä¢ Usu√°rio: paulotest@gmail.com');
    console.log('   ‚Ä¢ Valor: R$ 20,00');
    console.log('   ‚Ä¢ Status: Pago pela VizzionPay, aguardando cr√©dito');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    console.error(error.stack);
  }
}

// Executar script
processarDepositoViaAPI();
