name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'
  API_URL: 'https://slotbox-api.onrender.com'
  FRONTEND_URL: 'https://slotbox.shop'

jobs:
  # Job de preparação
  prepare:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      environment: ${{ steps.check.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi

  # Job de backup
  backup:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci

      - name: Backup database
        run: |
          cd backend
          node ../scripts/backup-database.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Upload backup artifact
        uses: actions/upload-artifact@v3
        with:
          name: database-backup
          path: backups/
          retention-days: 30

  # Job de testes
  test:
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should-deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend
          npm ci
          cd ../tests
          npm ci

      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed

      - name: Run tests
        run: |
          cd tests
          npm run test:ci
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test

  # Job de build
  build:
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: needs.prepare.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          VITE_API_URL: ${{ env.API_URL }}/api

      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Job de deploy
  deploy:
    runs-on: ubuntu-latest
    needs: [prepare, backup, test, build]
    if: needs.prepare.outputs.should-deploy == 'true'
    environment: ${{ needs.prepare.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run database migrations
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run audit seed
        run: |
          cd backend
          node ../scripts/apply-migrations-staging.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy backend to Render
        run: |
          echo "Deploying backend to Render..."
          curl -X POST "${{ secrets.RENDER_DEPLOY_WEBHOOK }}"
        continue-on-error: true

      - name: Deploy frontend to Hostinger
        run: |
          echo "Deploying frontend to Hostinger..."
          # Upload via FTP
          lftp -c "
            set ftp:ssl-allow no;
            open -u ${{ secrets.HOSTINGER_FTP_USER }},${{ secrets.HOSTINGER_FTP_PASS }} ${{ secrets.HOSTINGER_FTP_HOST }};
            lcd frontend/dist;
            cd public_html;
            mirror -R . . --delete --verbose;
            quit
          "
        continue-on-error: true

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60

  # Job de verificação
  verify:
    runs-on: ubuntu-latest
    needs: [prepare, deploy]
    if: needs.prepare.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run smoke tests
        run: |
          # Test API health
          curl -f "${{ env.API_URL }}/api/health" || exit 1
          
          # Test API cases endpoint
          curl -f "${{ env.API_URL }}/api/cases" || exit 1
          
          # Test frontend
          curl -f "${{ env.FRONTEND_URL }}" || exit 1
          
          echo "All smoke tests passed!"

      - name: Run performance tests
        run: |
          # Test API response time
          api_time=$(curl -s -o /dev/null -w "%{time_total}" "${{ env.API_URL }}/api/health")
          echo "API response time: ${api_time}s"
          
          # Test frontend response time
          frontend_time=$(curl -s -o /dev/null -w "%{time_total}" "${{ env.FRONTEND_URL }}")
          echo "Frontend response time: ${frontend_time}s"
          
          # Check if response times are acceptable
          if (( $(echo "$api_time > 5" | bc -l) )); then
            echo "API response time too slow: ${api_time}s"
            exit 1
          fi
          
          if (( $(echo "$frontend_time > 10" | bc -l) )); then
            echo "Frontend response time too slow: ${frontend_time}s"
            exit 1
          fi

  # Job de notificação
  notify:
    runs-on: ubuntu-latest
    needs: [prepare, verify]
    if: always()
    steps:
      - name: Notify success
        if: needs.verify.result == 'success'
        run: |
          echo "✅ Deploy to ${{ needs.prepare.outputs.environment }} successful!"
          # Aqui você adicionaria notificações (Slack, Discord, etc.)

      - name: Notify failure
        if: needs.verify.result == 'failure'
        run: |
          echo "❌ Deploy to ${{ needs.prepare.outputs.environment }} failed!"
          # Aqui você adicionaria notificações de erro

      - name: Create deployment tag
        if: needs.verify.result == 'success'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "deploy-$(date +%Y%m%d-%H%M%S)" -m "Deploy to ${{ needs.prepare.outputs.environment }}"
          git push origin "deploy-$(date +%Y%m%d-%H%M%S)"
