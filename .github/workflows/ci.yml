name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job de Linting
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../tests && npm ci
      
      - name: Lint backend
        run: cd backend && npm run lint
      
      - name: Lint frontend
        run: cd frontend && npm run lint

  # Job de Testes Unitários
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../tests && npm ci
      
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
      
      - name: Run unit tests
        run: cd tests && npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./tests/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job de Testes de Integração
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../tests && npm ci
      
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
      
      - name: Start backend server
        run: cd backend && npm start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key
          PORT: 3001
      
      - name: Wait for backend
        run: npx wait-on http://localhost:3001/api/health
      
      - name: Run integration tests
        run: cd tests && npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key

  # Job de Build do Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Build frontend
        run: cd frontend && npm run build
        env:
          VITE_API_URL: https://slotbox-api-staging.onrender.com/api
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist/

  # Job de Testes E2E
  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-frontend
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../tests && npm ci
      
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
      
      - name: Start backend server
        run: cd backend && npm start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key
          PORT: 3001
      
      - name: Start frontend server
        run: cd frontend && npm run preview &
        env:
          VITE_API_URL: http://localhost:3001/api
      
      - name: Wait for servers
        run: |
          npx wait-on http://localhost:3001/api/health
          npx wait-on http://localhost:4173
      
      - name: Install Playwright browsers
        run: cd tests && npx playwright install --with-deps
      
      - name: Run E2E tests
        run: cd tests && npm run test:e2e
        env:
          FRONTEND_URL: http://localhost:4173
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: tests/playwright-report/
          retention-days: 30

  # Job de Testes de Stress
  stress-tests:
    runs-on: ubuntu-latest
    needs: e2e-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: slotbox_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../tests && npm ci
      
      - name: Setup test database
        run: |
          cd backend
          npx prisma migrate deploy
          npx prisma db seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
      
      - name: Start backend server
        run: cd backend && npm start &
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key
          PORT: 3001
      
      - name: Wait for backend
        run: npx wait-on http://localhost:3001/api/health
      
      - name: Run stress tests
        run: cd tests && npm run test:stress
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/slotbox_test
          JWT_SECRET: test-jwt-secret
          VIZZION_PUBLIC_KEY: test-public-key
          VIZZION_SECRET_KEY: test-secret-key

  # Job de Deploy para Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, build-frontend, e2e-tests, stress-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render (Staging)
        run: |
          echo "Deploying to staging environment..."
          # Aqui seria implementado o deploy real para Render
          # Por exemplo, usando a API do Render ou webhook
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Implementar smoke tests para verificar se o deploy foi bem-sucedido

  # Job de Deploy para Produção
  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, integration-tests, build-frontend, e2e-tests, stress-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render (Production)
        run: |
          echo "Deploying to production environment..."
          # Aqui seria implementado o deploy real para Render
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on production..."
          # Implementar smoke tests para verificar se o deploy foi bem-sucedido