// üß™ TESTAR SISTEMA DE COMPRA IMPLEMENTADO - SLOTBOX
// Cole este c√≥digo no console do navegador (F12) para testar o sistema implementado

console.log('üß™ INICIANDO TESTE DO SISTEMA DE COMPRA IMPLEMENTADO...');

// ===== TESTE 1: VERIFICAR SE O SISTEMA FOI IMPLEMENTADO =====
function verificarSistemaImplementado() {
  console.log('\nüîç === VERIFICANDO SISTEMA IMPLEMENTADO ===');
  
  if (window.sistemaCompraMelhorado) {
    console.log('‚úÖ Sistema de compra melhorado encontrado');
    console.log('   - Inst√¢ncia:', window.sistemaCompraMelhorado);
    console.log('   - Saldo atual:', window.sistemaCompraMelhorado.saldoAtual);
    console.log('   - Pre√ßo da caixa:', window.sistemaCompraMelhorado.precoCaixa);
    console.log('   - Bot√£o encontrado:', !!window.sistemaCompraMelhorado.botaoAbrirCaixa);
    return true;
  } else {
    console.log('‚ùå Sistema de compra melhorado n√£o encontrado');
    console.log('üí° Execute primeiro o c√≥digo "implementar-sistema-compra-melhorado.js"');
    return false;
  }
}

// ===== TESTE 2: VERIFICAR ESTADO ATUAL =====
function verificarEstadoAtual() {
  console.log('\nüìä === VERIFICANDO ESTADO ATUAL ===');
  
  const sistema = window.sistemaCompraMelhorado;
  if (!sistema) return;
  
  console.log('üìã Estado atual do sistema:');
  console.log(`   - Saldo atual: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Pre√ßo da caixa: R$ ${sistema.precoCaixa.toFixed(2)}`);
  console.log(`   - Bot√£o encontrado: ${sistema.botaoAbrirCaixa ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar se h√° saldo suficiente
  if (sistema.saldoAtual >= sistema.precoCaixa) {
    console.log('‚úÖ Saldo suficiente para compra');
  } else {
    console.log('‚ùå Saldo insuficiente para compra');
    console.log(`   - Necess√°rio: R$ ${sistema.precoCaixa.toFixed(2)}`);
    console.log(`   - Dispon√≠vel: R$ ${sistema.saldoAtual.toFixed(2)}`);
  }
}

// ===== TESTE 3: SIMULAR COMPRA =====
function simularCompra() {
  console.log('\nüõí === SIMULANDO COMPRA ===');
  
  const sistema = window.sistemaCompraMelhorado;
  if (!sistema) {
    console.log('‚ùå Sistema n√£o encontrado');
    return;
  }
  
  if (sistema.isProcessing) {
    console.log('‚ö†Ô∏è Sistema j√° est√° processando uma compra');
    return;
  }
  
  if (sistema.saldoAtual < sistema.precoCaixa) {
    console.log('‚ùå Saldo insuficiente para compra');
    return;
  }
  
  console.log('üéØ Simulando clique no bot√£o "Abrir Caixa"...');
  
  // Simular clique
  if (sistema.botaoAbrirCaixa) {
    sistema.botaoAbrirCaixa.click();
    console.log('‚úÖ Clique simulado com sucesso');
  } else {
    console.log('‚ùå Bot√£o n√£o encontrado');
  }
}

// ===== TESTE 4: MONITORAR PROCESSO =====
function monitorarProcesso() {
  console.log('\nüëÄ === MONITORANDO PROCESSO ===');
  
  const sistema = window.sistemaCompraMelhorado;
  if (!sistema) return;
  
  let tentativas = 0;
  const maxTentativas = 20; // 10 segundos
  
  const monitor = setInterval(() => {
    tentativas++;
    
    console.log(`üìä Monitoramento ${tentativas}/${maxTentativas}:`);
    console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Saldo atual: R$ ${sistema.saldoAtual.toFixed(2)}`);
    
    if (!sistema.isProcessing && tentativas > 1) {
      console.log('‚úÖ Processo conclu√≠do');
      clearInterval(monitor);
    }
    
    if (tentativas >= maxTentativas) {
      console.log('‚è∞ Timeout do monitoramento');
      clearInterval(monitor);
    }
  }, 500);
}

// ===== TESTE 5: VERIFICAR RESULTADO =====
function verificarResultado() {
  console.log('\nüéØ === VERIFICANDO RESULTADO ===');
  
  const sistema = window.sistemaCompraMelhorado;
  if (!sistema) return;
  
  console.log('üìä Resultado final:');
  console.log(`   - Saldo final: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
  
  // Verificar se o bot√£o foi reabilitado
  if (sistema.botaoAbrirCaixa) {
    console.log(`   - Bot√£o habilitado: ${!sistema.botaoAbrirCaixa.disabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Texto do bot√£o: "${sistema.botaoAbrirCaixa.textContent}"`);
  }
  
  // Verificar localStorage
  const user = localStorage.getItem('user');
  if (user) {
    const userData = JSON.parse(user);
    console.log(`   - Saldo no localStorage: R$ ${userData.saldo_reais.toFixed(2)}`);
    
    if (Math.abs(userData.saldo_reais - sistema.saldoAtual) < 0.01) {
      console.log('‚úÖ Saldo sincronizado entre sistema e localStorage');
    } else {
      console.log('‚ùå Saldo n√£o sincronizado entre sistema e localStorage');
    }
  }
}

// ===== TESTE 6: TESTE DE M√öLTIPLAS COMPRAS =====
function testarMultiplasCompras() {
  console.log('\nüîÑ === TESTANDO M√öLTIPLAS COMPRAS ===');
  
  const sistema = window.sistemaCompraMelhorado;
  if (!sistema) return;
  
  const saldoInicial = sistema.saldoAtual;
  const precoCaixa = sistema.precoCaixa;
  const maxCompras = Math.floor(saldoInicial / precoCaixa);
  
  console.log(`üí∞ Saldo inicial: R$ ${saldoInicial.toFixed(2)}`);
  console.log(`üí∏ Pre√ßo por caixa: R$ ${precoCaixa.toFixed(2)}`);
  console.log(`üõí M√°ximo de compras poss√≠veis: ${maxCompras}`);
  
  if (maxCompras > 0) {
    console.log('üí° Para testar m√∫ltiplas compras, execute:');
    console.log('   testarMultiplasCompras()');
    console.log('   (Isso simular√° v√°rias compras em sequ√™ncia)');
  } else {
    console.log('‚ùå Saldo insuficiente para m√∫ltiplas compras');
  }
}

// ===== FUN√á√ÉO PRINCIPAL =====
async function executarTesteCompleto() {
  console.log('üß™ EXECUTANDO TESTE COMPLETO DO SISTEMA...');
  
  try {
    // Teste 1: Verificar se o sistema foi implementado
    const sistemaImplementado = verificarSistemaImplementado();
    
    if (!sistemaImplementado) {
      console.log('‚ùå Teste interrompido - sistema n√£o implementado');
      return;
    }
    
    // Teste 2: Verificar estado atual
    verificarEstadoAtual();
    
    // Teste 3: Simular compra
    simularCompra();
    
    // Teste 4: Monitorar processo
    monitorarProcesso();
    
    // Aguardar um pouco e verificar resultado
    setTimeout(() => {
      verificarResultado();
      testarMultiplasCompras();
      
      console.log('\nüéØ === RESUMO DO TESTE ===');
      console.log('‚úÖ Teste completo executado');
      console.log('üí° Use as fun√ß√µes individuais para testes espec√≠ficos:');
      console.log('   - verificarSistemaImplementado()');
      console.log('   - verificarEstadoAtual()');
      console.log('   - simularCompra()');
      console.log('   - verificarResultado()');
      console.log('   - testarMultiplasCompras()');
      
    }, 12000);
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// ===== EXECUTAR TESTE =====
console.log('üß™ TESTE DO SISTEMA DE COMPRA IMPLEMENTADO PRONTO!');
console.log('üìã Execute: executarTesteCompleto()');

// Executar automaticamente
executarTesteCompleto();
