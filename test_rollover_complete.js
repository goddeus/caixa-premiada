/**
 * SCRIPT COMPLETO PARA TESTAR O SISTEMA DE ROLLOVER
 * 
 * Este script testa todas as corre√ß√µes implementadas:
 * 1. Verifica√ß√£o de rollover no frontend
 * 2. Atualiza√ß√£o correta do total_giros
 * 3. Libera√ß√£o autom√°tica do rollover
 * 4. Valida√ß√£o no backend
 */

const axios = require('axios');

const API_BASE_URL = 'https://slotbox-api.onrender.com/api';

async function testRolloverSystem() {
  try {
    console.log('üîß TESTE COMPLETO DO SISTEMA DE ROLLOVER...\n');
    
    // 1. Verificar status inicial do usu√°rio
    console.log('1Ô∏è‚É£ Verificando status inicial do usu√°rio...');
    const response = await axios.get(`${API_BASE_URL}/refresh-user/6f73f55f-f9d6-4108-8838-ab76407d7e63`);
    
    if (response.data.success) {
      const user = response.data.data.user;
      console.log('‚úÖ Status inicial:');
      console.log(`   Usu√°rio: ${user.email}`);
      console.log(`   Saldo: R$ ${user.saldo_reais}`);
      console.log(`   Total giros: R$ ${user.total_giros || 0}`);
      console.log(`   Rollover m√≠nimo: R$ ${user.rollover_minimo || 20}`);
      console.log(`   Rollover liberado: ${user.rollover_liberado ? 'SIM' : 'N√ÉO'}`);
      console.log(`   Primeiro dep√≥sito: ${user.primeiro_deposito_feito ? 'SIM' : 'N√ÉO'}`);
      
      // An√°lise do estado atual
      const totalGiros = user.total_giros || 0;
      const rolloverMinimo = user.rollover_minimo || 20;
      const rolloverLiberado = user.rollover_liberado;
      const primeiroDeposito = user.primeiro_deposito_feito;
      
      console.log('\n2Ô∏è‚É£ An√°lise do estado atual:');
      console.log(`   Progresso: ${((totalGiros / rolloverMinimo) * 100).toFixed(1)}%`);
      console.log(`   Faltam: R$ ${(rolloverMinimo - totalGiros).toFixed(2)}`);
      
      // Verificar se o estado est√° correto
      if (primeiroDeposito && !rolloverLiberado && totalGiros < rolloverMinimo) {
        console.log('‚úÖ Estado correto: Usu√°rio fez dep√≥sito mas ainda n√£o bateu o rollover');
        console.log('   Bot√£o de saque N√ÉO deve aparecer no frontend');
      } else if (primeiroDeposito && rolloverLiberado && totalGiros >= rolloverMinimo) {
        console.log('‚úÖ Estado correto: Usu√°rio bateu o rollover e pode sacar');
        console.log('   Bot√£o de saque DEVE aparecer no frontend');
      } else if (!primeiroDeposito) {
        console.log('‚ö†Ô∏è Usu√°rio ainda n√£o fez primeiro dep√≥sito');
      } else {
        console.log('‚ùå Estado inconsistente detectado!');
        console.log(`   Primeiro dep√≥sito: ${primeiroDeposito}`);
        console.log(`   Rollover liberado: ${rolloverLiberado}`);
        console.log(`   Total giros: R$ ${totalGiros}`);
        console.log(`   Rollover m√≠nimo: R$ ${rolloverMinimo}`);
      }
      
      // Teste de valida√ß√£o no backend
      console.log('\n3Ô∏è‚É£ Testando valida√ß√£o no backend...');
      try {
        const withdrawTest = await axios.post(`${API_BASE_URL}/wallet/withdraw`, {
          valor: 20,
          pix_key: 'test@test.com'
        });
        console.log('‚ùå ERRO: Saque foi permitido quando n√£o deveria!');
      } catch (error) {
        if (error.response?.data?.message?.includes('apostar mais')) {
          console.log('‚úÖ CORRETO: Backend bloqueou saque por rollover');
          console.log(`   Mensagem: ${error.response.data.message}`);
        } else if (error.response?.data?.message?.includes('Saldo insuficiente')) {
          console.log('‚úÖ CORRETO: Backend bloqueou saque por saldo insuficiente');
        } else {
          console.log('‚ö†Ô∏è Backend retornou erro diferente:', error.response?.data?.message);
        }
      }
      
      // Instru√ß√µes para teste manual
      console.log('\n4Ô∏è‚É£ INSTRU√á√ïES PARA TESTE MANUAL:');
      console.log('   Para testar o sistema completo:');
      console.log('   1. Acesse o frontend: https://slotbox.shop');
      console.log('   2. Fa√ßa login com paulotest@gmail.com');
      console.log('   3. Verifique se o bot√£o "Sacar" est√° desabilitado');
      console.log('   4. Abra algumas caixas para gastar R$ 20,00');
      console.log('   5. Verifique se o bot√£o "Sacar" fica habilitado');
      console.log('   6. Tente fazer um saque');
      
      // Status final
      console.log('\n5Ô∏è‚É£ STATUS FINAL:');
      if (totalGiros >= rolloverMinimo && rolloverLiberado) {
        console.log('üéâ SISTEMA FUNCIONANDO: Usu√°rio pode sacar');
      } else if (totalGiros < rolloverMinimo && !rolloverLiberado) {
        console.log('üéØ SISTEMA FUNCIONANDO: Usu√°rio precisa apostar mais');
        console.log(`   Faltam R$ ${(rolloverMinimo - totalGiros).toFixed(2)} para liberar`);
      } else {
        console.log('‚ùå PROBLEMA DETECTADO: Estado inconsistente');
      }
      
    } else {
      console.error('‚ùå Erro ao buscar dados do usu√°rio:', response.data.message);
    }
    
    console.log('\nüéâ TESTE CONCLU√çDO!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
  }
}

// Executar teste
testRolloverSystem();
