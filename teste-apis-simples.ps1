# üß™ TESTE SIMPLES DE APIs - SLOTBOX
# Execute: .\teste-apis-simples.ps1

Write-Host "üöÄ INICIANDO TESTE SIMPLES DE APIs..." -ForegroundColor Green

$API_BASE = "https://slotbox-api.onrender.com"
$resultados = @()

# ===== TESTE 1: HEALTH CHECK =====
Write-Host "`nüåê Testando Health Check..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/health" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Health Check: OK ($($response.StatusCode))" -ForegroundColor Green
        $resultados += "‚úÖ Health Check: OK"
    } else {
        Write-Host "‚ùå Health Check: $($response.StatusCode)" -ForegroundColor Red
        $resultados += "‚ùå Health Check: $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Health Check: ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Health Check: ERRO"
}

# ===== TESTE 2: LISTA DE CAIXAS =====
Write-Host "`nüì¶ Testando Lista de Caixas..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/cases" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Lista de Caixas: OK ($($response.StatusCode))" -ForegroundColor Green
        $resultados += "‚úÖ Lista de Caixas: OK"
    } else {
        Write-Host "‚ùå Lista de Caixas: $($response.StatusCode)" -ForegroundColor Red
        $resultados += "‚ùå Lista de Caixas: $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Lista de Caixas: ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Lista de Caixas: ERRO"
}

# ===== TESTE 3: AUTH ME (SEM TOKEN) =====
Write-Host "`nüîê Testando Auth Me (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/auth/me" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Auth Me (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Auth Me (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Auth Me (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Auth Me (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Auth Me (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Auth Me (sem token): ERRO"
}

# ===== TESTE 4: WALLET (SEM TOKEN) =====
Write-Host "`nüí∞ Testando Wallet (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/wallet/" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Wallet (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Wallet (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Wallet (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Wallet (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Wallet (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Wallet (sem token): ERRO"
}

# ===== TESTE 5: TRANSACTIONS (SEM TOKEN) =====
Write-Host "`nüìä Testando Transactions (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/transactions" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Transactions (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Transactions (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Transactions (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Transactions (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Transactions (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Transactions (sem token): ERRO"
}

# ===== TESTE 6: ADMIN STATS (SEM TOKEN) =====
Write-Host "`nüëë Testando Admin Stats (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/admin/dashboard/stats" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Admin Stats (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Admin Stats (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Admin Stats (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Admin Stats (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Admin Stats (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Admin Stats (sem token): ERRO"
}

# ===== TESTE 7: AFFILIATE ME (SEM TOKEN) =====
Write-Host "`nü§ù Testando Affiliate Me (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/affiliate/me" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Affiliate Me (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Affiliate Me (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Affiliate Me (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Affiliate Me (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Affiliate Me (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Affiliate Me (sem token): ERRO"
}

# ===== TESTE 8: PAYMENTS HISTORY (SEM TOKEN) =====
Write-Host "`nüí≥ Testando Payments History (sem token)..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "$API_BASE/api/payments/history" -Method GET -UseBasicParsing
    if ($response.StatusCode -eq 401) {
        Write-Host "‚úÖ Payments History (sem token): OK ($($response.StatusCode) - esperado)" -ForegroundColor Green
        $resultados += "‚úÖ Payments History (sem token): OK"
    } else {
        Write-Host "‚ö†Ô∏è Payments History (sem token): $($response.StatusCode) (esperado 401)" -ForegroundColor Yellow
        $resultados += "‚ö†Ô∏è Payments History (sem token): $($response.StatusCode)"
    }
} catch {
    Write-Host "‚ùå Payments History (sem token): ERRO - $($_.Exception.Message)" -ForegroundColor Red
    $resultados += "‚ùå Payments History (sem token): ERRO"
}

# ===== RESUMO FINAL =====
Write-Host "`nüìä === RESUMO FINAL ===" -ForegroundColor Cyan

$sucessos = $resultados | Where-Object { $_ -like "‚úÖ*" }
$problemas = $resultados | Where-Object { $_ -like "‚ùå*" }
$avisos = $resultados | Where-Object { $_ -like "‚ö†Ô∏è*" }

Write-Host "‚úÖ Sucessos: $($sucessos.Count)" -ForegroundColor Green
Write-Host "‚ö†Ô∏è Avisos: $($avisos.Count)" -ForegroundColor Yellow
Write-Host "‚ùå Problemas: $($problemas.Count)" -ForegroundColor Red

if ($problemas.Count -eq 0) {
    Write-Host "`nüéâ SISTEMA 100% FUNCIONAL!" -ForegroundColor Green
} else {
    Write-Host "`n‚ö†Ô∏è SISTEMA COM PROBLEMAS - VERIFICAR CORRE√á√ïES NECESS√ÅRIAS" -ForegroundColor Yellow
}

Write-Host "`nüìã Detalhes dos resultados:" -ForegroundColor Cyan
foreach ($resultado in $resultados) {
    Write-Host "  $resultado" -ForegroundColor White
}

Write-Host "`nüéØ TESTE CONCLU√çDO!" -ForegroundColor Green
