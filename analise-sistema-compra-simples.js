// üîç AN√ÅLISE SIMPLES DO SISTEMA DE COMPRA - SLOTBOX
// Cole este c√≥digo no console do navegador (F12) para analisar o sistema atual

console.log('üîç INICIANDO AN√ÅLISE SIMPLES DO SISTEMA DE COMPRA...');

// ===== AN√ÅLISE 1: VERIFICAR ESTADO ATUAL =====
function verificarEstadoAtual() {
  console.log('\nüìã === ESTADO ATUAL ===');
  
  // Verificar rota atual
  const rotaAtual = window.location.pathname;
  console.log(`üìç Rota atual: ${rotaAtual}`);
  
  // Verificar se estamos no dashboard
  if (rotaAtual === '/' || rotaAtual === '/dashboard') {
    console.log('‚úÖ Estamos no Dashboard');
    console.log('üí° Para analisar o sistema de compra, navegue para uma p√°gina de caixa');
    console.log('   Exemplo: /weekend-case, /nike-case, /samsung-case');
    return false;
  } else if (rotaAtual.includes('case')) {
    console.log('‚úÖ Estamos em uma p√°gina de caixa');
    return true;
  } else {
    console.log('‚ö†Ô∏è Rota n√£o reconhecida');
    return false;
  }
}

// ===== AN√ÅLISE 2: VERIFICAR ELEMENTOS DA P√ÅGINA =====
function verificarElementosPagina() {
  console.log('\nüîç === ELEMENTOS DA P√ÅGINA ===');
  
  // Verificar bot√µes
  const botoes = document.querySelectorAll('button, [class*="button"], [class*="btn"]');
  console.log(`üîò Total de bot√µes: ${botoes.length}`);
  
  let botaoAbrirCaixa = null;
  botoes.forEach((botao, index) => {
    const texto = botao.textContent?.toLowerCase().trim() || '';
    console.log(`   Bot√£o ${index + 1}: "${texto}"`);
    
    if (texto.includes('abrir') || texto.includes('open')) {
      botaoAbrirCaixa = botao;
      console.log(`   ‚úÖ Bot√£o "Abrir Caixa" encontrado!`);
    }
  });
  
  // Verificar pre√ßos
  const elementosPreco = document.querySelectorAll('*');
  let precoCaixa = null;
  elementosPreco.forEach(elemento => {
    const texto = elemento.textContent?.trim() || '';
    if (texto.match(/R\$\s*\d+/) && !texto.includes('saldo')) {
      precoCaixa = texto;
      console.log(`üí∞ Pre√ßo encontrado: ${texto}`);
    }
  });
  
  // Verificar saldo
  const user = localStorage.getItem('user');
  if (user) {
    try {
      const userData = JSON.parse(user);
      console.log(`üí≥ Saldo do usu√°rio: R$ ${userData.saldo_reais || 0}`);
    } catch (e) {
      console.log('‚ùå Erro ao ler dados do usu√°rio');
    }
  }
  
  return {
    botaoAbrirCaixa,
    precoCaixa,
    totalBotoes: botoes.length
  };
}

// ===== AN√ÅLISE 3: VERIFICAR FUN√á√ïES DE COMPRA =====
function verificarFuncoesCompra() {
  console.log('\nüõí === FUN√á√ïES DE COMPRA ===');
  
  // Verificar se h√° API dispon√≠vel
  if (window.api) {
    console.log('‚úÖ API Service encontrado no window');
  } else {
    console.log('‚ùå API Service n√£o encontrado no window');
  }
  
  // Verificar fun√ß√µes relacionadas a compra
  const funcoesCompra = [];
  Object.keys(window).forEach(key => {
    if (key.toLowerCase().includes('buy') || 
        key.toLowerCase().includes('purchase') || 
        key.toLowerCase().includes('open') || 
        key.toLowerCase().includes('abrir')) {
      funcoesCompra.push(key);
    }
  });
  
  console.log(`üîß Fun√ß√µes de compra encontradas: ${funcoesCompra.length}`);
  funcoesCompra.forEach(funcao => {
    console.log(`   - ${funcao}`);
  });
  
  return funcoesCompra;
}

// ===== AN√ÅLISE 4: VERIFICAR SISTEMA DE SALDO =====
function verificarSistemaSaldo() {
  console.log('\nüí≥ === SISTEMA DE SALDO ===');
  
  const token = localStorage.getItem('token');
  const user = localStorage.getItem('user');
  
  console.log(`üîë Token: ${token ? '‚úÖ Presente' : '‚ùå Ausente'}`);
  console.log(`üë§ Usu√°rio: ${user ? '‚úÖ Presente' : '‚ùå Ausente'}`);
  
  if (user) {
    try {
      const userData = JSON.parse(user);
      console.log('üë§ Dados do usu√°rio:');
      console.log(`   - Nome: ${userData.nome}`);
      console.log(`   - Email: ${userData.email}`);
      console.log(`   - Saldo: R$ ${userData.saldo_reais || 0}`);
      console.log(`   - ID: ${userData.id}`);
      
      return userData;
    } catch (e) {
      console.log('‚ùå Dados do usu√°rio corrompidos');
      return null;
    }
  }
  
  return null;
}

// ===== AN√ÅLISE 5: VERIFICAR API DE COMPRA =====
async function verificarAPICompra() {
  console.log('\nüåê === API DE COMPRA ===');
  
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('‚ùå Token n√£o encontrado - pulando verifica√ß√£o da API');
    return;
  }
  
  const headers = { 'Authorization': `Bearer ${token}` };
  
  // Testar endpoints
  const endpoints = [
    { endpoint: '/api/wallet/', name: 'Wallet/Saldo' },
    { endpoint: '/api/transactions', name: 'Transa√ß√µes' },
    { endpoint: '/api/cases', name: 'Caixas' }
  ];
  
  for (const endpoint of endpoints) {
    try {
      const response = await fetch(`https://slotbox-api.onrender.com${endpoint.endpoint}`, {
        headers: headers
      });
      
      console.log(`üì° ${endpoint.name}: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`   ‚úÖ ${endpoint.name} funcionando`);
        
        if (endpoint.name === 'Wallet/Saldo') {
          console.log(`   üí∞ Saldo atual: R$ ${data.saldo_reais || 0}`);
        } else if (endpoint.name === 'Transa√ß√µes') {
          console.log(`   üìä Transa√ß√µes: ${data.length || 0} encontradas`);
        } else if (endpoint.name === 'Caixas') {
          console.log(`   üì¶ Caixas: ${data.data?.length || 0} encontradas`);
        }
      } else {
        console.log(`   ‚ùå ${endpoint.name} falhou`);
      }
    } catch (error) {
      console.log(`   ‚ùå Erro ao testar ${endpoint.name}: ${error.message}`);
    }
  }
}

// ===== AN√ÅLISE 6: VERIFICAR SISTEMA DE PR√äMIOS =====
function verificarSistemaPremios() {
  console.log('\nüéÅ === SISTEMA DE PR√äMIOS ===');
  
  // Verificar elementos de pr√™mio
  const elementosPremio = document.querySelectorAll('[class*="premio"], [class*="prize"], [class*="reward"], [class*="item"]');
  console.log(`üéÅ Elementos de pr√™mio encontrados: ${elementosPremio.length}`);
  
  elementosPremio.forEach((elemento, index) => {
    const texto = elemento.textContent?.trim() || '';
    console.log(`   Pr√™mio ${index + 1}: "${texto}"`);
  });
  
  // Verificar imagens de pr√™mios
  const imagensPremio = document.querySelectorAll('img[src*="premio"], img[src*="prize"], img[src*="item"]');
  console.log(`üñºÔ∏è Imagens de pr√™mio encontradas: ${imagensPremio.length}`);
  
  return {
    elementosPremio: elementosPremio.length,
    imagensPremio: imagensPremio.length
  };
}

// ===== FUN√á√ÉO PRINCIPAL =====
async function executarAnaliseSimples() {
  console.log('üîç EXECUTANDO AN√ÅLISE SIMPLES DO SISTEMA DE COMPRA...');
  
  try {
    // An√°lise 1: Estado atual
    const estaEmPaginaCaixa = verificarEstadoAtual();
    
    // An√°lise 2: Elementos da p√°gina
    const elementos = verificarElementosPagina();
    
    // An√°lise 3: Fun√ß√µes de compra
    const funcoes = verificarFuncoesCompra();
    
    // An√°lise 4: Sistema de saldo
    const saldo = verificarSistemaSaldo();
    
    // An√°lise 5: API de compra
    await verificarAPICompra();
    
    // An√°lise 6: Sistema de pr√™mios
    const premios = verificarSistemaPremios();
    
    // Resumo final
    setTimeout(() => {
      console.log('\nüéØ === RESUMO DA AN√ÅLISE ===');
      
      console.log('üìä INFORMA√á√ïES COLETADAS:');
      console.log(`   - Rota atual: ${window.location.pathname}`);
      console.log(`   - Em p√°gina de caixa: ${estaEmPaginaCaixa ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Bot√µes encontrados: ${elementos.totalBotoes}`);
      console.log(`   - Bot√£o "Abrir Caixa": ${elementos.botaoAbrirCaixa ? '‚úÖ' : '‚ùå'}`);
      console.log(`   - Pre√ßo da caixa: ${elementos.precoCaixa || 'N/A'}`);
      console.log(`   - Saldo do usu√°rio: R$ ${saldo?.saldo_reais || 0}`);
      console.log(`   - Fun√ß√µes de compra: ${funcoes.length}`);
      console.log(`   - Pr√™mios encontrados: ${premios.elementosPremio}`);
      
      console.log('\nüîß PR√ìXIMOS PASSOS:');
      if (!estaEmPaginaCaixa) {
        console.log('1. Navegar para uma p√°gina de caixa espec√≠fica');
        console.log('2. Executar este script novamente');
      } else {
        console.log('1. Analisar o c√≥digo da p√°gina de caixa');
        console.log('2. Implementar sistema de d√©bito autom√°tico');
        console.log('3. Implementar sistema de cr√©dito ap√≥s pr√™mio');
        console.log('4. Testar fluxo completo de compra');
      }
      
      // Salvar resultados
      window.analiseSimplesCompra = {
        rotaAtual: window.location.pathname,
        estaEmPaginaCaixa,
        elementos,
        funcoes,
        saldo,
        premios,
        timestamp: new Date().toISOString()
      };
      
      console.log('\nüíæ Resultados salvos em window.analiseSimplesCompra');
      
    }, 3000);
    
  } catch (error) {
    console.error('‚ùå Erro durante a an√°lise:', error);
  }
}

// ===== EXECUTAR AN√ÅLISE =====
console.log('üîç AN√ÅLISE SIMPLES DO SISTEMA DE COMPRA PRONTA!');
console.log('üìã Execute: executarAnaliseSimples()');

// Executar automaticamente
executarAnaliseSimples();
