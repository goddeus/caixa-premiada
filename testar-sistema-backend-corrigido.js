// üß™ TESTAR SISTEMA BACKEND CORRIGIDO - SLOTBOX
// Cole este c√≥digo no console do navegador (F12) para testar o sistema corrigido

console.log('üß™ INICIANDO TESTE DO SISTEMA BACKEND CORRIGIDO...');

// ===== TESTE 1: VERIFICAR SISTEMA CORRIGIDO =====
function verificarSistemaCorrigido() {
  console.log('\nüîç === VERIFICANDO SISTEMA CORRIGIDO ===');
  
  if (window.sistemaCompraBackendCorrigido) {
    console.log('‚úÖ Sistema de compra corrigido encontrado');
    console.log('   - Inst√¢ncia:', window.sistemaCompraBackendCorrigido);
    console.log('   - Saldo atual:', window.sistemaCompraBackendCorrigido.saldoAtual);
    console.log('   - Pre√ßo da caixa:', window.sistemaCompraBackendCorrigido.precoCaixa);
    console.log('   - Case ID:', window.sistemaCompraBackendCorrigido.caseId);
    console.log('   - User ID:', window.sistemaCompraBackendCorrigido.userId);
    console.log('   - Bot√£o encontrado:', !!window.sistemaCompraBackendCorrigido.botaoAbrirCaixa);
    console.log('   - Processando:', window.sistemaCompraBackendCorrigido.isProcessing);
    return true;
  } else {
    console.log('‚ùå Sistema de compra corrigido n√£o encontrado');
    console.log('üí° Execute primeiro o c√≥digo "sistema-compra-backend-corrigido.js"');
    return false;
  }
}

// ===== TESTE 2: TESTAR ENDPOINT UNIFICADO =====
async function testarEndpointUnificado() {
  console.log('\nüåê === TESTANDO ENDPOINT UNIFICADO ===');
  
  const sistema = window.sistemaCompraBackendCorrigido;
  if (!sistema) {
    console.log('‚ùå Sistema n√£o encontrado');
    return;
  }
  
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('‚ùå Token n√£o encontrado');
    return;
  }
  
  console.log(`üÜî Testando endpoint unificado para Case ID: ${sistema.caseId}`);
  
  // Testar endpoint de compra unificada (buyCase)
  try {
    console.log('üîç Testando endpoint de compra unificada...');
    const buyResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/buy/${sistema.caseId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log(`üì° Compra Unificada API: ${buyResponse.status} ${buyResponse.statusText}`);
    
    if (buyResponse.ok) {
      const data = await buyResponse.json();
      console.log('‚úÖ Endpoint de compra unificada funcionando');
      console.log('üìä Resposta:', data);
    } else {
      const errorData = await buyResponse.json();
      console.log('‚ö†Ô∏è Endpoint de compra unificada com problemas:', errorData.error || errorData.message);
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar endpoint de compra unificada:', error.message);
  }
}

// ===== TESTE 3: TESTAR COMPRA CORRIGIDA =====
function testarCompraCorrigida() {
  console.log('\nüõí === TESTANDO COMPRA CORRIGIDA ===');
  
  const sistema = window.sistemaCompraBackendCorrigido;
  if (!sistema) {
    console.log('‚ùå Sistema n√£o encontrado');
    return;
  }
  
  if (sistema.isProcessing) {
    console.log('‚ö†Ô∏è Sistema j√° est√° processando uma compra');
    return;
  }
  
  if (sistema.saldoAtual < sistema.precoCaixa) {
    console.log('‚ùå Saldo insuficiente para compra');
    console.log(`   - Necess√°rio: R$ ${sistema.precoCaixa.toFixed(2)}`);
    console.log(`   - Dispon√≠vel: R$ ${sistema.saldoAtual.toFixed(2)}`);
    return;
  }
  
  console.log('üéØ Iniciando teste de compra corrigida...');
  console.log(`   - Saldo antes: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Pre√ßo da caixa: R$ ${sistema.precoCaixa.toFixed(2)}`);
  console.log(`   - Case ID: ${sistema.caseId}`);
  console.log(`   - User ID: ${sistema.userId}`);
  
  // Simular clique
  if (sistema.botaoAbrirCaixa) {
    sistema.botaoAbrirCaixa.click();
    console.log('‚úÖ Clique simulado com sucesso');
  } else {
    console.log('‚ùå Bot√£o n√£o encontrado');
  }
}

// ===== TESTE 4: MONITORAR PROCESSO CORRIGIDO =====
function monitorarProcessoCorrigido() {
  console.log('\nüëÄ === MONITORANDO PROCESSO CORRIGIDO ===');
  
  const sistema = window.sistemaCompraBackendCorrigido;
  if (!sistema) return;
  
  let tentativas = 0;
  const maxTentativas = 40; // 20 segundos
  
  const monitor = setInterval(() => {
    tentativas++;
    
    console.log(`üìä Monitoramento ${tentativas}/${maxTentativas}:`);
    console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Saldo atual: R$ ${sistema.saldoAtual.toFixed(2)}`);
    
    if (!sistema.isProcessing && tentativas > 1) {
      console.log('‚úÖ Processo conclu√≠do');
      clearInterval(monitor);
      
      // Verificar resultado final
      verificarResultadoCorrigido();
    }
    
    if (tentativas >= maxTentativas) {
      console.log('‚è∞ Timeout do monitoramento');
      clearInterval(monitor);
    }
  }, 500);
}

// ===== TESTE 5: VERIFICAR RESULTADO CORRIGIDO =====
function verificarResultadoCorrigido() {
  console.log('\nüéØ === VERIFICANDO RESULTADO CORRIGIDO ===');
  
  const sistema = window.sistemaCompraBackendCorrigido;
  if (!sistema) return;
  
  console.log('üìä Resultado final:');
  console.log(`   - Saldo final: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - Case ID: ${sistema.caseId}`);
  console.log(`   - User ID: ${sistema.userId}`);
  
  // Verificar se o bot√£o foi reabilitado
  if (sistema.botaoAbrirCaixa) {
    console.log(`   - Bot√£o habilitado: ${!sistema.botaoAbrirCaixa.disabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Texto do bot√£o: "${sistema.botaoAbrirCaixa.textContent}"`);
  }
  
  // Verificar localStorage
  const user = localStorage.getItem('user');
  if (user) {
    const userData = JSON.parse(user);
    console.log(`   - Saldo no localStorage: R$ ${userData.saldo_reais.toFixed(2)}`);
    
    if (Math.abs(userData.saldo_reais - sistema.saldoAtual) < 0.01) {
      console.log('‚úÖ Saldo sincronizado entre sistema e localStorage');
    } else {
      console.log('‚ùå Saldo n√£o sincronizado entre sistema e localStorage');
    }
  }
}

// ===== TESTE 6: COMPARAR SISTEMAS =====
function compararSistemas() {
  console.log('\nüîÑ === COMPARANDO SISTEMAS ===');
  
  const sistemaOriginal = window.sistemaCompraBackend;
  const sistemaCorrigido = window.sistemaCompraBackendCorrigido;
  
  console.log('üìä Compara√ß√£o dos sistemas:');
  console.log(`   - Sistema original: ${sistemaOriginal ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - Sistema corrigido: ${sistemaCorrigido ? '‚úÖ' : '‚ùå'}`);
  
  if (sistemaOriginal && sistemaCorrigido) {
    console.log('üîç Diferen√ßas principais:');
    console.log('   - Original: Usa 3 endpoints separados (debit, draw, credit)');
    console.log('   - Corrigido: Usa 1 endpoint unificado (buyCase)');
    console.log('   - Original: Pode falhar no endpoint de draw (erro 500)');
    console.log('   - Corrigido: Evita problemas de sess√£o do backend');
  }
}

// ===== FUN√á√ÉO PRINCIPAL =====
async function executarTesteCorrigidoCompleto() {
  console.log('üß™ EXECUTANDO TESTE COMPLETO DO SISTEMA CORRIGIDO...');
  
  try {
    // Teste 1: Verificar sistema corrigido
    const sistemaCorrigido = verificarSistemaCorrigido();
    
    if (!sistemaCorrigido) {
      console.log('‚ùå Teste interrompido - sistema n√£o encontrado');
      return;
    }
    
    // Teste 2: Testar endpoint unificado
    await testarEndpointUnificado();
    
    // Teste 3: Testar compra corrigida
    testarCompraCorrigida();
    
    // Teste 4: Monitorar processo corrigido
    monitorarProcessoCorrigido();
    
    // Aguardar um pouco e executar testes adicionais
    setTimeout(() => {
      compararSistemas();
      
      console.log('\nüéØ === RESUMO DO TESTE CORRIGIDO ===');
      console.log('‚úÖ Teste completo do sistema corrigido executado');
      console.log('üí° Use as fun√ß√µes individuais para testes espec√≠ficos:');
      console.log('   - verificarSistemaCorrigido()');
      console.log('   - testarEndpointUnificado()');
      console.log('   - testarCompraCorrigida()');
      console.log('   - verificarResultadoCorrigido()');
      console.log('   - compararSistemas()');
      
    }, 20000);
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste corrigido:', error);
  }
}

// ===== EXECUTAR TESTE =====
console.log('üß™ TESTE DO SISTEMA BACKEND CORRIGIDO PRONTO!');
console.log('üìã Execute: executarTesteCorrigidoCompleto()');

// Executar automaticamente
executarTesteCorrigidoCompleto();
