/**
 * üóëÔ∏è REMOVEDOR DE ARQUIVOS PROBLEM√ÅTICOS
 * 
 * Este script lista os arquivos tempor√°rios e de diagn√≥stico que devem ser removidos
 * do projeto para manter o c√≥digo limpo e evitar conflitos.
 */

console.log('üóëÔ∏è INICIANDO REMO√á√ÉO DE ARQUIVOS PROBLEM√ÅTICOS...');
console.log('================================================');

// Fun√ß√£o para listar arquivos a serem removidos
function listarArquivosParaRemover() {
    console.log('üöÄ Listando arquivos para remo√ß√£o...');
    
    const arquivosParaRemover = [
        'test-api-connection.js',
        'deploy-cors-fix.sh',
        'deploy-to-render.md',
        'test-cors-local.js',
        'CORRECOES_CORS_APLICADAS.md',
        'diagnostico-caixas-completo.js',
        'teste-premios-especifico.js',
        'correcao-automatica-caixas.js',
        'SOLUCAO_COMPLETA_CAIXAS.md',
        'correcao-definitiva-frontend.js',
        'teste-final-correcao.js',
        'diagnostico-saldo-inconsistente.js',
        'verificar-saldo-backend.js',
        'teste-sincronizacao-completa.js',
        'SISTEMA_SINCRONIZACAO_IMPLEMENTADO.md',
        'diagnostico-premios-detalhado.js',
        'teste-abertura-caixas-premios.js',
        'correcao-problemas-premios.js',
        'diagnostico-tipos-conta-premios.js',
        'verificar-logica-premios-tipo-conta.js',
        'correcao-premios-dinamicos.js', // Script da corre√ß√£o anterior
        'teste-correcao-premios-dinamicos.js', // Script de teste da corre√ß√£o anterior
        'limpar-dados-problematicos.js', // Este pr√≥prio script de limpeza de dados
        'remover-arquivos-problematicos.js', // Este pr√≥prio script de remo√ß√£o de arquivos
        'correcao-definitiva-backend.js', // Script de corre√ß√£o definitiva
        'teste-correcao-definitiva.js',   // Script de teste da corre√ß√£o definitiva
        'aceitar-premios-dinamicos.js',   // Script de aceita√ß√£o de pr√™mios din√¢micos
        'teste-aceitacao-premios.js'      // Script de teste de aceita√ß√£o de pr√™mios
    ];
    
    console.log('\nüìã ARQUIVOS A SEREM REMOVIDOS:');
    console.log('==============================');
    arquivosParaRemover.forEach((arquivo, index) => {
        console.log(`${index + 1}. ${arquivo}`);
    });
    
    console.log('\nüí° INSTRU√á√ïES:');
    console.log('==============');
    console.log('1. Navegue at√© a pasta raiz do seu projeto.');
    console.log('2. Delete manualmente os arquivos listados acima.');
    console.log('3. Mantenha apenas os arquivos do seu projeto principal (ex: backend/, frontend/, package.json, etc.).');
    console.log('4. Ap√≥s a remo√ß√£o, execute o script `limpar-dados-problematicos.js` no console do navegador.');
    console.log('5. Recarregue a p√°gina para garantir que todas as mudan√ßas foram aplicadas.');
    
    console.log('\n‚úÖ LISTAGEM CONCLU√çDA!');
    
    return arquivosParaRemover;
}

// Fun√ß√£o para verificar se os arquivos foram removidos (opcional)
function verificarRemocao(arquivos) {
    console.log('\nüîç VERIFICANDO REMO√á√ÉO DE ARQUIVOS (manual)...');
    console.log('=============================================');
    console.log('Esta verifica√ß√£o √© manual. Por favor, confirme no seu sistema de arquivos.');
    console.log('Ap√≥s remover, voc√™ pode tentar executar este script novamente. Se os arquivos n√£o aparecerem na lista, eles foram removidos.');
}

// Executar listagem
const arquivos = listarArquivosParaRemover();

// Exportar fun√ß√µes
window.removerArquivosProblematicos = {
    listar: listarArquivosParaRemover,
    verificar: verificarRemocao
};

console.log('üóëÔ∏è Script de remo√ß√£o de arquivos carregado! Use window.removerArquivosProblematicos.listar() para listar novamente.');