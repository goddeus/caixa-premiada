// üß™ TESTAR INTEGRA√á√ÉO COM BACKEND REAL - SLOTBOX
// Cole este c√≥digo no console do navegador (F12) para testar a integra√ß√£o com backend real

console.log('üß™ INICIANDO TESTE DA INTEGRA√á√ÉO COM BACKEND REAL...');

// ===== TESTE 1: VERIFICAR SISTEMA COM BACKEND =====
function verificarSistemaBackend() {
  console.log('\nüîç === VERIFICANDO SISTEMA COM BACKEND ===');
  
  if (window.sistemaCompraBackend) {
    console.log('‚úÖ Sistema de compra com backend encontrado');
    console.log('   - Inst√¢ncia:', window.sistemaCompraBackend);
    console.log('   - Saldo atual:', window.sistemaCompraBackend.saldoAtual);
    console.log('   - Pre√ßo da caixa:', window.sistemaCompraBackend.precoCaixa);
    console.log('   - Case ID:', window.sistemaCompraBackend.caseId);
    console.log('   - User ID:', window.sistemaCompraBackend.userId);
    console.log('   - Bot√£o encontrado:', !!window.sistemaCompraBackend.botaoAbrirCaixa);
    console.log('   - Processando:', window.sistemaCompraBackend.isProcessing);
    return true;
  } else {
    console.log('‚ùå Sistema de compra com backend n√£o encontrado');
    console.log('üí° Execute primeiro o c√≥digo "sistema-compra-backend-integrado.js"');
    return false;
  }
}

// ===== TESTE 2: TESTAR CONECTIVIDADE COM BACKEND =====
async function testarConectividadeBackend() {
  console.log('\nüåê === TESTANDO CONECTIVIDADE COM BACKEND ===');
  
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('‚ùå Token n√£o encontrado');
    return false;
  }
  
  console.log('üîë Token encontrado, testando conectividade...');
  
  // Testar endpoint de health
  try {
    const healthResponse = await fetch('https://slotbox-api.onrender.com/api/health');
    console.log(`üì° Health Check: ${healthResponse.status} ${healthResponse.statusText}`);
    
    if (healthResponse.ok) {
      console.log('‚úÖ Backend est√° online');
    } else {
      console.log('‚ö†Ô∏è Backend com problemas');
    }
  } catch (error) {
    console.log('‚ùå Erro ao conectar com backend:', error.message);
    return false;
  }
  
  // Testar endpoint de wallet
  try {
    const walletResponse = await fetch('https://slotbox-api.onrender.com/api/wallet/', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log(`üì° Wallet API: ${walletResponse.status} ${walletResponse.statusText}`);
    
    if (walletResponse.ok) {
      const walletData = await walletResponse.json();
      console.log('‚úÖ Wallet API funcionando');
      console.log('üí∞ Saldo no backend:', walletData.saldo_reais || 0);
    } else {
      console.log('‚ö†Ô∏è Wallet API com problemas');
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar Wallet API:', error.message);
  }
  
  return true;
}

// ===== TESTE 3: TESTAR ENDPOINTS DE CAIXA =====
async function testarEndpointsCaixa() {
  console.log('\nüì¶ === TESTANDO ENDPOINTS DE CAIXA ===');
  
  const sistema = window.sistemaCompraBackend;
  if (!sistema) {
    console.log('‚ùå Sistema n√£o encontrado');
    return;
  }
  
  const token = localStorage.getItem('token');
  if (!token) {
    console.log('‚ùå Token n√£o encontrado');
    return;
  }
  
  console.log(`üÜî Testando endpoints para Case ID: ${sistema.caseId}`);
  
  // Testar endpoint de d√©bito (sem executar)
  try {
    console.log('üîç Testando endpoint de d√©bito...');
    const debitResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/debit/${sistema.caseId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log(`üì° D√©bito API: ${debitResponse.status} ${debitResponse.statusText}`);
    
    if (debitResponse.ok) {
      console.log('‚úÖ Endpoint de d√©bito acess√≠vel');
    } else {
      const errorData = await debitResponse.json();
      console.log('‚ö†Ô∏è Endpoint de d√©bito com problemas:', errorData.error || errorData.message);
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar endpoint de d√©bito:', error.message);
  }
  
  // Testar endpoint de sorteio (sem executar)
  try {
    console.log('üîç Testando endpoint de sorteio...');
    const drawResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/draw/${sistema.caseId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });
    
    console.log(`üì° Sorteio API: ${drawResponse.status} ${drawResponse.statusText}`);
    
    if (drawResponse.ok) {
      console.log('‚úÖ Endpoint de sorteio acess√≠vel');
    } else {
      const errorData = await drawResponse.json();
      console.log('‚ö†Ô∏è Endpoint de sorteio com problemas:', errorData.error || errorData.message);
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar endpoint de sorteio:', error.message);
  }
  
  // Testar endpoint de cr√©dito (sem executar)
  try {
    console.log('üîç Testando endpoint de cr√©dito...');
    const creditResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/credit/${sistema.caseId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        prizeId: 'test-prize-id',
        prizeValue: 1.00
      })
    });
    
    console.log(`üì° Cr√©dito API: ${creditResponse.status} ${creditResponse.statusText}`);
    
    if (creditResponse.ok) {
      console.log('‚úÖ Endpoint de cr√©dito acess√≠vel');
    } else {
      const errorData = await creditResponse.json();
      console.log('‚ö†Ô∏è Endpoint de cr√©dito com problemas:', errorData.error || errorData.message);
    }
  } catch (error) {
    console.log('‚ùå Erro ao testar endpoint de cr√©dito:', error.message);
  }
}

// ===== TESTE 4: TESTAR COMPRA COM BACKEND =====
function testarCompraComBackend() {
  console.log('\nüõí === TESTANDO COMPRA COM BACKEND ===');
  
  const sistema = window.sistemaCompraBackend;
  if (!sistema) {
    console.log('‚ùå Sistema n√£o encontrado');
    return;
  }
  
  if (sistema.isProcessing) {
    console.log('‚ö†Ô∏è Sistema j√° est√° processando uma compra');
    return;
  }
  
  if (sistema.saldoAtual < sistema.precoCaixa) {
    console.log('‚ùå Saldo insuficiente para compra');
    console.log(`   - Necess√°rio: R$ ${sistema.precoCaixa.toFixed(2)}`);
    console.log(`   - Dispon√≠vel: R$ ${sistema.saldoAtual.toFixed(2)}`);
    return;
  }
  
  console.log('üéØ Iniciando teste de compra com backend...');
  console.log(`   - Saldo antes: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Pre√ßo da caixa: R$ ${sistema.precoCaixa.toFixed(2)}`);
  console.log(`   - Case ID: ${sistema.caseId}`);
  console.log(`   - User ID: ${sistema.userId}`);
  
  // Simular clique
  if (sistema.botaoAbrirCaixa) {
    sistema.botaoAbrirCaixa.click();
    console.log('‚úÖ Clique simulado com sucesso');
  } else {
    console.log('‚ùå Bot√£o n√£o encontrado');
  }
}

// ===== TESTE 5: MONITORAR PROCESSO COM BACKEND =====
function monitorarProcessoBackend() {
  console.log('\nüëÄ === MONITORANDO PROCESSO COM BACKEND ===');
  
  const sistema = window.sistemaCompraBackend;
  if (!sistema) return;
  
  let tentativas = 0;
  const maxTentativas = 40; // 20 segundos
  
  const monitor = setInterval(() => {
    tentativas++;
    
    console.log(`üìä Monitoramento ${tentativas}/${maxTentativas}:`);
    console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Saldo atual: R$ ${sistema.saldoAtual.toFixed(2)}`);
    
    if (!sistema.isProcessing && tentativas > 1) {
      console.log('‚úÖ Processo conclu√≠do');
      clearInterval(monitor);
      
      // Verificar resultado final
      verificarResultadoBackend();
    }
    
    if (tentativas >= maxTentativas) {
      console.log('‚è∞ Timeout do monitoramento');
      clearInterval(monitor);
    }
  }, 500);
}

// ===== TESTE 6: VERIFICAR RESULTADO COM BACKEND =====
function verificarResultadoBackend() {
  console.log('\nüéØ === VERIFICANDO RESULTADO COM BACKEND ===');
  
  const sistema = window.sistemaCompraBackend;
  if (!sistema) return;
  
  console.log('üìä Resultado final:');
  console.log(`   - Saldo final: R$ ${sistema.saldoAtual.toFixed(2)}`);
  console.log(`   - Processando: ${sistema.isProcessing ? '‚úÖ' : '‚ùå'}`);
  console.log(`   - Case ID: ${sistema.caseId}`);
  console.log(`   - User ID: ${sistema.userId}`);
  
  // Verificar se o bot√£o foi reabilitado
  if (sistema.botaoAbrirCaixa) {
    console.log(`   - Bot√£o habilitado: ${!sistema.botaoAbrirCaixa.disabled ? '‚úÖ' : '‚ùå'}`);
    console.log(`   - Texto do bot√£o: "${sistema.botaoAbrirCaixa.textContent}"`);
  }
  
  // Verificar localStorage
  const user = localStorage.getItem('user');
  if (user) {
    const userData = JSON.parse(user);
    console.log(`   - Saldo no localStorage: R$ ${userData.saldo_reais.toFixed(2)}`);
    
    if (Math.abs(userData.saldo_reais - sistema.saldoAtual) < 0.01) {
      console.log('‚úÖ Saldo sincronizado entre sistema e localStorage');
    } else {
      console.log('‚ùå Saldo n√£o sincronizado entre sistema e localStorage');
    }
  }
}

// ===== TESTE 7: TESTAR FUN√á√ïES INDIVIDUAIS DO BACKEND =====
function testarFuncoesBackend() {
  console.log('\nüîß === TESTANDO FUN√á√ïES DO BACKEND ===');
  
  const sistema = window.sistemaCompraBackend;
  if (!sistema) return;
  
  console.log('üß™ Testando fun√ß√µes individuais do backend:');
  
  // Testar mostrarMensagem
  console.log('üì¢ Testando mostrarMensagem...');
  sistema.mostrarMensagem('Teste de mensagem com backend', 'info');
  
  // Testar obterSaldoAtual
  console.log('üí≥ Testando obterSaldoAtual...');
  sistema.obterSaldoAtual();
  
  // Testar obterPrecoCaixa
  console.log('üí∞ Testando obterPrecoCaixa...');
  sistema.obterPrecoCaixa();
  
  console.log('‚úÖ Testes de fun√ß√µes individuais do backend conclu√≠dos');
}

// ===== FUN√á√ÉO PRINCIPAL =====
async function executarTesteBackendCompleto() {
  console.log('üß™ EXECUTANDO TESTE COMPLETO DA INTEGRA√á√ÉO COM BACKEND...');
  
  try {
    // Teste 1: Verificar sistema com backend
    const sistemaBackend = verificarSistemaBackend();
    
    if (!sistemaBackend) {
      console.log('‚ùå Teste interrompido - sistema n√£o encontrado');
      return;
    }
    
    // Teste 2: Testar conectividade com backend
    const conectividade = await testarConectividadeBackend();
    
    if (!conectividade) {
      console.log('‚ùå Teste interrompido - problemas de conectividade');
      return;
    }
    
    // Teste 3: Testar endpoints de caixa
    await testarEndpointsCaixa();
    
    // Teste 4: Testar compra com backend
    testarCompraComBackend();
    
    // Teste 5: Monitorar processo com backend
    monitorarProcessoBackend();
    
    // Aguardar um pouco e executar testes adicionais
    setTimeout(() => {
      testarFuncoesBackend();
      
      console.log('\nüéØ === RESUMO DO TESTE COM BACKEND ===');
      console.log('‚úÖ Teste completo da integra√ß√£o com backend executado');
      console.log('üí° Use as fun√ß√µes individuais para testes espec√≠ficos:');
      console.log('   - verificarSistemaBackend()');
      console.log('   - testarConectividadeBackend()');
      console.log('   - testarEndpointsCaixa()');
      console.log('   - testarCompraComBackend()');
      console.log('   - verificarResultadoBackend()');
      console.log('   - testarFuncoesBackend()');
      
    }, 20000);
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste com backend:', error);
  }
}

// ===== EXECUTAR TESTE =====
console.log('üß™ TESTE DA INTEGRA√á√ÉO COM BACKEND REAL PRONTO!');
console.log('üìã Execute: executarTesteBackendCompleto()');

// Executar automaticamente
executarTesteBackendCompleto();
