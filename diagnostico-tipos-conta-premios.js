/**
 * üîç DIAGN√ìSTICO DE TIPOS DE CONTA E PR√äMIOS
 * 
 * Este script verifica se os problemas de pr√™mios est√£o relacionados
 * aos diferentes tipos de conta (normal vs premium/admin).
 */

console.log('üîç INICIANDO DIAGN√ìSTICO DE TIPOS DE CONTA E PR√äMIOS...');
console.log('=====================================================');

// Fun√ß√£o para diagnosticar tipos de conta
async function diagnosticarTiposConta() {
    console.log('üöÄ Iniciando diagn√≥stico de tipos de conta...');
    
    try {
        const token = localStorage.getItem('token');
        
        if (!token) {
            console.log('‚ùå Token n√£o encontrado - usu√°rio n√£o autenticado');
            return;
        }

        // 1. Verificar dados do usu√°rio atual
        console.log('\nüë§ VERIFICANDO USU√ÅRIO ATUAL:');
        console.log('=============================');
        
        const userResponse = await fetch('https://slotbox-api.onrender.com/api/auth/me', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const userData = await userResponse.json();
        
        if (!userData.success) {
            console.log('‚ùå Erro ao buscar dados do usu√°rio');
            return;
        }
        
        const user = userData.data;
        console.log('‚úÖ Usu√°rio carregado:');
        console.log(`   Nome: ${user.nome}`);
        console.log(`   Email: ${user.email}`);
        console.log(`   Tipo de conta: ${user.tipo_conta || 'N/A'}`);
        console.log(`   √â admin: ${user.is_admin ? 'Sim' : 'N√£o'}`);
        console.log(`   √â premium: ${user.is_premium ? 'Sim' : 'N√£o'}`);
        
        // 2. Verificar wallet
        console.log('\nüí∞ VERIFICANDO WALLET:');
        console.log('======================');
        
        const walletResponse = await fetch('https://slotbox-api.onrender.com/api/wallet', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const walletData = await walletResponse.json();
        
        if (!walletData.success) {
            console.log('‚ùå Erro ao buscar wallet');
            return;
        }
        
        const wallet = walletData.data;
        console.log('‚úÖ Wallet carregado:');
        console.log(`   Saldo real: R$ ${wallet.saldo_reais}`);
        console.log(`   Saldo demo: R$ ${wallet.saldo_demo}`);
        console.log(`   Tipo de conta: ${wallet.tipo_conta || 'N/A'}`);
        console.log(`   Total de giros: ${wallet.total_giros || 0}`);
        console.log(`   Rollover liberado: ${wallet.rollover_liberado ? 'Sim' : 'N√£o'}`);
        
        // 3. Verificar se h√° diferen√ßas entre tipos de conta
        console.log('\nüîç COMPARANDO TIPOS DE CONTA:');
        console.log('==============================');
        
        const tipoContaUser = user.tipo_conta;
        const tipoContaWallet = wallet.tipo_conta;
        
        if (tipoContaUser !== tipoContaWallet) {
            console.log('‚ö†Ô∏è INCONSIST√äNCIA ENCONTRADA!');
            console.log(`   Tipo no usu√°rio: ${tipoContaUser}`);
            console.log(`   Tipo no wallet: ${tipoContaWallet}`);
        } else {
            console.log('‚úÖ Tipos de conta consistentes');
        }
        
        // 4. Verificar pr√™mios por tipo de conta
        console.log('\nüéÅ VERIFICANDO PR√äMIOS POR TIPO DE CONTA:');
        console.log('==========================================');
        
        const prizesResponse = await fetch('https://slotbox-api.onrender.com/api/prizes', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const prizesData = await prizesResponse.json();
        
        if (!prizesData.success) {
            console.log('‚ùå Erro ao buscar pr√™mios');
            return;
        }
        
        console.log(`‚úÖ Encontrados ${prizesData.data.length} pr√™mios`);
        
        // Verificar se pr√™mios t√™m restri√ß√µes de tipo de conta
        const premiosComRestricao = prizesData.data.filter(prize => 
            prize.tipo_conta_permitido || prize.restricao_tipo_conta
        );
        
        if (premiosComRestricao.length > 0) {
            console.log(`‚ö†Ô∏è Encontrados ${premiosComRestricao.length} pr√™mios com restri√ß√µes de tipo de conta:`);
            premiosComRestricao.forEach(premio => {
                console.log(`   üéÅ ${premio.nome} - Restri√ß√£o: ${premio.tipo_conta_permitido || premio.restricao_tipo_conta}`);
            });
        } else {
            console.log('‚úÖ Nenhum pr√™mio com restri√ß√µes de tipo de conta encontrado');
        }
        
        // 5. Verificar caixas por tipo de conta
        console.log('\nüì¶ VERIFICANDO CAIXAS POR TIPO DE CONTA:');
        console.log('=========================================');
        
        const casesResponse = await fetch('https://slotbox-api.onrender.com/api/cases', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        const casesData = await casesResponse.json();
        
        if (!casesData.success) {
            console.log('‚ùå Erro ao buscar caixas');
            return;
        }
        
        console.log(`‚úÖ Encontradas ${casesData.data.length} caixas`);
        
        // Verificar se caixas t√™m restri√ß√µes de tipo de conta
        const caixasComRestricao = casesData.data.filter(caixa => 
            caixa.tipo_conta_permitido || caixa.restricao_tipo_conta
        );
        
        if (caixasComRestricao.length > 0) {
            console.log(`‚ö†Ô∏è Encontradas ${caixasComRestricao.length} caixas com restri√ß√µes de tipo de conta:`);
            caixasComRestricao.forEach(caixa => {
                console.log(`   üì¶ ${caixa.nome} - Restri√ß√£o: ${caixa.tipo_conta_permitido || caixa.restricao_tipo_conta}`);
            });
        } else {
            console.log('‚úÖ Nenhuma caixa com restri√ß√µes de tipo de conta encontrada');
        }
        
        // 6. Testar abertura de caixa com verifica√ß√£o de tipo
        console.log('\nüé≤ TESTANDO ABERTURA COM VERIFICA√á√ÉO DE TIPO:');
        console.log('===============================================');
        
        if (wallet.saldo_reais > 0) {
            const testCase = casesData.data[0];
            const casePrice = parseFloat(testCase.preco);
            
            if (wallet.saldo_reais >= casePrice) {
                console.log(`üéØ Testando caixa: ${testCase.nome}`);
                console.log(`   Pre√ßo: R$ ${casePrice}`);
                console.log(`   Tipo de conta atual: ${wallet.tipo_conta}`);
                
                try {
                    const openResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/buy/${testCase.id}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const openResult = await openResponse.json();
                    console.log('üìä Resultado da abertura:', openResult);
                    
                    if (openResult.success) {
                        if (openResult.data && openResult.data.premio) {
                            const premio = openResult.data.premio;
                            console.log('‚úÖ Pr√™mio obtido:');
                            console.log(`   Nome: ${premio.nome}`);
                            console.log(`   Valor: R$ ${premio.valor}`);
                            console.log(`   ID: ${premio.id}`);
                            console.log(`   Tipo de conta: ${premio.tipo_conta || 'N/A'}`);
                            
                            // Verificar se o pr√™mio existe na lista
                            const premioExiste = prizesData.data.find(p => p.id === premio.id);
                            if (!premioExiste) {
                                console.log('‚ùå PROBLEMA: Pr√™mio retornado n√£o existe na lista!');
                                console.log('üîç Verificando se √© um pr√™mio especial para tipo de conta...');
                                
                                // Verificar se √© um pr√™mio especial baseado no ID
                                if (premio.id.includes('_') && premio.id.split('_').length === 2) {
                                    const [tipoCaixa, valor] = premio.id.split('_');
                                    console.log(`   Tipo de caixa: ${tipoCaixa}`);
                                    console.log(`   Valor: ${valor}`);
                                    console.log('üí° Este parece ser um pr√™mio especial gerado dinamicamente!');
                                }
                            } else {
                                console.log('‚úÖ Pr√™mio existe na lista');
                            }
                        } else {
                            console.log('‚ùå PROBLEMA: Caixa n√£o retornou pr√™mio!');
                        }
                    } else {
                        console.log('‚ùå Falha na abertura:', openResult.message || openResult.error);
                        
                        // Verificar se √© erro relacionado ao tipo de conta
                        if (openResult.message && openResult.message.includes('tipo de conta')) {
                            console.log('üîç ERRO RELACIONADO AO TIPO DE CONTA!');
                        }
                    }
                    
                } catch (error) {
                    console.log('‚ùå Erro no teste:', error.message);
                }
            } else {
                console.log('‚ö†Ô∏è Saldo insuficiente para teste');
            }
        } else {
            console.log('‚ö†Ô∏è Saldo zero - n√£o √© poss√≠vel testar');
        }
        
        // 7. Verificar se h√° pr√™mios especiais por tipo de conta
        console.log('\nüîç VERIFICANDO PR√äMIOS ESPECIAIS:');
        console.log('==================================');
        
        // Verificar se h√° pr√™mios com IDs especiais (como weekend_1, nike_1, etc.)
        const premiosEspeciais = prizesData.data.filter(prize => 
            prize.id.includes('_') && 
            (prize.id.includes('weekend') || 
             prize.id.includes('nike') || 
             prize.id.includes('samsung') || 
             prize.id.includes('apple') || 
             prize.id.includes('console') || 
             prize.id.includes('premium'))
        );
        
        if (premiosEspeciais.length > 0) {
            console.log(`‚úÖ Encontrados ${premiosEspeciais.length} pr√™mios especiais:`);
            premiosEspeciais.forEach(premio => {
                console.log(`   üéÅ ${premio.nome} (ID: ${premio.id})`);
            });
        } else {
            console.log('‚ö†Ô∏è Nenhum pr√™mio especial encontrado na lista');
            console.log('üí° Isso explica por que os IDs como weekend_1, nike_1 n√£o existem!');
        }
        
        // 8. Relat√≥rio final
        console.log('\nüìä RELAT√ìRIO FINAL:');
        console.log('===================');
        
        console.log('üîç AN√ÅLISE DOS PROBLEMAS:');
        console.log('=========================');
        
        if (premiosEspeciais.length === 0) {
            console.log('‚ùå PROBLEMA IDENTIFICADO:');
            console.log('   Os pr√™mios retornados (weekend_1, nike_1, samsung_2) n√£o existem na lista');
            console.log('   Isso indica que o backend est√° gerando pr√™mios dinamicamente');
            console.log('   ou usando uma l√≥gica diferente para diferentes tipos de conta');
        }
        
        if (tipoContaUser !== tipoContaWallet) {
            console.log('‚ùå PROBLEMA IDENTIFICADO:');
            console.log('   Inconsist√™ncia entre tipo de conta do usu√°rio e wallet');
        }
        
        console.log('\nüí° POSS√çVEIS CAUSAS:');
        console.log('=====================');
        console.log('1. üîß Backend gera pr√™mios dinamicamente baseado no tipo de conta');
        console.log('2. üîß Pr√™mios especiais n√£o est√£o na tabela de pr√™mios');
        console.log('3. üîß L√≥gica de sele√ß√£o diferente para contas normais vs premium');
        console.log('4. üîß Inconsist√™ncia entre dados do usu√°rio e wallet');
        
        console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!');
        
        return {
            user: user,
            wallet: wallet,
            premiosEspeciais: premiosEspeciais,
            tipoContaConsistente: tipoContaUser === tipoContaWallet
        };
        
    } catch (error) {
        console.log('‚ùå Erro no diagn√≥stico:', error);
        return null;
    }
}

// Fun√ß√£o para testar com diferentes tipos de conta
async function testarDiferentesTiposConta() {
    console.log('\nüß™ TESTANDO DIFERENTES TIPOS DE CONTA:');
    console.log('=======================================');
    
    try {
        const token = localStorage.getItem('token');
        
        // Simular diferentes tipos de conta
        const tiposConta = ['normal', 'premium', 'admin'];
        
        for (const tipo of tiposConta) {
            console.log(`\nüîç Testando tipo de conta: ${tipo}`);
            
            // Verificar se h√° diferen√ßas na resposta da API
            const testResponse = await fetch('https://slotbox-api.onrender.com/api/cases', {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json',
                    'X-Tipo-Conta': tipo // Header customizado para testar
                }
            });
            
            const testData = await testResponse.json();
            
            if (testData.success) {
                console.log(`   ‚úÖ API respondeu para tipo ${tipo}`);
                console.log(`   üì¶ Caixas dispon√≠veis: ${testData.data.length}`);
            } else {
                console.log(`   ‚ùå API falhou para tipo ${tipo}`);
            }
        }
        
    } catch (error) {
        console.log('‚ùå Erro no teste de tipos de conta:', error);
    }
}

// Executar diagn√≥stico
diagnosticarTiposConta();

// Exportar fun√ß√µes
window.diagnosticoTiposConta = {
    diagnosticar: diagnosticarTiposConta,
    testarTipos: testarDiferentesTiposConta
};

console.log('üîç Diagn√≥stico de tipos de conta carregado! Use window.diagnosticoTiposConta.diagnosticar() para executar novamente.');



