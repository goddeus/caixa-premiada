// ========================================
// üîß DEBUG ESPEC√çFICO DO BACKEND
// ========================================
// Cole este c√≥digo no console do navegador para debugar problemas do backend

console.log('üîß INICIANDO DEBUG DO BACKEND...');

// ========================================
// 1. VERIFICAR ENDPOINTS DO BACKEND
// ========================================
async function debugBackendEndpoints() {
  console.log('\nüåê === VERIFICANDO ENDPOINTS DO BACKEND ===');
  
  const endpoints = [
    { url: '/api/auth/me', method: 'GET', description: 'Dados do usu√°rio' },
    { url: '/api/cases', method: 'GET', description: 'Lista de caixas' },
    { url: '/api/cases/1abd77cf-472b-473d-9af0-6cd47f9f1452', method: 'GET', description: 'Dados da caixa Weekend' },
    { url: '/api/cases/0b5e9b8a-9d56-4769-a45a-55a3025640f4', method: 'GET', description: 'Dados da caixa Nike' },
    { url: '/api/cases/3f2a9f7a-cb4d-47e7-991a-0e72c0e0f415', method: 'GET', description: 'Dados da caixa Samsung' },
    { url: '/api/cases/fb0c0175-b478-4fd5-9750-d673c0f374fd', method: 'GET', description: 'Dados da caixa Console' },
    { url: '/api/cases/61a19df9-d011-429e-a9b5-d2c837551150', method: 'GET', description: 'Dados da caixa Apple' },
    { url: '/api/cases/db95bb2b-9b3e-444b-964f-547330010a59', method: 'GET', description: 'Dados da caixa Premium Master' }
  ];
  
  for (const endpoint of endpoints) {
    try {
      console.log(`\nüîç Testando ${endpoint.description}...`);
      
      const response = await fetch(endpoint.url, {
        method: endpoint.method,
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ ${endpoint.description}:`, data);
        
        // Verificar estrutura dos dados
        if (data.prizes) {
          console.log(`üìã Pr√™mios encontrados: ${data.prizes.length}`);
          data.prizes.forEach((prize, index) => {
            console.log(`  ${index + 1}. ${prize.nome} - R$ ${prize.valor} - Sem Imagem: ${prize.sem_imagem || false}`);
          });
        }
      } else {
        const errorData = await response.json().catch(() => ({ error: 'Erro desconhecido' }));
        console.error(`‚ùå ${endpoint.description}:`, response.status, errorData);
      }
    } catch (error) {
      console.error(`‚ùå Erro na requisi√ß√£o ${endpoint.description}:`, error);
    }
  }
}

// ========================================
// 2. TESTAR COMPRA E SORTEIO
// ========================================
async function debugBuyAndDraw(caseId, caseName) {
  console.log(`\nüõí === TESTANDO COMPRA E SORTEIO DE ${caseName} ===`);
  
  try {
    // 1. Fazer compra
    console.log('1Ô∏è‚É£ Fazendo compra...');
    const buyResponse = await fetch(`/api/cases/${caseId}/buy`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ quantidade: 1 })
    });
    
    if (!buyResponse.ok) {
      const errorData = await buyResponse.json();
      console.error('‚ùå Erro na compra:', errorData);
      return null;
    }
    
    const buyData = await buyResponse.json();
    console.log('‚úÖ Compra realizada:', buyData);
    
    // 2. Fazer sorteio
    console.log('2Ô∏è‚É£ Fazendo sorteio...');
    const drawResponse = await fetch(`/api/cases/${caseId}/draw`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('token')}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({})
    });
    
    if (!drawResponse.ok) {
      const errorData = await drawResponse.json();
      console.error('‚ùå Erro no sorteio:', errorData);
      return null;
    }
    
    const drawData = await drawResponse.json();
    console.log('‚úÖ Sorteio realizado:', drawData);
    
    // 3. Verificar pr√™mio
    if (drawData.premio) {
      console.log('üéÅ Pr√™mio recebido:');
      console.log('  - Nome:', drawData.premio.nome);
      console.log('  - Valor:', drawData.premio.valor);
      console.log('  - Tipo:', drawData.premio.tipo);
      console.log('  - Sem Imagem:', drawData.premio.sem_imagem);
      console.log('  - Imagem URL:', drawData.premio.imagem);
      
      // Verificar se o pr√™mio tem imagem
      if (drawData.premio.sem_imagem) {
        console.log('‚ö†Ô∏è ATEN√á√ÉO: Pr√™mio marcado como sem imagem!');
      } else {
        console.log('‚úÖ Pr√™mio tem imagem configurada');
      }
    }
    
    return drawData;
  } catch (error) {
    console.error('‚ùå Erro no processo de compra/sorteio:', error);
    return null;
  }
}

// ========================================
// 3. VERIFICAR DADOS EST√ÅTICOS
// ========================================
async function debugStaticData() {
  console.log('\nüìä === VERIFICANDO DADOS EST√ÅTICOS ===');
  
  const cases = [
    { id: '1abd77cf-472b-473d-9af0-6cd47f9f1452', nome: 'CAIXA FINAL DE SEMANA' },
    { id: '0b5e9b8a-9d56-4769-a45a-55a3025640f4', nome: 'CAIXA NIKE' },
    { id: '3f2a9f7a-cb4d-47e7-991a-0e72c0e0f415', nome: 'CAIXA SAMSUNG' },
    { id: 'fb0c0175-b478-4fd5-9750-d673c0f374fd', nome: 'CAIXA CONSOLE' },
    { id: '61a19df9-d011-429e-a9b5-d2c837551150', nome: 'CAIXA APPLE' },
    { id: 'db95bb2b-9b3e-444b-964f-547330010a59', nome: 'CAIXA PREMIUM MASTER' }
  ];
  
  for (const caseData of cases) {
    console.log(`\nüì¶ ${caseData.nome}:`);
    
    try {
      const response = await fetch(`/api/cases/${caseData.id}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Dados da caixa:', data);
        
        if (data.prizes) {
          console.log('üìã Pr√™mios est√°ticos:');
          data.prizes.forEach((prize, index) => {
            console.log(`  ${index + 1}. ${prize.nome} - R$ ${prize.valor} - Probabilidade: ${prize.probabilidade}`);
          });
        }
      } else {
        console.error('‚ùå Erro ao buscar dados da caixa:', response.status);
      }
    } catch (error) {
      console.error('‚ùå Erro na requisi√ß√£o:', error);
    }
  }
}

// ========================================
// 4. VERIFICAR SISTEMA DE PR√äMIOS CONTROLADOS
// ========================================
async function debugControlledPrizes() {
  console.log('\nüéØ === VERIFICANDO SISTEMA DE PR√äMIOS CONTROLADOS ===');
  
  // Verificar se o usu√°rio √© demo ou normal
  const userResponse = await fetch('/api/auth/me', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${localStorage.getItem('token')}`,
      'Content-Type': 'application/json'
    }
  });
  
  if (!userResponse.ok) {
    console.error('‚ùå Erro ao buscar dados do usu√°rio');
    return;
  }
  
  const userData = await userResponse.json();
  console.log('üë§ Tipo de conta:', userData.tipo_conta);
  
  // Testar compras para verificar se os pr√™mios est√£o sendo controlados
  const testCases = [
    { id: 'fb0c0175-b478-4fd5-9750-d673c0f374fd', nome: 'CAIXA CONSOLE' },
    { id: '61a19df9-d011-429e-a9b5-d2c837551150', nome: 'CAIXA APPLE' }
  ];
  
  for (const caseData of testCases) {
    console.log(`\nüîç Testando ${caseData.nome}...`);
    
    const results = [];
    for (let i = 0; i < 3; i++) {
      const result = await debugBuyAndDraw(caseData.id, caseData.nome);
      if (result && result.premio) {
        results.push(result.premio);
      }
      
      // Delay entre compras
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`\nüìä RESUMO DAS COMPRAS DE ${caseData.nome}:`);
    results.forEach((prize, index) => {
      console.log(`${index + 1}. ${prize.nome} - R$ ${prize.valor} - Sem Imagem: ${prize.sem_imagem}`);
    });
    
    // Verificar se os pr√™mios est√£o sendo controlados
    const highValuePrizes = results.filter(prize => prize.valor >= 1000);
    if (highValuePrizes.length > 0 && userData.tipo_conta === 'normal') {
      console.log('‚ö†Ô∏è ATEN√á√ÉO: Conta normal recebeu pr√™mios de alto valor!');
    } else if (highValuePrizes.length > 0 && userData.tipo_conta === 'demo') {
      console.log('‚úÖ Conta demo recebeu pr√™mios de alto valor (esperado)');
    }
  }
}

// ========================================
// 5. VERIFICAR PROBLEMAS ESPEC√çFICOS
// ========================================
async function debugSpecificIssues() {
  console.log('\nüîç === VERIFICANDO PROBLEMAS ESPEC√çFICOS ===');
  
  // Verificar se h√° pr√™mios com valores altos que n√£o t√™m imagem
  console.log('üéØ Testando pr√™mios de alto valor...');
  
  const highValueCases = [
    { id: '61a19df9-d011-429e-a9b5-d2c837551150', nome: 'CAIXA APPLE' },
    { id: 'db95bb2b-9b3e-444b-964f-547330010a59', nome: 'CAIXA PREMIUM MASTER' }
  ];
  
  for (const caseData of highValueCases) {
    console.log(`\nüîç Testando ${caseData.nome}...`);
    
    const results = [];
    for (let i = 0; i < 5; i++) {
      const result = await debugBuyAndDraw(caseData.id, caseData.nome);
      if (result && result.premio) {
        results.push(result.premio);
      }
      
      // Delay entre compras
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    console.log(`\nüìä RESUMO DAS COMPRAS DE ${caseData.nome}:`);
    results.forEach((prize, index) => {
      console.log(`${index + 1}. ${prize.nome} - R$ ${prize.valor} - Sem Imagem: ${prize.sem_imagem}`);
    });
    
    // Verificar se h√° pr√™mios de alto valor
    const highValuePrizes = results.filter(prize => prize.valor >= 1000);
    if (highValuePrizes.length > 0) {
      console.log('‚ö†Ô∏è PR√äMIOS DE ALTO VALOR ENCONTRADOS:');
      highValuePrizes.forEach(prize => {
        console.log(`  - ${prize.nome}: R$ ${prize.valor} (Sem Imagem: ${prize.sem_imagem})`);
      });
    }
  }
}

// ========================================
// 6. FUN√á√ÉO PRINCIPAL DE DEBUG DO BACKEND
// ========================================
async function runBackendDebug() {
  console.log('üîß INICIANDO DEBUG DO BACKEND...');
  
  // 1. Verificar endpoints do backend
  await debugBackendEndpoints();
  
  // 2. Verificar dados est√°ticos
  await debugStaticData();
  
  // 3. Verificar sistema de pr√™mios controlados
  await debugControlledPrizes();
  
  // 4. Verificar problemas espec√≠ficos
  await debugSpecificIssues();
  
  console.log('\n‚úÖ DEBUG DO BACKEND FINALIZADO!');
  console.log('üìã Verifique os logs acima para identificar problemas do backend.');
}

// ========================================
// 7. FUN√á√ïES AUXILIARES
// ========================================

// Fun√ß√£o para testar uma caixa espec√≠fica
window.testCaseBackend = async function(caseId, caseName) {
  return await debugBuyAndDraw(caseId, caseName);
};

// Fun√ß√£o para verificar endpoints
window.checkEndpoints = debugBackendEndpoints;

// Fun√ß√£o para verificar dados est√°ticos
window.checkStaticData = debugStaticData;

// Fun√ß√£o para verificar pr√™mios controlados
window.checkControlledPrizes = debugControlledPrizes;

// ========================================
// 8. EXECUTAR DEBUG AUTOMATICAMENTE
// ========================================
console.log('üéØ FUN√á√ïES DISPON√çVEIS:');
console.log('- runBackendDebug() - Executa debug completo do backend');
console.log('- testCaseBackend(caseId, caseName) - Testa uma caixa espec√≠fica');
console.log('- checkEndpoints() - Verifica endpoints do backend');
console.log('- checkStaticData() - Verifica dados est√°ticos');
console.log('- checkControlledPrizes() - Verifica pr√™mios controlados');
console.log('\nüöÄ Execute runBackendDebug() para come√ßar!');

// Executar debug automaticamente
runBackendDebug();
