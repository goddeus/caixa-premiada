/**
 * üîç VERIFICA√á√ÉO DE SALDO NO BACKEND
 * 
 * Este script verifica se h√° problemas no backend
 * relacionados ao saldo do usu√°rio.
 */

console.log('üîç VERIFICANDO SALDO NO BACKEND...');
console.log('===================================');

// Fun√ß√£o para verificar saldo no backend
async function verificarSaldoBackend() {
    console.log('üöÄ Iniciando verifica√ß√£o do backend...');
    
    try {
        const token = localStorage.getItem('token');
        
        if (!token) {
            console.log('‚ùå Token n√£o encontrado');
            return;
        }
        
        // 1. Verificar endpoint de autentica√ß√£o
        console.log('\nüîê VERIFICANDO AUTENTICA√á√ÉO:');
        console.log('============================');
        
        const authResponse = await fetch('https://slotbox-api.onrender.com/api/auth/me', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üìä Status da autentica√ß√£o:', authResponse.status);
        
        if (!authResponse.ok) {
            console.log('‚ùå Falha na autentica√ß√£o');
            return;
        }
        
        const authData = await authResponse.json();
        console.log('‚úÖ Usu√°rio autenticado:', authData.data.nome);
        console.log('üìä ID do usu√°rio:', authData.data.id);
        
        // 2. Verificar endpoint de wallet
        console.log('\nüí∞ VERIFICANDO WALLET:');
        console.log('=======================');
        
        const walletResponse = await fetch('https://slotbox-api.onrender.com/api/wallet', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üìä Status da wallet:', walletResponse.status);
        
        if (!walletResponse.ok) {
            console.log('‚ùå Falha ao buscar wallet');
            return;
        }
        
        const walletData = await walletResponse.json();
        console.log('‚úÖ Wallet obtida com sucesso');
        console.log('üìä Dados da wallet:', walletData.data);
        
        // 3. Verificar endpoint de hist√≥rico
        console.log('\nüìã VERIFICANDO HIST√ìRICO:');
        console.log('==========================');
        
        const historyResponse = await fetch('https://slotbox-api.onrender.com/api/wallet/history', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üìä Status do hist√≥rico:', historyResponse.status);
        
        if (historyResponse.ok) {
            const historyData = await historyResponse.json();
            console.log('‚úÖ Hist√≥rico obtido com sucesso');
            console.log(`üìä Total de transa√ß√µes: ${historyData.data?.length || 0}`);
            
            if (historyData.data && historyData.data.length > 0) {
                console.log('üìã √öltimas transa√ß√µes:');
                historyData.data.slice(0, 10).forEach((transacao, index) => {
                    console.log(`   ${index + 1}. ${transacao.tipo} - R$ ${transacao.valor} - ${transacao.descricao} - ${transacao.created_at}`);
                });
            }
        } else {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel obter hist√≥rico');
        }
        
        // 4. Verificar endpoint de casos
        console.log('\nüì¶ VERIFICANDO CASES:');
        console.log('======================');
        
        const casesResponse = await fetch('https://slotbox-api.onrender.com/api/cases', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üìä Status dos cases:', casesResponse.status);
        
        if (casesResponse.ok) {
            const casesData = await casesResponse.json();
            console.log('‚úÖ Cases obtidos com sucesso');
            console.log(`üìä Total de cases: ${casesData.data?.length || 0}`);
            
            if (casesData.data && casesData.data.length > 0) {
                console.log('üìã Cases dispon√≠veis:');
                casesData.data.forEach((caseItem, index) => {
                    console.log(`   ${index + 1}. ${caseItem.nome} - R$ ${caseItem.preco}`);
                });
            }
        } else {
            console.log('‚ùå Falha ao buscar cases');
        }
        
        // 5. Verificar endpoint de pr√™mios
        console.log('\nüéÅ VERIFICANDO PR√äMIOS:');
        console.log('========================');
        
        const prizesResponse = await fetch('https://slotbox-api.onrender.com/api/prizes', {
            headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            }
        });
        
        console.log('üìä Status dos pr√™mios:', prizesResponse.status);
        
        if (prizesResponse.ok) {
            const prizesData = await prizesResponse.json();
            console.log('‚úÖ Pr√™mios obtidos com sucesso');
            console.log(`üìä Total de pr√™mios: ${prizesData.data?.length || 0}`);
        } else {
            console.log('‚ùå Falha ao buscar pr√™mios');
        }
        
        // 6. Teste de abertura de caixa (se tiver saldo)
        if (walletData.data.saldo_reais > 0) {
            console.log('\nüé≤ TESTANDO ABERTURA DE CAIXA:');
            console.log('==============================');
            
            const casesData = await casesResponse.json();
            
            if (casesData.success && casesData.data.length > 0) {
                const testCase = casesData.data[0];
                const casePrice = parseFloat(testCase.preco);
                
                console.log(`üéØ Testando com caixa: ${testCase.nome}`);
                console.log(`üí∞ Pre√ßo: R$ ${casePrice}`);
                console.log(`üí∞ Saldo dispon√≠vel: R$ ${walletData.data.saldo_reais}`);
                
                if (walletData.data.saldo_reais >= casePrice) {
                    console.log('‚úÖ Saldo suficiente para teste');
                    
                    const openResponse = await fetch(`https://slotbox-api.onrender.com/api/cases/buy/${testCase.id}`, {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const openResult = await openResponse.json();
                    console.log('üìä Resultado do teste:', openResult);
                    
                    if (openResult.success) {
                        console.log('‚úÖ Caixa aberta com sucesso!');
                        console.log(`üéÅ Pr√™mio: ${openResult.data.premio?.nome || 'N/A'}`);
                        console.log(`üí∞ Saldo restante: R$ ${openResult.data.saldo_restante || 'N/A'}`);
                        
                        // Verificar se o saldo foi atualizado
                        const newWalletResponse = await fetch('https://slotbox-api.onrender.com/api/wallet', {
                            headers: {
                                'Authorization': `Bearer ${token}`,
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        const newWalletData = await newWalletResponse.json();
                        console.log('üí∞ Saldo ap√≥s abertura:', newWalletData.data.saldo_reais);
                        
                    } else {
                        console.log('‚ùå Falha na abertura:', openResult.error || openResult.message);
                    }
                } else {
                    console.log('‚ö†Ô∏è Saldo insuficiente para teste');
                }
            }
        }
        
        console.log('\n‚úÖ VERIFICA√á√ÉO DO BACKEND CONCLU√çDA!');
        
    } catch (error) {
        console.log('‚ùå Erro na verifica√ß√£o do backend:', error);
    }
}

// Executar verifica√ß√£o
verificarSaldoBackend();

// Exportar fun√ß√£o
window.verificarBackend = {
    executar: verificarSaldoBackend
};

console.log('üîß Verifica√ß√£o carregada! Use window.verificarBackend.executar() para executar novamente.');
